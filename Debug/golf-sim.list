
golf-sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006554  08006554  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006554  08006554  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800655c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08006568  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08006568  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0a9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181c  00000000  00000000  0002b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002c940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f0  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016ef  00000000  00000000  0002d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c89c  00000000  00000000  0002eff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a10e8  00000000  00000000  0003b893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000214c  00000000  00000000  000dc97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000deac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064c4 	.word	0x080064c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080064c4 	.word	0x080064c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 f89f 	bl	800053c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 f82b 	bl	8000464 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f891 	bl	800053c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f887 	bl	800053c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f837 	bl	80004b0 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f82d 	bl	80004b0 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__eqsf2>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	0042      	lsls	r2, r0, #1
 8000468:	0245      	lsls	r5, r0, #9
 800046a:	024e      	lsls	r6, r1, #9
 800046c:	004c      	lsls	r4, r1, #1
 800046e:	0fc3      	lsrs	r3, r0, #31
 8000470:	0a6d      	lsrs	r5, r5, #9
 8000472:	2001      	movs	r0, #1
 8000474:	0e12      	lsrs	r2, r2, #24
 8000476:	0a76      	lsrs	r6, r6, #9
 8000478:	0e24      	lsrs	r4, r4, #24
 800047a:	0fc9      	lsrs	r1, r1, #31
 800047c:	2aff      	cmp	r2, #255	; 0xff
 800047e:	d006      	beq.n	800048e <__eqsf2+0x2a>
 8000480:	2cff      	cmp	r4, #255	; 0xff
 8000482:	d003      	beq.n	800048c <__eqsf2+0x28>
 8000484:	42a2      	cmp	r2, r4
 8000486:	d101      	bne.n	800048c <__eqsf2+0x28>
 8000488:	42b5      	cmp	r5, r6
 800048a:	d006      	beq.n	800049a <__eqsf2+0x36>
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	2d00      	cmp	r5, #0
 8000490:	d1fc      	bne.n	800048c <__eqsf2+0x28>
 8000492:	2cff      	cmp	r4, #255	; 0xff
 8000494:	d1fa      	bne.n	800048c <__eqsf2+0x28>
 8000496:	2e00      	cmp	r6, #0
 8000498:	d1f8      	bne.n	800048c <__eqsf2+0x28>
 800049a:	428b      	cmp	r3, r1
 800049c:	d006      	beq.n	80004ac <__eqsf2+0x48>
 800049e:	2001      	movs	r0, #1
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	d1f3      	bne.n	800048c <__eqsf2+0x28>
 80004a4:	0028      	movs	r0, r5
 80004a6:	1e43      	subs	r3, r0, #1
 80004a8:	4198      	sbcs	r0, r3
 80004aa:	e7ef      	b.n	800048c <__eqsf2+0x28>
 80004ac:	2000      	movs	r0, #0
 80004ae:	e7ed      	b.n	800048c <__eqsf2+0x28>

080004b0 <__gesf2>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	0042      	lsls	r2, r0, #1
 80004b4:	0245      	lsls	r5, r0, #9
 80004b6:	024e      	lsls	r6, r1, #9
 80004b8:	004c      	lsls	r4, r1, #1
 80004ba:	0fc3      	lsrs	r3, r0, #31
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e12      	lsrs	r2, r2, #24
 80004c0:	0a76      	lsrs	r6, r6, #9
 80004c2:	0e24      	lsrs	r4, r4, #24
 80004c4:	0fc8      	lsrs	r0, r1, #31
 80004c6:	2aff      	cmp	r2, #255	; 0xff
 80004c8:	d01b      	beq.n	8000502 <__gesf2+0x52>
 80004ca:	2cff      	cmp	r4, #255	; 0xff
 80004cc:	d00e      	beq.n	80004ec <__gesf2+0x3c>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d11b      	bne.n	800050a <__gesf2+0x5a>
 80004d2:	2c00      	cmp	r4, #0
 80004d4:	d101      	bne.n	80004da <__gesf2+0x2a>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d01c      	beq.n	8000514 <__gesf2+0x64>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d00c      	beq.n	80004f8 <__gesf2+0x48>
 80004de:	4283      	cmp	r3, r0
 80004e0:	d01c      	beq.n	800051c <__gesf2+0x6c>
 80004e2:	2102      	movs	r1, #2
 80004e4:	1e58      	subs	r0, r3, #1
 80004e6:	4008      	ands	r0, r1
 80004e8:	3801      	subs	r0, #1
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d122      	bne.n	8000536 <__gesf2+0x86>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d1f4      	bne.n	80004de <__gesf2+0x2e>
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1f2      	bne.n	80004de <__gesf2+0x2e>
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d1f6      	bne.n	80004ea <__gesf2+0x3a>
 80004fc:	2001      	movs	r0, #1
 80004fe:	4240      	negs	r0, r0
 8000500:	e7f3      	b.n	80004ea <__gesf2+0x3a>
 8000502:	2d00      	cmp	r5, #0
 8000504:	d117      	bne.n	8000536 <__gesf2+0x86>
 8000506:	2cff      	cmp	r4, #255	; 0xff
 8000508:	d0f0      	beq.n	80004ec <__gesf2+0x3c>
 800050a:	2c00      	cmp	r4, #0
 800050c:	d1e7      	bne.n	80004de <__gesf2+0x2e>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d1e5      	bne.n	80004de <__gesf2+0x2e>
 8000512:	e7e6      	b.n	80004e2 <__gesf2+0x32>
 8000514:	2000      	movs	r0, #0
 8000516:	2d00      	cmp	r5, #0
 8000518:	d0e7      	beq.n	80004ea <__gesf2+0x3a>
 800051a:	e7e2      	b.n	80004e2 <__gesf2+0x32>
 800051c:	42a2      	cmp	r2, r4
 800051e:	dc05      	bgt.n	800052c <__gesf2+0x7c>
 8000520:	dbea      	blt.n	80004f8 <__gesf2+0x48>
 8000522:	42b5      	cmp	r5, r6
 8000524:	d802      	bhi.n	800052c <__gesf2+0x7c>
 8000526:	d3e7      	bcc.n	80004f8 <__gesf2+0x48>
 8000528:	2000      	movs	r0, #0
 800052a:	e7de      	b.n	80004ea <__gesf2+0x3a>
 800052c:	4243      	negs	r3, r0
 800052e:	4158      	adcs	r0, r3
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	3801      	subs	r0, #1
 8000534:	e7d9      	b.n	80004ea <__gesf2+0x3a>
 8000536:	2002      	movs	r0, #2
 8000538:	4240      	negs	r0, r0
 800053a:	e7d6      	b.n	80004ea <__gesf2+0x3a>

0800053c <__lesf2>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	0042      	lsls	r2, r0, #1
 8000540:	0245      	lsls	r5, r0, #9
 8000542:	024e      	lsls	r6, r1, #9
 8000544:	004c      	lsls	r4, r1, #1
 8000546:	0fc3      	lsrs	r3, r0, #31
 8000548:	0a6d      	lsrs	r5, r5, #9
 800054a:	0e12      	lsrs	r2, r2, #24
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	0e24      	lsrs	r4, r4, #24
 8000550:	0fc8      	lsrs	r0, r1, #31
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d00b      	beq.n	800056e <__lesf2+0x32>
 8000556:	2cff      	cmp	r4, #255	; 0xff
 8000558:	d00d      	beq.n	8000576 <__lesf2+0x3a>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d11f      	bne.n	800059e <__lesf2+0x62>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d116      	bne.n	8000590 <__lesf2+0x54>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d114      	bne.n	8000590 <__lesf2+0x54>
 8000566:	2000      	movs	r0, #0
 8000568:	2d00      	cmp	r5, #0
 800056a:	d010      	beq.n	800058e <__lesf2+0x52>
 800056c:	e009      	b.n	8000582 <__lesf2+0x46>
 800056e:	2d00      	cmp	r5, #0
 8000570:	d10c      	bne.n	800058c <__lesf2+0x50>
 8000572:	2cff      	cmp	r4, #255	; 0xff
 8000574:	d113      	bne.n	800059e <__lesf2+0x62>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d108      	bne.n	800058c <__lesf2+0x50>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d008      	beq.n	8000590 <__lesf2+0x54>
 800057e:	4283      	cmp	r3, r0
 8000580:	d012      	beq.n	80005a8 <__lesf2+0x6c>
 8000582:	2102      	movs	r1, #2
 8000584:	1e58      	subs	r0, r3, #1
 8000586:	4008      	ands	r0, r1
 8000588:	3801      	subs	r0, #1
 800058a:	e000      	b.n	800058e <__lesf2+0x52>
 800058c:	2002      	movs	r0, #2
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	2d00      	cmp	r5, #0
 8000592:	d1f4      	bne.n	800057e <__lesf2+0x42>
 8000594:	2800      	cmp	r0, #0
 8000596:	d1fa      	bne.n	800058e <__lesf2+0x52>
 8000598:	2001      	movs	r0, #1
 800059a:	4240      	negs	r0, r0
 800059c:	e7f7      	b.n	800058e <__lesf2+0x52>
 800059e:	2c00      	cmp	r4, #0
 80005a0:	d1ed      	bne.n	800057e <__lesf2+0x42>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d1eb      	bne.n	800057e <__lesf2+0x42>
 80005a6:	e7ec      	b.n	8000582 <__lesf2+0x46>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc05      	bgt.n	80005b8 <__lesf2+0x7c>
 80005ac:	dbf2      	blt.n	8000594 <__lesf2+0x58>
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d802      	bhi.n	80005b8 <__lesf2+0x7c>
 80005b2:	d3ef      	bcc.n	8000594 <__lesf2+0x58>
 80005b4:	2000      	movs	r0, #0
 80005b6:	e7ea      	b.n	800058e <__lesf2+0x52>
 80005b8:	4243      	negs	r3, r0
 80005ba:	4158      	adcs	r0, r3
 80005bc:	0040      	lsls	r0, r0, #1
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e5      	b.n	800058e <__lesf2+0x52>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__aeabi_fsub>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	46c6      	mov	lr, r8
 80005c8:	0243      	lsls	r3, r0, #9
 80005ca:	0a5b      	lsrs	r3, r3, #9
 80005cc:	0045      	lsls	r5, r0, #1
 80005ce:	00da      	lsls	r2, r3, #3
 80005d0:	0fc4      	lsrs	r4, r0, #31
 80005d2:	0248      	lsls	r0, r1, #9
 80005d4:	004f      	lsls	r7, r1, #1
 80005d6:	4694      	mov	ip, r2
 80005d8:	0a42      	lsrs	r2, r0, #9
 80005da:	001e      	movs	r6, r3
 80005dc:	4690      	mov	r8, r2
 80005de:	b500      	push	{lr}
 80005e0:	0e2d      	lsrs	r5, r5, #24
 80005e2:	0e3f      	lsrs	r7, r7, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	0980      	lsrs	r0, r0, #6
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d059      	beq.n	80006a0 <__aeabi_fsub+0xdc>
 80005ec:	2201      	movs	r2, #1
 80005ee:	4051      	eors	r1, r2
 80005f0:	428c      	cmp	r4, r1
 80005f2:	d039      	beq.n	8000668 <__aeabi_fsub+0xa4>
 80005f4:	1bea      	subs	r2, r5, r7
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	dd58      	ble.n	80006ac <__aeabi_fsub+0xe8>
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d068      	beq.n	80006d0 <__aeabi_fsub+0x10c>
 80005fe:	2dff      	cmp	r5, #255	; 0xff
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x40>
 8000602:	e0d1      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	04db      	lsls	r3, r3, #19
 8000608:	4318      	orrs	r0, r3
 800060a:	2a1b      	cmp	r2, #27
 800060c:	dc00      	bgt.n	8000610 <__aeabi_fsub+0x4c>
 800060e:	e0e3      	b.n	80007d8 <__aeabi_fsub+0x214>
 8000610:	2301      	movs	r3, #1
 8000612:	4662      	mov	r2, ip
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	015a      	lsls	r2, r3, #5
 8000618:	d400      	bmi.n	800061c <__aeabi_fsub+0x58>
 800061a:	e0ac      	b.n	8000776 <__aeabi_fsub+0x1b2>
 800061c:	019b      	lsls	r3, r3, #6
 800061e:	099e      	lsrs	r6, r3, #6
 8000620:	0030      	movs	r0, r6
 8000622:	f001 fbf1 	bl	8001e08 <__clzsi2>
 8000626:	0033      	movs	r3, r6
 8000628:	3805      	subs	r0, #5
 800062a:	4083      	lsls	r3, r0
 800062c:	4285      	cmp	r5, r0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_fsub+0x6e>
 8000630:	e0c6      	b.n	80007c0 <__aeabi_fsub+0x1fc>
 8000632:	4ab2      	ldr	r2, [pc, #712]	; (80008fc <__aeabi_fsub+0x338>)
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	4013      	ands	r3, r2
 8000638:	075a      	lsls	r2, r3, #29
 800063a:	d004      	beq.n	8000646 <__aeabi_fsub+0x82>
 800063c:	220f      	movs	r2, #15
 800063e:	401a      	ands	r2, r3
 8000640:	2a04      	cmp	r2, #4
 8000642:	d000      	beq.n	8000646 <__aeabi_fsub+0x82>
 8000644:	3304      	adds	r3, #4
 8000646:	015a      	lsls	r2, r3, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fsub+0x88>
 800064a:	e097      	b.n	800077c <__aeabi_fsub+0x1b8>
 800064c:	1c6a      	adds	r2, r5, #1
 800064e:	2dfe      	cmp	r5, #254	; 0xfe
 8000650:	d100      	bne.n	8000654 <__aeabi_fsub+0x90>
 8000652:	e084      	b.n	800075e <__aeabi_fsub+0x19a>
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	0a5e      	lsrs	r6, r3, #9
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	05d0      	lsls	r0, r2, #23
 800065c:	4330      	orrs	r0, r6
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4320      	orrs	r0, r4
 8000662:	bc80      	pop	{r7}
 8000664:	46b8      	mov	r8, r7
 8000666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000668:	1bea      	subs	r2, r5, r7
 800066a:	2a00      	cmp	r2, #0
 800066c:	dd41      	ble.n	80006f2 <__aeabi_fsub+0x12e>
 800066e:	2f00      	cmp	r7, #0
 8000670:	d06b      	beq.n	800074a <__aeabi_fsub+0x186>
 8000672:	2dff      	cmp	r5, #255	; 0xff
 8000674:	d100      	bne.n	8000678 <__aeabi_fsub+0xb4>
 8000676:	e097      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	04db      	lsls	r3, r3, #19
 800067c:	4318      	orrs	r0, r3
 800067e:	2a1b      	cmp	r2, #27
 8000680:	dc00      	bgt.n	8000684 <__aeabi_fsub+0xc0>
 8000682:	e0cc      	b.n	800081e <__aeabi_fsub+0x25a>
 8000684:	2301      	movs	r3, #1
 8000686:	4463      	add	r3, ip
 8000688:	015a      	lsls	r2, r3, #5
 800068a:	d574      	bpl.n	8000776 <__aeabi_fsub+0x1b2>
 800068c:	3501      	adds	r5, #1
 800068e:	2dff      	cmp	r5, #255	; 0xff
 8000690:	d065      	beq.n	800075e <__aeabi_fsub+0x19a>
 8000692:	2201      	movs	r2, #1
 8000694:	499a      	ldr	r1, [pc, #616]	; (8000900 <__aeabi_fsub+0x33c>)
 8000696:	401a      	ands	r2, r3
 8000698:	085b      	lsrs	r3, r3, #1
 800069a:	400b      	ands	r3, r1
 800069c:	4313      	orrs	r3, r2
 800069e:	e7cb      	b.n	8000638 <__aeabi_fsub+0x74>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d01f      	beq.n	80006e4 <__aeabi_fsub+0x120>
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d022      	beq.n	80006ee <__aeabi_fsub+0x12a>
 80006a8:	002a      	movs	r2, r5
 80006aa:	3aff      	subs	r2, #255	; 0xff
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d035      	beq.n	800071c <__aeabi_fsub+0x158>
 80006b0:	1b7a      	subs	r2, r7, r5
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fsub+0xf4>
 80006b6:	e099      	b.n	80007ec <__aeabi_fsub+0x228>
 80006b8:	4663      	mov	r3, ip
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fsub+0xfc>
 80006be:	e0dd      	b.n	800087c <__aeabi_fsub+0x2b8>
 80006c0:	1e53      	subs	r3, r2, #1
 80006c2:	2a01      	cmp	r2, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fsub+0x104>
 80006c6:	e105      	b.n	80008d4 <__aeabi_fsub+0x310>
 80006c8:	2aff      	cmp	r2, #255	; 0xff
 80006ca:	d06b      	beq.n	80007a4 <__aeabi_fsub+0x1e0>
 80006cc:	001a      	movs	r2, r3
 80006ce:	e094      	b.n	80007fa <__aeabi_fsub+0x236>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d073      	beq.n	80007bc <__aeabi_fsub+0x1f8>
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	d100      	bne.n	80006dc <__aeabi_fsub+0x118>
 80006da:	e0df      	b.n	800089c <__aeabi_fsub+0x2d8>
 80006dc:	2aff      	cmp	r2, #255	; 0xff
 80006de:	d063      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 80006e0:	000a      	movs	r2, r1
 80006e2:	e792      	b.n	800060a <__aeabi_fsub+0x46>
 80006e4:	2201      	movs	r2, #1
 80006e6:	4051      	eors	r1, r2
 80006e8:	42a1      	cmp	r1, r4
 80006ea:	d000      	beq.n	80006ee <__aeabi_fsub+0x12a>
 80006ec:	e782      	b.n	80005f4 <__aeabi_fsub+0x30>
 80006ee:	002a      	movs	r2, r5
 80006f0:	3aff      	subs	r2, #255	; 0xff
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d036      	beq.n	8000764 <__aeabi_fsub+0x1a0>
 80006f6:	1b7a      	subs	r2, r7, r5
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fsub+0x13a>
 80006fc:	e0aa      	b.n	8000854 <__aeabi_fsub+0x290>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x140>
 8000702:	e0da      	b.n	80008ba <__aeabi_fsub+0x2f6>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	4661      	mov	r1, ip
 8000708:	04db      	lsls	r3, r3, #19
 800070a:	4319      	orrs	r1, r3
 800070c:	468c      	mov	ip, r1
 800070e:	2a1b      	cmp	r2, #27
 8000710:	dc00      	bgt.n	8000714 <__aeabi_fsub+0x150>
 8000712:	e0d4      	b.n	80008be <__aeabi_fsub+0x2fa>
 8000714:	2301      	movs	r3, #1
 8000716:	003d      	movs	r5, r7
 8000718:	181b      	adds	r3, r3, r0
 800071a:	e7b5      	b.n	8000688 <__aeabi_fsub+0xc4>
 800071c:	27fe      	movs	r7, #254	; 0xfe
 800071e:	1c6a      	adds	r2, r5, #1
 8000720:	4217      	tst	r7, r2
 8000722:	d171      	bne.n	8000808 <__aeabi_fsub+0x244>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fsub+0x166>
 8000728:	e09e      	b.n	8000868 <__aeabi_fsub+0x2a4>
 800072a:	4663      	mov	r3, ip
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fsub+0x16e>
 8000730:	e0d5      	b.n	80008de <__aeabi_fsub+0x31a>
 8000732:	2200      	movs	r2, #0
 8000734:	2800      	cmp	r0, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fsub+0x176>
 8000738:	e78f      	b.n	800065a <__aeabi_fsub+0x96>
 800073a:	1a1b      	subs	r3, r3, r0
 800073c:	015e      	lsls	r6, r3, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fsub+0x17e>
 8000740:	e0d6      	b.n	80008f0 <__aeabi_fsub+0x32c>
 8000742:	4663      	mov	r3, ip
 8000744:	000c      	movs	r4, r1
 8000746:	1ac3      	subs	r3, r0, r3
 8000748:	e776      	b.n	8000638 <__aeabi_fsub+0x74>
 800074a:	2800      	cmp	r0, #0
 800074c:	d036      	beq.n	80007bc <__aeabi_fsub+0x1f8>
 800074e:	1e51      	subs	r1, r2, #1
 8000750:	2a01      	cmp	r2, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x192>
 8000754:	e09a      	b.n	800088c <__aeabi_fsub+0x2c8>
 8000756:	2aff      	cmp	r2, #255	; 0xff
 8000758:	d026      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 800075a:	000a      	movs	r2, r1
 800075c:	e78f      	b.n	800067e <__aeabi_fsub+0xba>
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	2600      	movs	r6, #0
 8000762:	e77a      	b.n	800065a <__aeabi_fsub+0x96>
 8000764:	27fe      	movs	r7, #254	; 0xfe
 8000766:	1c6a      	adds	r2, r5, #1
 8000768:	4217      	tst	r7, r2
 800076a:	d062      	beq.n	8000832 <__aeabi_fsub+0x26e>
 800076c:	2aff      	cmp	r2, #255	; 0xff
 800076e:	d0f6      	beq.n	800075e <__aeabi_fsub+0x19a>
 8000770:	0015      	movs	r5, r2
 8000772:	4460      	add	r0, ip
 8000774:	0843      	lsrs	r3, r0, #1
 8000776:	075a      	lsls	r2, r3, #29
 8000778:	d000      	beq.n	800077c <__aeabi_fsub+0x1b8>
 800077a:	e75f      	b.n	800063c <__aeabi_fsub+0x78>
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	2dff      	cmp	r5, #255	; 0xff
 8000780:	d012      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	0a5e      	lsrs	r6, r3, #9
 8000786:	b2ea      	uxtb	r2, r5
 8000788:	e767      	b.n	800065a <__aeabi_fsub+0x96>
 800078a:	4662      	mov	r2, ip
 800078c:	2a00      	cmp	r2, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x1ce>
 8000790:	e093      	b.n	80008ba <__aeabi_fsub+0x2f6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d008      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	4213      	tst	r3, r2
 800079c:	d004      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 800079e:	4640      	mov	r0, r8
 80007a0:	4210      	tst	r0, r2
 80007a2:	d101      	bne.n	80007a8 <__aeabi_fsub+0x1e4>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0d8      	beq.n	800075e <__aeabi_fsub+0x19a>
 80007ac:	2680      	movs	r6, #128	; 0x80
 80007ae:	03f6      	lsls	r6, r6, #15
 80007b0:	431e      	orrs	r6, r3
 80007b2:	0276      	lsls	r6, r6, #9
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	0a76      	lsrs	r6, r6, #9
 80007b8:	e74f      	b.n	800065a <__aeabi_fsub+0x96>
 80007ba:	4643      	mov	r3, r8
 80007bc:	0015      	movs	r5, r2
 80007be:	e7de      	b.n	800077e <__aeabi_fsub+0x1ba>
 80007c0:	2220      	movs	r2, #32
 80007c2:	1b40      	subs	r0, r0, r5
 80007c4:	3001      	adds	r0, #1
 80007c6:	1a12      	subs	r2, r2, r0
 80007c8:	0019      	movs	r1, r3
 80007ca:	4093      	lsls	r3, r2
 80007cc:	40c1      	lsrs	r1, r0
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	4193      	sbcs	r3, r2
 80007d2:	2500      	movs	r5, #0
 80007d4:	430b      	orrs	r3, r1
 80007d6:	e72f      	b.n	8000638 <__aeabi_fsub+0x74>
 80007d8:	2320      	movs	r3, #32
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	0001      	movs	r1, r0
 80007de:	4098      	lsls	r0, r3
 80007e0:	0003      	movs	r3, r0
 80007e2:	40d1      	lsrs	r1, r2
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	4193      	sbcs	r3, r2
 80007e8:	430b      	orrs	r3, r1
 80007ea:	e712      	b.n	8000612 <__aeabi_fsub+0x4e>
 80007ec:	2fff      	cmp	r7, #255	; 0xff
 80007ee:	d0d9      	beq.n	80007a4 <__aeabi_fsub+0x1e0>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	4664      	mov	r4, ip
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431c      	orrs	r4, r3
 80007f8:	46a4      	mov	ip, r4
 80007fa:	2a1b      	cmp	r2, #27
 80007fc:	dd52      	ble.n	80008a4 <__aeabi_fsub+0x2e0>
 80007fe:	2301      	movs	r3, #1
 8000800:	000c      	movs	r4, r1
 8000802:	003d      	movs	r5, r7
 8000804:	1ac3      	subs	r3, r0, r3
 8000806:	e706      	b.n	8000616 <__aeabi_fsub+0x52>
 8000808:	4663      	mov	r3, ip
 800080a:	1a1e      	subs	r6, r3, r0
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d439      	bmi.n	8000884 <__aeabi_fsub+0x2c0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x252>
 8000814:	e704      	b.n	8000620 <__aeabi_fsub+0x5c>
 8000816:	2400      	movs	r4, #0
 8000818:	2200      	movs	r2, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e71d      	b.n	800065a <__aeabi_fsub+0x96>
 800081e:	2320      	movs	r3, #32
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	0001      	movs	r1, r0
 8000824:	4098      	lsls	r0, r3
 8000826:	0003      	movs	r3, r0
 8000828:	40d1      	lsrs	r1, r2
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	430b      	orrs	r3, r1
 8000830:	e729      	b.n	8000686 <__aeabi_fsub+0xc2>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d1a9      	bne.n	800078a <__aeabi_fsub+0x1c6>
 8000836:	4663      	mov	r3, ip
 8000838:	2b00      	cmp	r3, #0
 800083a:	d056      	beq.n	80008ea <__aeabi_fsub+0x326>
 800083c:	2200      	movs	r2, #0
 800083e:	2800      	cmp	r0, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x280>
 8000842:	e70a      	b.n	800065a <__aeabi_fsub+0x96>
 8000844:	0003      	movs	r3, r0
 8000846:	4463      	add	r3, ip
 8000848:	015a      	lsls	r2, r3, #5
 800084a:	d594      	bpl.n	8000776 <__aeabi_fsub+0x1b2>
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <__aeabi_fsub+0x338>)
 800084e:	3501      	adds	r5, #1
 8000850:	4013      	ands	r3, r2
 8000852:	e790      	b.n	8000776 <__aeabi_fsub+0x1b2>
 8000854:	4663      	mov	r3, ip
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0af      	beq.n	80007ba <__aeabi_fsub+0x1f6>
 800085a:	1e53      	subs	r3, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d015      	beq.n	800088c <__aeabi_fsub+0x2c8>
 8000860:	2aff      	cmp	r2, #255	; 0xff
 8000862:	d02a      	beq.n	80008ba <__aeabi_fsub+0x2f6>
 8000864:	001a      	movs	r2, r3
 8000866:	e752      	b.n	800070e <__aeabi_fsub+0x14a>
 8000868:	4662      	mov	r2, ip
 800086a:	2a00      	cmp	r2, #0
 800086c:	d191      	bne.n	8000792 <__aeabi_fsub+0x1ce>
 800086e:	2800      	cmp	r0, #0
 8000870:	d198      	bne.n	80007a4 <__aeabi_fsub+0x1e0>
 8000872:	2680      	movs	r6, #128	; 0x80
 8000874:	2400      	movs	r4, #0
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	03f6      	lsls	r6, r6, #15
 800087a:	e6ee      	b.n	800065a <__aeabi_fsub+0x96>
 800087c:	000c      	movs	r4, r1
 800087e:	4643      	mov	r3, r8
 8000880:	0015      	movs	r5, r2
 8000882:	e77c      	b.n	800077e <__aeabi_fsub+0x1ba>
 8000884:	4663      	mov	r3, ip
 8000886:	000c      	movs	r4, r1
 8000888:	1ac6      	subs	r6, r0, r3
 800088a:	e6c9      	b.n	8000620 <__aeabi_fsub+0x5c>
 800088c:	0003      	movs	r3, r0
 800088e:	4463      	add	r3, ip
 8000890:	2501      	movs	r5, #1
 8000892:	015a      	lsls	r2, r3, #5
 8000894:	d400      	bmi.n	8000898 <__aeabi_fsub+0x2d4>
 8000896:	e76e      	b.n	8000776 <__aeabi_fsub+0x1b2>
 8000898:	2502      	movs	r5, #2
 800089a:	e6fa      	b.n	8000692 <__aeabi_fsub+0xce>
 800089c:	4663      	mov	r3, ip
 800089e:	2501      	movs	r5, #1
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	e6b8      	b.n	8000616 <__aeabi_fsub+0x52>
 80008a4:	4664      	mov	r4, ip
 80008a6:	2320      	movs	r3, #32
 80008a8:	40d4      	lsrs	r4, r2
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	4662      	mov	r2, ip
 80008ae:	409a      	lsls	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	4193      	sbcs	r3, r2
 80008b6:	4323      	orrs	r3, r4
 80008b8:	e7a2      	b.n	8000800 <__aeabi_fsub+0x23c>
 80008ba:	4643      	mov	r3, r8
 80008bc:	e774      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 80008be:	4661      	mov	r1, ip
 80008c0:	2320      	movs	r3, #32
 80008c2:	40d1      	lsrs	r1, r2
 80008c4:	1a9b      	subs	r3, r3, r2
 80008c6:	4662      	mov	r2, ip
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	4193      	sbcs	r3, r2
 80008d0:	430b      	orrs	r3, r1
 80008d2:	e720      	b.n	8000716 <__aeabi_fsub+0x152>
 80008d4:	4663      	mov	r3, ip
 80008d6:	000c      	movs	r4, r1
 80008d8:	2501      	movs	r5, #1
 80008da:	1ac3      	subs	r3, r0, r3
 80008dc:	e69b      	b.n	8000616 <__aeabi_fsub+0x52>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d099      	beq.n	8000816 <__aeabi_fsub+0x252>
 80008e2:	000c      	movs	r4, r1
 80008e4:	4646      	mov	r6, r8
 80008e6:	2200      	movs	r2, #0
 80008e8:	e6b7      	b.n	800065a <__aeabi_fsub+0x96>
 80008ea:	4646      	mov	r6, r8
 80008ec:	2200      	movs	r2, #0
 80008ee:	e6b4      	b.n	800065a <__aeabi_fsub+0x96>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0x332>
 80008f4:	e73f      	b.n	8000776 <__aeabi_fsub+0x1b2>
 80008f6:	2400      	movs	r4, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	e6ae      	b.n	800065a <__aeabi_fsub+0x96>
 80008fc:	fbffffff 	.word	0xfbffffff
 8000900:	7dffffff 	.word	0x7dffffff

08000904 <__aeabi_i2f>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2800      	cmp	r0, #0
 8000908:	d013      	beq.n	8000932 <__aeabi_i2f+0x2e>
 800090a:	17c3      	asrs	r3, r0, #31
 800090c:	18c5      	adds	r5, r0, r3
 800090e:	405d      	eors	r5, r3
 8000910:	0fc4      	lsrs	r4, r0, #31
 8000912:	0028      	movs	r0, r5
 8000914:	f001 fa78 	bl	8001e08 <__clzsi2>
 8000918:	239e      	movs	r3, #158	; 0x9e
 800091a:	0001      	movs	r1, r0
 800091c:	1a1b      	subs	r3, r3, r0
 800091e:	2b96      	cmp	r3, #150	; 0x96
 8000920:	dc0f      	bgt.n	8000942 <__aeabi_i2f+0x3e>
 8000922:	2808      	cmp	r0, #8
 8000924:	d031      	beq.n	800098a <__aeabi_i2f+0x86>
 8000926:	3908      	subs	r1, #8
 8000928:	408d      	lsls	r5, r1
 800092a:	026d      	lsls	r5, r5, #9
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e002      	b.n	8000938 <__aeabi_i2f+0x34>
 8000932:	2400      	movs	r4, #0
 8000934:	2000      	movs	r0, #0
 8000936:	2500      	movs	r5, #0
 8000938:	05c0      	lsls	r0, r0, #23
 800093a:	4328      	orrs	r0, r5
 800093c:	07e4      	lsls	r4, r4, #31
 800093e:	4320      	orrs	r0, r4
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	2b99      	cmp	r3, #153	; 0x99
 8000944:	dd0c      	ble.n	8000960 <__aeabi_i2f+0x5c>
 8000946:	2205      	movs	r2, #5
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	0028      	movs	r0, r5
 800094c:	40d0      	lsrs	r0, r2
 800094e:	0002      	movs	r2, r0
 8000950:	0008      	movs	r0, r1
 8000952:	301b      	adds	r0, #27
 8000954:	4085      	lsls	r5, r0
 8000956:	0028      	movs	r0, r5
 8000958:	1e45      	subs	r5, r0, #1
 800095a:	41a8      	sbcs	r0, r5
 800095c:	4302      	orrs	r2, r0
 800095e:	0015      	movs	r5, r2
 8000960:	2905      	cmp	r1, #5
 8000962:	dc16      	bgt.n	8000992 <__aeabi_i2f+0x8e>
 8000964:	002a      	movs	r2, r5
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <__aeabi_i2f+0xa0>)
 8000968:	4002      	ands	r2, r0
 800096a:	076e      	lsls	r6, r5, #29
 800096c:	d009      	beq.n	8000982 <__aeabi_i2f+0x7e>
 800096e:	260f      	movs	r6, #15
 8000970:	4035      	ands	r5, r6
 8000972:	2d04      	cmp	r5, #4
 8000974:	d005      	beq.n	8000982 <__aeabi_i2f+0x7e>
 8000976:	3204      	adds	r2, #4
 8000978:	0155      	lsls	r5, r2, #5
 800097a:	d502      	bpl.n	8000982 <__aeabi_i2f+0x7e>
 800097c:	239f      	movs	r3, #159	; 0x9f
 800097e:	4002      	ands	r2, r0
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	0192      	lsls	r2, r2, #6
 8000984:	0a55      	lsrs	r5, r2, #9
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	e7d6      	b.n	8000938 <__aeabi_i2f+0x34>
 800098a:	026d      	lsls	r5, r5, #9
 800098c:	2096      	movs	r0, #150	; 0x96
 800098e:	0a6d      	lsrs	r5, r5, #9
 8000990:	e7d2      	b.n	8000938 <__aeabi_i2f+0x34>
 8000992:	1f4a      	subs	r2, r1, #5
 8000994:	4095      	lsls	r5, r2
 8000996:	002a      	movs	r2, r5
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <__aeabi_i2f+0xa0>)
 800099a:	4002      	ands	r2, r0
 800099c:	076e      	lsls	r6, r5, #29
 800099e:	d0f0      	beq.n	8000982 <__aeabi_i2f+0x7e>
 80009a0:	e7e5      	b.n	800096e <__aeabi_i2f+0x6a>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	fbffffff 	.word	0xfbffffff

080009a8 <__aeabi_ddiv>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	4657      	mov	r7, sl
 80009ac:	464e      	mov	r6, r9
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	030c      	lsls	r4, r1, #12
 80009b6:	001f      	movs	r7, r3
 80009b8:	004b      	lsls	r3, r1, #1
 80009ba:	4681      	mov	r9, r0
 80009bc:	4692      	mov	sl, r2
 80009be:	0005      	movs	r5, r0
 80009c0:	b085      	sub	sp, #20
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	0d5b      	lsrs	r3, r3, #21
 80009c6:	0fce      	lsrs	r6, r1, #31
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_ddiv+0x26>
 80009cc:	e152      	b.n	8000c74 <__aeabi_ddiv+0x2cc>
 80009ce:	4ad2      	ldr	r2, [pc, #840]	; (8000d18 <__aeabi_ddiv+0x370>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <__aeabi_ddiv+0x2e>
 80009d4:	e16e      	b.n	8000cb4 <__aeabi_ddiv+0x30c>
 80009d6:	0f42      	lsrs	r2, r0, #29
 80009d8:	00e4      	lsls	r4, r4, #3
 80009da:	4314      	orrs	r4, r2
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	4322      	orrs	r2, r4
 80009e2:	4690      	mov	r8, r2
 80009e4:	4acd      	ldr	r2, [pc, #820]	; (8000d1c <__aeabi_ddiv+0x374>)
 80009e6:	00c5      	lsls	r5, r0, #3
 80009e8:	4693      	mov	fp, r2
 80009ea:	449b      	add	fp, r3
 80009ec:	2300      	movs	r3, #0
 80009ee:	4699      	mov	r9, r3
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	033c      	lsls	r4, r7, #12
 80009f4:	007b      	lsls	r3, r7, #1
 80009f6:	4650      	mov	r0, sl
 80009f8:	0b24      	lsrs	r4, r4, #12
 80009fa:	0d5b      	lsrs	r3, r3, #21
 80009fc:	0fff      	lsrs	r7, r7, #31
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x5c>
 8000a02:	e11a      	b.n	8000c3a <__aeabi_ddiv+0x292>
 8000a04:	4ac4      	ldr	r2, [pc, #784]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_ddiv+0x64>
 8000a0a:	e15e      	b.n	8000cca <__aeabi_ddiv+0x322>
 8000a0c:	0f42      	lsrs	r2, r0, #29
 8000a0e:	00e4      	lsls	r4, r4, #3
 8000a10:	4322      	orrs	r2, r4
 8000a12:	2480      	movs	r4, #128	; 0x80
 8000a14:	0424      	lsls	r4, r4, #16
 8000a16:	4314      	orrs	r4, r2
 8000a18:	4ac0      	ldr	r2, [pc, #768]	; (8000d1c <__aeabi_ddiv+0x374>)
 8000a1a:	00c1      	lsls	r1, r0, #3
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	465a      	mov	r2, fp
 8000a20:	4463      	add	r3, ip
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	469b      	mov	fp, r3
 8000a26:	2000      	movs	r0, #0
 8000a28:	0033      	movs	r3, r6
 8000a2a:	407b      	eors	r3, r7
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	464b      	mov	r3, r9
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d827      	bhi.n	8000a84 <__aeabi_ddiv+0xdc>
 8000a34:	4aba      	ldr	r2, [pc, #744]	; (8000d20 <__aeabi_ddiv+0x378>)
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	58d3      	ldr	r3, [r2, r3]
 8000a3a:	469f      	mov	pc, r3
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	9b00      	ldr	r3, [sp, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d016      	beq.n	8000a72 <__aeabi_ddiv+0xca>
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d100      	bne.n	8000a4a <__aeabi_ddiv+0xa2>
 8000a48:	e287      	b.n	8000f5a <__aeabi_ddiv+0x5b2>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_ddiv+0xa8>
 8000a4e:	e0d5      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2500      	movs	r5, #0
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	07d2      	lsls	r2, r2, #31
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	0028      	movs	r0, r5
 8000a62:	0019      	movs	r1, r3
 8000a64:	b005      	add	sp, #20
 8000a66:	bcf0      	pop	{r4, r5, r6, r7}
 8000a68:	46bb      	mov	fp, r7
 8000a6a:	46b2      	mov	sl, r6
 8000a6c:	46a9      	mov	r9, r5
 8000a6e:	46a0      	mov	r8, r4
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a72:	2200      	movs	r2, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	4ba8      	ldr	r3, [pc, #672]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a78:	e7ed      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000a7a:	46ba      	mov	sl, r7
 8000a7c:	46a0      	mov	r8, r4
 8000a7e:	000d      	movs	r5, r1
 8000a80:	9000      	str	r0, [sp, #0]
 8000a82:	e7dc      	b.n	8000a3e <__aeabi_ddiv+0x96>
 8000a84:	4544      	cmp	r4, r8
 8000a86:	d200      	bcs.n	8000a8a <__aeabi_ddiv+0xe2>
 8000a88:	e1c4      	b.n	8000e14 <__aeabi_ddiv+0x46c>
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_ddiv+0xe6>
 8000a8c:	e1bf      	b.n	8000e0e <__aeabi_ddiv+0x466>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	469c      	mov	ip, r3
 8000a94:	002e      	movs	r6, r5
 8000a96:	4640      	mov	r0, r8
 8000a98:	2500      	movs	r5, #0
 8000a9a:	44e3      	add	fp, ip
 8000a9c:	0223      	lsls	r3, r4, #8
 8000a9e:	0e0c      	lsrs	r4, r1, #24
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	0423      	lsls	r3, r4, #16
 8000aa8:	020a      	lsls	r2, r1, #8
 8000aaa:	0c1f      	lsrs	r7, r3, #16
 8000aac:	4649      	mov	r1, r9
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	9701      	str	r7, [sp, #4]
 8000ab2:	f7ff fbad 	bl	8000210 <__aeabi_uidivmod>
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	437a      	muls	r2, r7
 8000aba:	040b      	lsls	r3, r1, #16
 8000abc:	0c31      	lsrs	r1, r6, #16
 8000abe:	4680      	mov	r8, r0
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	d907      	bls.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	469c      	mov	ip, r3
 8000acc:	1909      	adds	r1, r1, r4
 8000ace:	44e0      	add	r8, ip
 8000ad0:	428c      	cmp	r4, r1
 8000ad2:	d800      	bhi.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ad4:	e201      	b.n	8000eda <__aeabi_ddiv+0x532>
 8000ad6:	1a88      	subs	r0, r1, r2
 8000ad8:	4649      	mov	r1, r9
 8000ada:	f7ff fb99 	bl	8000210 <__aeabi_uidivmod>
 8000ade:	9a01      	ldr	r2, [sp, #4]
 8000ae0:	0436      	lsls	r6, r6, #16
 8000ae2:	4342      	muls	r2, r0
 8000ae4:	0409      	lsls	r1, r1, #16
 8000ae6:	0c36      	lsrs	r6, r6, #16
 8000ae8:	0003      	movs	r3, r0
 8000aea:	430e      	orrs	r6, r1
 8000aec:	42b2      	cmp	r2, r6
 8000aee:	d904      	bls.n	8000afa <__aeabi_ddiv+0x152>
 8000af0:	1936      	adds	r6, r6, r4
 8000af2:	3b01      	subs	r3, #1
 8000af4:	42b4      	cmp	r4, r6
 8000af6:	d800      	bhi.n	8000afa <__aeabi_ddiv+0x152>
 8000af8:	e1e9      	b.n	8000ece <__aeabi_ddiv+0x526>
 8000afa:	1ab0      	subs	r0, r6, r2
 8000afc:	4642      	mov	r2, r8
 8000afe:	9e00      	ldr	r6, [sp, #0]
 8000b00:	0412      	lsls	r2, r2, #16
 8000b02:	431a      	orrs	r2, r3
 8000b04:	0c33      	lsrs	r3, r6, #16
 8000b06:	001f      	movs	r7, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	0413      	lsls	r3, r2, #16
 8000b10:	0432      	lsls	r2, r6, #16
 8000b12:	0c16      	lsrs	r6, r2, #16
 8000b14:	0032      	movs	r2, r6
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	435a      	muls	r2, r3
 8000b1a:	9603      	str	r6, [sp, #12]
 8000b1c:	437b      	muls	r3, r7
 8000b1e:	434e      	muls	r6, r1
 8000b20:	4379      	muls	r1, r7
 8000b22:	0c17      	lsrs	r7, r2, #16
 8000b24:	46bc      	mov	ip, r7
 8000b26:	199b      	adds	r3, r3, r6
 8000b28:	4463      	add	r3, ip
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	d903      	bls.n	8000b36 <__aeabi_ddiv+0x18e>
 8000b2e:	2680      	movs	r6, #128	; 0x80
 8000b30:	0276      	lsls	r6, r6, #9
 8000b32:	46b4      	mov	ip, r6
 8000b34:	4461      	add	r1, ip
 8000b36:	0c1e      	lsrs	r6, r3, #16
 8000b38:	1871      	adds	r1, r6, r1
 8000b3a:	0416      	lsls	r6, r2, #16
 8000b3c:	041b      	lsls	r3, r3, #16
 8000b3e:	0c36      	lsrs	r6, r6, #16
 8000b40:	199e      	adds	r6, r3, r6
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d302      	bcc.n	8000b4c <__aeabi_ddiv+0x1a4>
 8000b46:	d112      	bne.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d210      	bcs.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	9b00      	ldr	r3, [sp, #0]
 8000b52:	469c      	mov	ip, r3
 8000b54:	4465      	add	r5, ip
 8000b56:	001f      	movs	r7, r3
 8000b58:	429d      	cmp	r5, r3
 8000b5a:	419b      	sbcs	r3, r3
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	191b      	adds	r3, r3, r4
 8000b60:	18c0      	adds	r0, r0, r3
 8000b62:	4284      	cmp	r4, r0
 8000b64:	d200      	bcs.n	8000b68 <__aeabi_ddiv+0x1c0>
 8000b66:	e19e      	b.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000b6a:	e199      	b.n	8000ea0 <__aeabi_ddiv+0x4f8>
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	1bae      	subs	r6, r5, r6
 8000b70:	42b5      	cmp	r5, r6
 8000b72:	41ad      	sbcs	r5, r5
 8000b74:	1a40      	subs	r0, r0, r1
 8000b76:	426d      	negs	r5, r5
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	4284      	cmp	r4, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x1d8>
 8000b7e:	e1d2      	b.n	8000f26 <__aeabi_ddiv+0x57e>
 8000b80:	4649      	mov	r1, r9
 8000b82:	f7ff fb45 	bl	8000210 <__aeabi_uidivmod>
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	040b      	lsls	r3, r1, #16
 8000b8a:	4342      	muls	r2, r0
 8000b8c:	0c31      	lsrs	r1, r6, #16
 8000b8e:	0005      	movs	r5, r0
 8000b90:	4319      	orrs	r1, r3
 8000b92:	428a      	cmp	r2, r1
 8000b94:	d900      	bls.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000b96:	e16c      	b.n	8000e72 <__aeabi_ddiv+0x4ca>
 8000b98:	1a88      	subs	r0, r1, r2
 8000b9a:	4649      	mov	r1, r9
 8000b9c:	f7ff fb38 	bl	8000210 <__aeabi_uidivmod>
 8000ba0:	9a01      	ldr	r2, [sp, #4]
 8000ba2:	0436      	lsls	r6, r6, #16
 8000ba4:	4342      	muls	r2, r0
 8000ba6:	0409      	lsls	r1, r1, #16
 8000ba8:	0c36      	lsrs	r6, r6, #16
 8000baa:	0003      	movs	r3, r0
 8000bac:	430e      	orrs	r6, r1
 8000bae:	42b2      	cmp	r2, r6
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000bb2:	e153      	b.n	8000e5c <__aeabi_ddiv+0x4b4>
 8000bb4:	9803      	ldr	r0, [sp, #12]
 8000bb6:	1ab6      	subs	r6, r6, r2
 8000bb8:	0002      	movs	r2, r0
 8000bba:	042d      	lsls	r5, r5, #16
 8000bbc:	431d      	orrs	r5, r3
 8000bbe:	9f02      	ldr	r7, [sp, #8]
 8000bc0:	042b      	lsls	r3, r5, #16
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	435a      	muls	r2, r3
 8000bc6:	437b      	muls	r3, r7
 8000bc8:	469c      	mov	ip, r3
 8000bca:	0c29      	lsrs	r1, r5, #16
 8000bcc:	4348      	muls	r0, r1
 8000bce:	0c13      	lsrs	r3, r2, #16
 8000bd0:	4484      	add	ip, r0
 8000bd2:	4463      	add	r3, ip
 8000bd4:	4379      	muls	r1, r7
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d903      	bls.n	8000be2 <__aeabi_ddiv+0x23a>
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0240      	lsls	r0, r0, #9
 8000bde:	4684      	mov	ip, r0
 8000be0:	4461      	add	r1, ip
 8000be2:	0c18      	lsrs	r0, r3, #16
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	1840      	adds	r0, r0, r1
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	4286      	cmp	r6, r0
 8000bf0:	d200      	bcs.n	8000bf4 <__aeabi_ddiv+0x24c>
 8000bf2:	e100      	b.n	8000df6 <__aeabi_ddiv+0x44e>
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_ddiv+0x250>
 8000bf6:	e0fb      	b.n	8000df0 <__aeabi_ddiv+0x448>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	431d      	orrs	r5, r3
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <__aeabi_ddiv+0x37c>)
 8000bfe:	445b      	add	r3, fp
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_ddiv+0x25e>
 8000c04:	e0aa      	b.n	8000d5c <__aeabi_ddiv+0x3b4>
 8000c06:	076a      	lsls	r2, r5, #29
 8000c08:	d000      	beq.n	8000c0c <__aeabi_ddiv+0x264>
 8000c0a:	e13d      	b.n	8000e88 <__aeabi_ddiv+0x4e0>
 8000c0c:	08e9      	lsrs	r1, r5, #3
 8000c0e:	4642      	mov	r2, r8
 8000c10:	01d2      	lsls	r2, r2, #7
 8000c12:	d506      	bpl.n	8000c22 <__aeabi_ddiv+0x27a>
 8000c14:	4642      	mov	r2, r8
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <__aeabi_ddiv+0x380>)
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	445b      	add	r3, fp
 8000c22:	4a42      	ldr	r2, [pc, #264]	; (8000d2c <__aeabi_ddiv+0x384>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_ddiv+0x282>
 8000c28:	e723      	b.n	8000a72 <__aeabi_ddiv+0xca>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	055b      	lsls	r3, r3, #21
 8000c2e:	0755      	lsls	r5, r2, #29
 8000c30:	0252      	lsls	r2, r2, #9
 8000c32:	430d      	orrs	r5, r1
 8000c34:	0b12      	lsrs	r2, r2, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	e70d      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000c3a:	4651      	mov	r1, sl
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x29a>
 8000c40:	e07c      	b.n	8000d3c <__aeabi_ddiv+0x394>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_ddiv+0x2a0>
 8000c46:	e0fb      	b.n	8000e40 <__aeabi_ddiv+0x498>
 8000c48:	0020      	movs	r0, r4
 8000c4a:	f001 f8dd 	bl	8001e08 <__clzsi2>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	3a0b      	subs	r2, #11
 8000c52:	231d      	movs	r3, #29
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4652      	mov	r2, sl
 8000c58:	0001      	movs	r1, r0
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	3908      	subs	r1, #8
 8000c60:	408b      	lsls	r3, r1
 8000c62:	408c      	lsls	r4, r1
 8000c64:	0019      	movs	r1, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <__aeabi_ddiv+0x388>)
 8000c6a:	4458      	add	r0, fp
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	4483      	add	fp, r0
 8000c70:	2000      	movs	r0, #0
 8000c72:	e6d9      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000c74:	0003      	movs	r3, r0
 8000c76:	4323      	orrs	r3, r4
 8000c78:	4698      	mov	r8, r3
 8000c7a:	d044      	beq.n	8000d06 <__aeabi_ddiv+0x35e>
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0x2da>
 8000c80:	e0cf      	b.n	8000e22 <__aeabi_ddiv+0x47a>
 8000c82:	0020      	movs	r0, r4
 8000c84:	f001 f8c0 	bl	8001e08 <__clzsi2>
 8000c88:	0001      	movs	r1, r0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	390b      	subs	r1, #11
 8000c8e:	231d      	movs	r3, #29
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4649      	mov	r1, r9
 8000c94:	0010      	movs	r0, r2
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	3808      	subs	r0, #8
 8000c9a:	4084      	lsls	r4, r0
 8000c9c:	000b      	movs	r3, r1
 8000c9e:	464d      	mov	r5, r9
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	4085      	lsls	r5, r0
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <__aeabi_ddiv+0x38c>)
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	469b      	mov	fp, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	e69e      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4322      	orrs	r2, r4
 8000cb8:	4690      	mov	r8, r2
 8000cba:	d11d      	bne.n	8000cf8 <__aeabi_ddiv+0x350>
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	e693      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cca:	4651      	mov	r1, sl
 8000ccc:	4321      	orrs	r1, r4
 8000cce:	d109      	bne.n	8000ce4 <__aeabi_ddiv+0x33c>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cd8:	4691      	mov	r9, r2
 8000cda:	469c      	mov	ip, r3
 8000cdc:	2400      	movs	r4, #0
 8000cde:	2002      	movs	r0, #2
 8000ce0:	44e3      	add	fp, ip
 8000ce2:	e6a1      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cec:	4691      	mov	r9, r2
 8000cee:	469c      	mov	ip, r3
 8000cf0:	4651      	mov	r1, sl
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	e697      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	469b      	mov	fp, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	46a0      	mov	r8, r4
 8000d00:	4691      	mov	r9, r2
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e675      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d06:	2304      	movs	r3, #4
 8000d08:	4699      	mov	r9, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	469b      	mov	fp, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2500      	movs	r5, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	e66d      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	000007ff 	.word	0x000007ff
 8000d1c:	fffffc01 	.word	0xfffffc01
 8000d20:	080064dc 	.word	0x080064dc
 8000d24:	000003ff 	.word	0x000003ff
 8000d28:	feffffff 	.word	0xfeffffff
 8000d2c:	000007fe 	.word	0x000007fe
 8000d30:	000003f3 	.word	0x000003f3
 8000d34:	fffffc0d 	.word	0xfffffc0d
 8000d38:	fffff801 	.word	0xfffff801
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	2301      	movs	r3, #1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	4691      	mov	r9, r2
 8000d44:	2400      	movs	r4, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	e66e      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	469a      	mov	sl, r3
 8000d50:	2500      	movs	r5, #0
 8000d52:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000d54:	0312      	lsls	r2, r2, #12
 8000d56:	e67e      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000d58:	2501      	movs	r5, #1
 8000d5a:	426d      	negs	r5, r5
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	1ad2      	subs	r2, r2, r3
 8000d60:	2a38      	cmp	r2, #56	; 0x38
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_ddiv+0x3be>
 8000d64:	e674      	b.n	8000a50 <__aeabi_ddiv+0xa8>
 8000d66:	2a1f      	cmp	r2, #31
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_ddiv+0x3c4>
 8000d6a:	e0bd      	b.n	8000ee8 <__aeabi_ddiv+0x540>
 8000d6c:	211f      	movs	r1, #31
 8000d6e:	4249      	negs	r1, r1
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	4641      	mov	r1, r8
 8000d74:	40d9      	lsrs	r1, r3
 8000d76:	000b      	movs	r3, r1
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_ddiv+0x3de>
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4a7e      	ldr	r2, [pc, #504]	; (8000f78 <__aeabi_ddiv+0x5d0>)
 8000d80:	445a      	add	r2, fp
 8000d82:	4091      	lsls	r1, r2
 8000d84:	430d      	orrs	r5, r1
 8000d86:	0029      	movs	r1, r5
 8000d88:	1e4a      	subs	r2, r1, #1
 8000d8a:	4191      	sbcs	r1, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	2307      	movs	r3, #7
 8000d90:	001d      	movs	r5, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	400d      	ands	r5, r1
 8000d96:	420b      	tst	r3, r1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x3f4>
 8000d9a:	e0d0      	b.n	8000f3e <__aeabi_ddiv+0x596>
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	2300      	movs	r3, #0
 8000da0:	400a      	ands	r2, r1
 8000da2:	2a04      	cmp	r2, #4
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0x400>
 8000da6:	e0c7      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000da8:	1d0a      	adds	r2, r1, #4
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4249      	negs	r1, r1
 8000db0:	185b      	adds	r3, r3, r1
 8000db2:	0011      	movs	r1, r2
 8000db4:	021a      	lsls	r2, r3, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_ddiv+0x412>
 8000db8:	e0be      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e649      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	0312      	lsls	r2, r2, #12
 8000dc8:	4213      	tst	r3, r2
 8000dca:	d008      	beq.n	8000dde <__aeabi_ddiv+0x436>
 8000dcc:	4214      	tst	r4, r2
 8000dce:	d106      	bne.n	8000dde <__aeabi_ddiv+0x436>
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	0312      	lsls	r2, r2, #12
 8000dd4:	46ba      	mov	sl, r7
 8000dd6:	000d      	movs	r5, r1
 8000dd8:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dda:	0b12      	lsrs	r2, r2, #12
 8000ddc:	e63b      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	4643      	mov	r3, r8
 8000de2:	0312      	lsls	r2, r2, #12
 8000de4:	431a      	orrs	r2, r3
 8000de6:	0312      	lsls	r2, r2, #12
 8000de8:	46b2      	mov	sl, r6
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dec:	0b12      	lsrs	r2, r2, #12
 8000dee:	e632      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x44e>
 8000df4:	e702      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000df6:	19a6      	adds	r6, r4, r6
 8000df8:	1e6a      	subs	r2, r5, #1
 8000dfa:	42a6      	cmp	r6, r4
 8000dfc:	d200      	bcs.n	8000e00 <__aeabi_ddiv+0x458>
 8000dfe:	e089      	b.n	8000f14 <__aeabi_ddiv+0x56c>
 8000e00:	4286      	cmp	r6, r0
 8000e02:	d200      	bcs.n	8000e06 <__aeabi_ddiv+0x45e>
 8000e04:	e09f      	b.n	8000f46 <__aeabi_ddiv+0x59e>
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x462>
 8000e08:	e0af      	b.n	8000f6a <__aeabi_ddiv+0x5c2>
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	e6f4      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000e0e:	42a9      	cmp	r1, r5
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x46c>
 8000e12:	e63c      	b.n	8000a8e <__aeabi_ddiv+0xe6>
 8000e14:	4643      	mov	r3, r8
 8000e16:	07de      	lsls	r6, r3, #31
 8000e18:	0858      	lsrs	r0, r3, #1
 8000e1a:	086b      	lsrs	r3, r5, #1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	07ed      	lsls	r5, r5, #31
 8000e20:	e63c      	b.n	8000a9c <__aeabi_ddiv+0xf4>
 8000e22:	f000 fff1 	bl	8001e08 <__clzsi2>
 8000e26:	0001      	movs	r1, r0
 8000e28:	0002      	movs	r2, r0
 8000e2a:	3115      	adds	r1, #21
 8000e2c:	3220      	adds	r2, #32
 8000e2e:	291c      	cmp	r1, #28
 8000e30:	dc00      	bgt.n	8000e34 <__aeabi_ddiv+0x48c>
 8000e32:	e72c      	b.n	8000c8e <__aeabi_ddiv+0x2e6>
 8000e34:	464b      	mov	r3, r9
 8000e36:	3808      	subs	r0, #8
 8000e38:	4083      	lsls	r3, r0
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	e732      	b.n	8000ca6 <__aeabi_ddiv+0x2fe>
 8000e40:	f000 ffe2 	bl	8001e08 <__clzsi2>
 8000e44:	0003      	movs	r3, r0
 8000e46:	001a      	movs	r2, r3
 8000e48:	3215      	adds	r2, #21
 8000e4a:	3020      	adds	r0, #32
 8000e4c:	2a1c      	cmp	r2, #28
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x4aa>
 8000e50:	e6ff      	b.n	8000c52 <__aeabi_ddiv+0x2aa>
 8000e52:	4654      	mov	r4, sl
 8000e54:	3b08      	subs	r3, #8
 8000e56:	2100      	movs	r1, #0
 8000e58:	409c      	lsls	r4, r3
 8000e5a:	e705      	b.n	8000c68 <__aeabi_ddiv+0x2c0>
 8000e5c:	1936      	adds	r6, r6, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	42b4      	cmp	r4, r6
 8000e62:	d900      	bls.n	8000e66 <__aeabi_ddiv+0x4be>
 8000e64:	e6a6      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e66:	42b2      	cmp	r2, r6
 8000e68:	d800      	bhi.n	8000e6c <__aeabi_ddiv+0x4c4>
 8000e6a:	e6a3      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e6c:	1e83      	subs	r3, r0, #2
 8000e6e:	1936      	adds	r6, r6, r4
 8000e70:	e6a0      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e72:	1909      	adds	r1, r1, r4
 8000e74:	3d01      	subs	r5, #1
 8000e76:	428c      	cmp	r4, r1
 8000e78:	d900      	bls.n	8000e7c <__aeabi_ddiv+0x4d4>
 8000e7a:	e68d      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x4da>
 8000e80:	e68a      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e82:	1e85      	subs	r5, r0, #2
 8000e84:	1909      	adds	r1, r1, r4
 8000e86:	e687      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e88:	220f      	movs	r2, #15
 8000e8a:	402a      	ands	r2, r5
 8000e8c:	2a04      	cmp	r2, #4
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0x4ea>
 8000e90:	e6bc      	b.n	8000c0c <__aeabi_ddiv+0x264>
 8000e92:	1d29      	adds	r1, r5, #4
 8000e94:	42a9      	cmp	r1, r5
 8000e96:	41ad      	sbcs	r5, r5
 8000e98:	426d      	negs	r5, r5
 8000e9a:	08c9      	lsrs	r1, r1, #3
 8000e9c:	44a8      	add	r8, r5
 8000e9e:	e6b6      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000ea0:	42af      	cmp	r7, r5
 8000ea2:	d900      	bls.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000ea4:	e662      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000ea6:	4281      	cmp	r1, r0
 8000ea8:	d804      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eaa:	d000      	beq.n	8000eae <__aeabi_ddiv+0x506>
 8000eac:	e65e      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eae:	42ae      	cmp	r6, r5
 8000eb0:	d800      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eb2:	e65b      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	469c      	mov	ip, r3
 8000eba:	9b00      	ldr	r3, [sp, #0]
 8000ebc:	44e0      	add	r8, ip
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	4465      	add	r5, ip
 8000ec2:	429d      	cmp	r5, r3
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	191b      	adds	r3, r3, r4
 8000eca:	18c0      	adds	r0, r0, r3
 8000ecc:	e64f      	b.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000ece:	42b2      	cmp	r2, r6
 8000ed0:	d800      	bhi.n	8000ed4 <__aeabi_ddiv+0x52c>
 8000ed2:	e612      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000ed4:	1e83      	subs	r3, r0, #2
 8000ed6:	1936      	adds	r6, r6, r4
 8000ed8:	e60f      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d800      	bhi.n	8000ee0 <__aeabi_ddiv+0x538>
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee0:	1e83      	subs	r3, r0, #2
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	1909      	adds	r1, r1, r4
 8000ee6:	e5f6      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <__aeabi_ddiv+0x5d4>)
 8000eea:	0028      	movs	r0, r5
 8000eec:	445b      	add	r3, fp
 8000eee:	4641      	mov	r1, r8
 8000ef0:	409d      	lsls	r5, r3
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	40d0      	lsrs	r0, r2
 8000ef6:	1e6b      	subs	r3, r5, #1
 8000ef8:	419d      	sbcs	r5, r3
 8000efa:	4643      	mov	r3, r8
 8000efc:	4301      	orrs	r1, r0
 8000efe:	4329      	orrs	r1, r5
 8000f00:	40d3      	lsrs	r3, r2
 8000f02:	074a      	lsls	r2, r1, #29
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x560>
 8000f06:	e755      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f08:	220f      	movs	r2, #15
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	2a04      	cmp	r2, #4
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_ddiv+0x56a>
 8000f10:	e74a      	b.n	8000da8 <__aeabi_ddiv+0x400>
 8000f12:	e74f      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f14:	0015      	movs	r5, r2
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_ddiv+0x574>
 8000f1a:	e66d      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f1c:	9a00      	ldr	r2, [sp, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0x57c>
 8000f22:	e669      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f24:	e66a      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <__aeabi_ddiv+0x5d8>)
 8000f28:	445b      	add	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_ddiv+0x588>
 8000f2e:	e713      	b.n	8000d58 <__aeabi_ddiv+0x3b0>
 8000f30:	2501      	movs	r5, #1
 8000f32:	2100      	movs	r1, #0
 8000f34:	44a8      	add	r8, r5
 8000f36:	e66a      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000f38:	075d      	lsls	r5, r3, #29
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	0b1a      	lsrs	r2, r3, #12
 8000f3e:	08c9      	lsrs	r1, r1, #3
 8000f40:	2300      	movs	r3, #0
 8000f42:	430d      	orrs	r5, r1
 8000f44:	e587      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	3d02      	subs	r5, #2
 8000f4a:	004a      	lsls	r2, r1, #1
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	41bf      	sbcs	r7, r7
 8000f50:	427f      	negs	r7, r7
 8000f52:	193f      	adds	r7, r7, r4
 8000f54:	19f6      	adds	r6, r6, r7
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	e7dd      	b.n	8000f16 <__aeabi_ddiv+0x56e>
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0312      	lsls	r2, r2, #12
 8000f60:	431a      	orrs	r2, r3
 8000f62:	0312      	lsls	r2, r2, #12
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000f66:	0b12      	lsrs	r2, r2, #12
 8000f68:	e575      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f6a:	9900      	ldr	r1, [sp, #0]
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d3ea      	bcc.n	8000f46 <__aeabi_ddiv+0x59e>
 8000f70:	0015      	movs	r5, r2
 8000f72:	e7d3      	b.n	8000f1c <__aeabi_ddiv+0x574>
 8000f74:	000007ff 	.word	0x000007ff
 8000f78:	0000043e 	.word	0x0000043e
 8000f7c:	0000041e 	.word	0x0000041e
 8000f80:	000003ff 	.word	0x000003ff

08000f84 <__aeabi_dmul>:
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	4645      	mov	r5, r8
 8000f88:	46de      	mov	lr, fp
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	b5e0      	push	{r5, r6, r7, lr}
 8000f90:	001f      	movs	r7, r3
 8000f92:	030b      	lsls	r3, r1, #12
 8000f94:	0b1b      	lsrs	r3, r3, #12
 8000f96:	469b      	mov	fp, r3
 8000f98:	004d      	lsls	r5, r1, #1
 8000f9a:	0fcb      	lsrs	r3, r1, #31
 8000f9c:	0004      	movs	r4, r0
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	0d6d      	lsrs	r5, r5, #21
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dmul+0x26>
 8000fa8:	e1cd      	b.n	8001346 <__aeabi_dmul+0x3c2>
 8000faa:	4bce      	ldr	r3, [pc, #824]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fac:	429d      	cmp	r5, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dmul+0x2e>
 8000fb0:	e1e9      	b.n	8001386 <__aeabi_dmul+0x402>
 8000fb2:	465a      	mov	r2, fp
 8000fb4:	0f43      	lsrs	r3, r0, #29
 8000fb6:	00d2      	lsls	r2, r2, #3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	00c3      	lsls	r3, r0, #3
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	4bc8      	ldr	r3, [pc, #800]	; (80012e8 <__aeabi_dmul+0x364>)
 8000fc6:	4693      	mov	fp, r2
 8000fc8:	469c      	mov	ip, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2600      	movs	r6, #0
 8000fce:	4465      	add	r5, ip
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	033c      	lsls	r4, r7, #12
 8000fd4:	007b      	lsls	r3, r7, #1
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	0d5b      	lsrs	r3, r3, #21
 8000fdc:	0fff      	lsrs	r7, r7, #31
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dmul+0x60>
 8000fe2:	e189      	b.n	80012f8 <__aeabi_dmul+0x374>
 8000fe4:	4abf      	ldr	r2, [pc, #764]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <__aeabi_dmul+0x9a>
 8000fea:	0f42      	lsrs	r2, r0, #29
 8000fec:	00e4      	lsls	r4, r4, #3
 8000fee:	4322      	orrs	r2, r4
 8000ff0:	2480      	movs	r4, #128	; 0x80
 8000ff2:	0424      	lsls	r4, r4, #16
 8000ff4:	4314      	orrs	r4, r2
 8000ff6:	4abc      	ldr	r2, [pc, #752]	; (80012e8 <__aeabi_dmul+0x364>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4463      	add	r3, ip
 8001000:	195b      	adds	r3, r3, r5
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	407a      	eors	r2, r7
 8001008:	3301      	adds	r3, #1
 800100a:	00c0      	lsls	r0, r0, #3
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2e0a      	cmp	r6, #10
 8001012:	dd1c      	ble.n	800104e <__aeabi_dmul+0xca>
 8001014:	003a      	movs	r2, r7
 8001016:	2e0b      	cmp	r6, #11
 8001018:	d05e      	beq.n	80010d8 <__aeabi_dmul+0x154>
 800101a:	4647      	mov	r7, r8
 800101c:	e056      	b.n	80010cc <__aeabi_dmul+0x148>
 800101e:	4649      	mov	r1, r9
 8001020:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <__aeabi_dmul+0x360>)
 8001022:	4321      	orrs	r1, r4
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2900      	cmp	r1, #0
 800102a:	d12a      	bne.n	8001082 <__aeabi_dmul+0xfe>
 800102c:	2080      	movs	r0, #128	; 0x80
 800102e:	2202      	movs	r2, #2
 8001030:	0100      	lsls	r0, r0, #4
 8001032:	002b      	movs	r3, r5
 8001034:	4684      	mov	ip, r0
 8001036:	4316      	orrs	r6, r2
 8001038:	4642      	mov	r2, r8
 800103a:	4463      	add	r3, ip
 800103c:	407a      	eors	r2, r7
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2e0a      	cmp	r6, #10
 8001044:	dd00      	ble.n	8001048 <__aeabi_dmul+0xc4>
 8001046:	e231      	b.n	80014ac <__aeabi_dmul+0x528>
 8001048:	2000      	movs	r0, #0
 800104a:	2400      	movs	r4, #0
 800104c:	2102      	movs	r1, #2
 800104e:	2e02      	cmp	r6, #2
 8001050:	dc26      	bgt.n	80010a0 <__aeabi_dmul+0x11c>
 8001052:	3e01      	subs	r6, #1
 8001054:	2e01      	cmp	r6, #1
 8001056:	d852      	bhi.n	80010fe <__aeabi_dmul+0x17a>
 8001058:	2902      	cmp	r1, #2
 800105a:	d04c      	beq.n	80010f6 <__aeabi_dmul+0x172>
 800105c:	2901      	cmp	r1, #1
 800105e:	d000      	beq.n	8001062 <__aeabi_dmul+0xde>
 8001060:	e118      	b.n	8001294 <__aeabi_dmul+0x310>
 8001062:	2300      	movs	r3, #0
 8001064:	2400      	movs	r4, #0
 8001066:	2500      	movs	r5, #0
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	4323      	orrs	r3, r4
 800106c:	07d2      	lsls	r2, r2, #31
 800106e:	4313      	orrs	r3, r2
 8001070:	0028      	movs	r0, r5
 8001072:	0019      	movs	r1, r3
 8001074:	b007      	add	sp, #28
 8001076:	bcf0      	pop	{r4, r5, r6, r7}
 8001078:	46bb      	mov	fp, r7
 800107a:	46b2      	mov	sl, r6
 800107c:	46a9      	mov	r9, r5
 800107e:	46a0      	mov	r8, r4
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	2203      	movs	r2, #3
 8001086:	0109      	lsls	r1, r1, #4
 8001088:	002b      	movs	r3, r5
 800108a:	468c      	mov	ip, r1
 800108c:	4316      	orrs	r6, r2
 800108e:	4642      	mov	r2, r8
 8001090:	4463      	add	r3, ip
 8001092:	407a      	eors	r2, r7
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2e0a      	cmp	r6, #10
 800109a:	dd00      	ble.n	800109e <__aeabi_dmul+0x11a>
 800109c:	e228      	b.n	80014f0 <__aeabi_dmul+0x56c>
 800109e:	2103      	movs	r1, #3
 80010a0:	2501      	movs	r5, #1
 80010a2:	40b5      	lsls	r5, r6
 80010a4:	46ac      	mov	ip, r5
 80010a6:	26a6      	movs	r6, #166	; 0xa6
 80010a8:	4663      	mov	r3, ip
 80010aa:	00f6      	lsls	r6, r6, #3
 80010ac:	4035      	ands	r5, r6
 80010ae:	4233      	tst	r3, r6
 80010b0:	d10b      	bne.n	80010ca <__aeabi_dmul+0x146>
 80010b2:	2690      	movs	r6, #144	; 0x90
 80010b4:	00b6      	lsls	r6, r6, #2
 80010b6:	4233      	tst	r3, r6
 80010b8:	d118      	bne.n	80010ec <__aeabi_dmul+0x168>
 80010ba:	3eb9      	subs	r6, #185	; 0xb9
 80010bc:	3eff      	subs	r6, #255	; 0xff
 80010be:	421e      	tst	r6, r3
 80010c0:	d01d      	beq.n	80010fe <__aeabi_dmul+0x17a>
 80010c2:	46a3      	mov	fp, r4
 80010c4:	4682      	mov	sl, r0
 80010c6:	9100      	str	r1, [sp, #0]
 80010c8:	e000      	b.n	80010cc <__aeabi_dmul+0x148>
 80010ca:	0017      	movs	r7, r2
 80010cc:	9900      	ldr	r1, [sp, #0]
 80010ce:	003a      	movs	r2, r7
 80010d0:	2902      	cmp	r1, #2
 80010d2:	d010      	beq.n	80010f6 <__aeabi_dmul+0x172>
 80010d4:	465c      	mov	r4, fp
 80010d6:	4650      	mov	r0, sl
 80010d8:	2903      	cmp	r1, #3
 80010da:	d1bf      	bne.n	800105c <__aeabi_dmul+0xd8>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	031b      	lsls	r3, r3, #12
 80010e0:	431c      	orrs	r4, r3
 80010e2:	0324      	lsls	r4, r4, #12
 80010e4:	0005      	movs	r5, r0
 80010e6:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <__aeabi_dmul+0x360>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e7bd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010ec:	2480      	movs	r4, #128	; 0x80
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <__aeabi_dmul+0x360>)
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e7b8      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010f6:	2400      	movs	r4, #0
 80010f8:	2500      	movs	r5, #0
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <__aeabi_dmul+0x360>)
 80010fc:	e7b4      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010fe:	4653      	mov	r3, sl
 8001100:	041e      	lsls	r6, r3, #16
 8001102:	0c36      	lsrs	r6, r6, #16
 8001104:	0c1f      	lsrs	r7, r3, #16
 8001106:	0033      	movs	r3, r6
 8001108:	0c01      	lsrs	r1, r0, #16
 800110a:	0400      	lsls	r0, r0, #16
 800110c:	0c00      	lsrs	r0, r0, #16
 800110e:	4343      	muls	r3, r0
 8001110:	4698      	mov	r8, r3
 8001112:	0003      	movs	r3, r0
 8001114:	437b      	muls	r3, r7
 8001116:	4699      	mov	r9, r3
 8001118:	0033      	movs	r3, r6
 800111a:	434b      	muls	r3, r1
 800111c:	469c      	mov	ip, r3
 800111e:	4643      	mov	r3, r8
 8001120:	000d      	movs	r5, r1
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	469a      	mov	sl, r3
 8001126:	437d      	muls	r5, r7
 8001128:	44cc      	add	ip, r9
 800112a:	44d4      	add	ip, sl
 800112c:	9500      	str	r5, [sp, #0]
 800112e:	45e1      	cmp	r9, ip
 8001130:	d904      	bls.n	800113c <__aeabi_dmul+0x1b8>
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	4699      	mov	r9, r3
 8001138:	444d      	add	r5, r9
 800113a:	9500      	str	r5, [sp, #0]
 800113c:	4663      	mov	r3, ip
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	001d      	movs	r5, r3
 8001142:	4663      	mov	r3, ip
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	469c      	mov	ip, r3
 8001148:	4643      	mov	r3, r8
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	4698      	mov	r8, r3
 8001150:	4663      	mov	r3, ip
 8001152:	4443      	add	r3, r8
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	4698      	mov	r8, r3
 800115a:	0033      	movs	r3, r6
 800115c:	0424      	lsls	r4, r4, #16
 800115e:	0c24      	lsrs	r4, r4, #16
 8001160:	4363      	muls	r3, r4
 8001162:	469c      	mov	ip, r3
 8001164:	0023      	movs	r3, r4
 8001166:	437b      	muls	r3, r7
 8001168:	4699      	mov	r9, r3
 800116a:	4643      	mov	r3, r8
 800116c:	435e      	muls	r6, r3
 800116e:	435f      	muls	r7, r3
 8001170:	444e      	add	r6, r9
 8001172:	4663      	mov	r3, ip
 8001174:	46b2      	mov	sl, r6
 8001176:	0c1e      	lsrs	r6, r3, #16
 8001178:	4456      	add	r6, sl
 800117a:	45b1      	cmp	r9, r6
 800117c:	d903      	bls.n	8001186 <__aeabi_dmul+0x202>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	4699      	mov	r9, r3
 8001184:	444f      	add	r7, r9
 8001186:	0c33      	lsrs	r3, r6, #16
 8001188:	4699      	mov	r9, r3
 800118a:	003b      	movs	r3, r7
 800118c:	444b      	add	r3, r9
 800118e:	9305      	str	r3, [sp, #20]
 8001190:	4663      	mov	r3, ip
 8001192:	46ac      	mov	ip, r5
 8001194:	041f      	lsls	r7, r3, #16
 8001196:	0c3f      	lsrs	r7, r7, #16
 8001198:	0436      	lsls	r6, r6, #16
 800119a:	19f6      	adds	r6, r6, r7
 800119c:	44b4      	add	ip, r6
 800119e:	4663      	mov	r3, ip
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	465b      	mov	r3, fp
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	469c      	mov	ip, r3
 80011a8:	465b      	mov	r3, fp
 80011aa:	041f      	lsls	r7, r3, #16
 80011ac:	0c3f      	lsrs	r7, r7, #16
 80011ae:	003b      	movs	r3, r7
 80011b0:	4343      	muls	r3, r0
 80011b2:	4699      	mov	r9, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	4343      	muls	r3, r0
 80011b8:	469a      	mov	sl, r3
 80011ba:	464b      	mov	r3, r9
 80011bc:	4660      	mov	r0, ip
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	469b      	mov	fp, r3
 80011c2:	4348      	muls	r0, r1
 80011c4:	4379      	muls	r1, r7
 80011c6:	4451      	add	r1, sl
 80011c8:	4459      	add	r1, fp
 80011ca:	458a      	cmp	sl, r1
 80011cc:	d903      	bls.n	80011d6 <__aeabi_dmul+0x252>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	469a      	mov	sl, r3
 80011d4:	4450      	add	r0, sl
 80011d6:	0c0b      	lsrs	r3, r1, #16
 80011d8:	469a      	mov	sl, r3
 80011da:	464b      	mov	r3, r9
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	4699      	mov	r9, r3
 80011e2:	003b      	movs	r3, r7
 80011e4:	4363      	muls	r3, r4
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	4645      	mov	r5, r8
 80011ea:	4449      	add	r1, r9
 80011ec:	4699      	mov	r9, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	435c      	muls	r4, r3
 80011f2:	436b      	muls	r3, r5
 80011f4:	469c      	mov	ip, r3
 80011f6:	464b      	mov	r3, r9
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	4698      	mov	r8, r3
 80011fc:	436f      	muls	r7, r5
 80011fe:	193f      	adds	r7, r7, r4
 8001200:	4447      	add	r7, r8
 8001202:	4450      	add	r0, sl
 8001204:	42bc      	cmp	r4, r7
 8001206:	d903      	bls.n	8001210 <__aeabi_dmul+0x28c>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	4698      	mov	r8, r3
 800120e:	44c4      	add	ip, r8
 8001210:	9b04      	ldr	r3, [sp, #16]
 8001212:	9d00      	ldr	r5, [sp, #0]
 8001214:	4698      	mov	r8, r3
 8001216:	4445      	add	r5, r8
 8001218:	42b5      	cmp	r5, r6
 800121a:	41b6      	sbcs	r6, r6
 800121c:	4273      	negs	r3, r6
 800121e:	4698      	mov	r8, r3
 8001220:	464b      	mov	r3, r9
 8001222:	041e      	lsls	r6, r3, #16
 8001224:	9b05      	ldr	r3, [sp, #20]
 8001226:	043c      	lsls	r4, r7, #16
 8001228:	4699      	mov	r9, r3
 800122a:	0c36      	lsrs	r6, r6, #16
 800122c:	19a4      	adds	r4, r4, r6
 800122e:	444c      	add	r4, r9
 8001230:	46a1      	mov	r9, r4
 8001232:	4683      	mov	fp, r0
 8001234:	186e      	adds	r6, r5, r1
 8001236:	44c1      	add	r9, r8
 8001238:	428e      	cmp	r6, r1
 800123a:	4189      	sbcs	r1, r1
 800123c:	44cb      	add	fp, r9
 800123e:	465d      	mov	r5, fp
 8001240:	4249      	negs	r1, r1
 8001242:	186d      	adds	r5, r5, r1
 8001244:	429c      	cmp	r4, r3
 8001246:	41a4      	sbcs	r4, r4
 8001248:	45c1      	cmp	r9, r8
 800124a:	419b      	sbcs	r3, r3
 800124c:	4583      	cmp	fp, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	428d      	cmp	r5, r1
 8001252:	4189      	sbcs	r1, r1
 8001254:	425b      	negs	r3, r3
 8001256:	4264      	negs	r4, r4
 8001258:	431c      	orrs	r4, r3
 800125a:	4240      	negs	r0, r0
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	4249      	negs	r1, r1
 8001260:	4301      	orrs	r1, r0
 8001262:	0270      	lsls	r0, r6, #9
 8001264:	0c3f      	lsrs	r7, r7, #16
 8001266:	4318      	orrs	r0, r3
 8001268:	19e4      	adds	r4, r4, r7
 800126a:	1e47      	subs	r7, r0, #1
 800126c:	41b8      	sbcs	r0, r7
 800126e:	1864      	adds	r4, r4, r1
 8001270:	4464      	add	r4, ip
 8001272:	0df6      	lsrs	r6, r6, #23
 8001274:	0261      	lsls	r1, r4, #9
 8001276:	4330      	orrs	r0, r6
 8001278:	0dec      	lsrs	r4, r5, #23
 800127a:	026e      	lsls	r6, r5, #9
 800127c:	430c      	orrs	r4, r1
 800127e:	4330      	orrs	r0, r6
 8001280:	01c9      	lsls	r1, r1, #7
 8001282:	d400      	bmi.n	8001286 <__aeabi_dmul+0x302>
 8001284:	e0f1      	b.n	800146a <__aeabi_dmul+0x4e6>
 8001286:	2101      	movs	r1, #1
 8001288:	0843      	lsrs	r3, r0, #1
 800128a:	4001      	ands	r1, r0
 800128c:	430b      	orrs	r3, r1
 800128e:	07e0      	lsls	r0, r4, #31
 8001290:	4318      	orrs	r0, r3
 8001292:	0864      	lsrs	r4, r4, #1
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <__aeabi_dmul+0x368>)
 8001296:	9b02      	ldr	r3, [sp, #8]
 8001298:	468c      	mov	ip, r1
 800129a:	4463      	add	r3, ip
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_dmul+0x31e>
 80012a0:	e097      	b.n	80013d2 <__aeabi_dmul+0x44e>
 80012a2:	0741      	lsls	r1, r0, #29
 80012a4:	d009      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012a6:	210f      	movs	r1, #15
 80012a8:	4001      	ands	r1, r0
 80012aa:	2904      	cmp	r1, #4
 80012ac:	d005      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012ae:	1d01      	adds	r1, r0, #4
 80012b0:	4281      	cmp	r1, r0
 80012b2:	4180      	sbcs	r0, r0
 80012b4:	4240      	negs	r0, r0
 80012b6:	1824      	adds	r4, r4, r0
 80012b8:	0008      	movs	r0, r1
 80012ba:	01e1      	lsls	r1, r4, #7
 80012bc:	d506      	bpl.n	80012cc <__aeabi_dmul+0x348>
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	00c9      	lsls	r1, r1, #3
 80012c2:	468c      	mov	ip, r1
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <__aeabi_dmul+0x36c>)
 80012c6:	401c      	ands	r4, r3
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	4463      	add	r3, ip
 80012cc:	4909      	ldr	r1, [pc, #36]	; (80012f4 <__aeabi_dmul+0x370>)
 80012ce:	428b      	cmp	r3, r1
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_dmul+0x350>
 80012d2:	e710      	b.n	80010f6 <__aeabi_dmul+0x172>
 80012d4:	0761      	lsls	r1, r4, #29
 80012d6:	08c5      	lsrs	r5, r0, #3
 80012d8:	0264      	lsls	r4, r4, #9
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	430d      	orrs	r5, r1
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	e6c1      	b.n	8001068 <__aeabi_dmul+0xe4>
 80012e4:	000007ff 	.word	0x000007ff
 80012e8:	fffffc01 	.word	0xfffffc01
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	464b      	mov	r3, r9
 80012fa:	4323      	orrs	r3, r4
 80012fc:	d059      	beq.n	80013b2 <__aeabi_dmul+0x42e>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dmul+0x380>
 8001302:	e0a3      	b.n	800144c <__aeabi_dmul+0x4c8>
 8001304:	0020      	movs	r0, r4
 8001306:	f000 fd7f 	bl	8001e08 <__clzsi2>
 800130a:	0001      	movs	r1, r0
 800130c:	0003      	movs	r3, r0
 800130e:	390b      	subs	r1, #11
 8001310:	221d      	movs	r2, #29
 8001312:	1a52      	subs	r2, r2, r1
 8001314:	4649      	mov	r1, r9
 8001316:	0018      	movs	r0, r3
 8001318:	40d1      	lsrs	r1, r2
 800131a:	464a      	mov	r2, r9
 800131c:	3808      	subs	r0, #8
 800131e:	4082      	lsls	r2, r0
 8001320:	4084      	lsls	r4, r0
 8001322:	0010      	movs	r0, r2
 8001324:	430c      	orrs	r4, r1
 8001326:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <__aeabi_dmul+0x574>)
 8001328:	1aeb      	subs	r3, r5, r3
 800132a:	4694      	mov	ip, r2
 800132c:	4642      	mov	r2, r8
 800132e:	4463      	add	r3, ip
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	407a      	eors	r2, r7
 8001336:	3301      	adds	r3, #1
 8001338:	2100      	movs	r1, #0
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2e0a      	cmp	r6, #10
 8001340:	dd00      	ble.n	8001344 <__aeabi_dmul+0x3c0>
 8001342:	e667      	b.n	8001014 <__aeabi_dmul+0x90>
 8001344:	e683      	b.n	800104e <__aeabi_dmul+0xca>
 8001346:	465b      	mov	r3, fp
 8001348:	4303      	orrs	r3, r0
 800134a:	469a      	mov	sl, r3
 800134c:	d02a      	beq.n	80013a4 <__aeabi_dmul+0x420>
 800134e:	465b      	mov	r3, fp
 8001350:	2b00      	cmp	r3, #0
 8001352:	d06d      	beq.n	8001430 <__aeabi_dmul+0x4ac>
 8001354:	4658      	mov	r0, fp
 8001356:	f000 fd57 	bl	8001e08 <__clzsi2>
 800135a:	0001      	movs	r1, r0
 800135c:	0003      	movs	r3, r0
 800135e:	390b      	subs	r1, #11
 8001360:	221d      	movs	r2, #29
 8001362:	1a52      	subs	r2, r2, r1
 8001364:	0021      	movs	r1, r4
 8001366:	0018      	movs	r0, r3
 8001368:	465d      	mov	r5, fp
 800136a:	40d1      	lsrs	r1, r2
 800136c:	3808      	subs	r0, #8
 800136e:	4085      	lsls	r5, r0
 8001370:	000a      	movs	r2, r1
 8001372:	4084      	lsls	r4, r0
 8001374:	432a      	orrs	r2, r5
 8001376:	4693      	mov	fp, r2
 8001378:	46a2      	mov	sl, r4
 800137a:	4d5f      	ldr	r5, [pc, #380]	; (80014f8 <__aeabi_dmul+0x574>)
 800137c:	2600      	movs	r6, #0
 800137e:	1aed      	subs	r5, r5, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	e625      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 8001386:	465b      	mov	r3, fp
 8001388:	4303      	orrs	r3, r0
 800138a:	469a      	mov	sl, r3
 800138c:	d105      	bne.n	800139a <__aeabi_dmul+0x416>
 800138e:	2300      	movs	r3, #0
 8001390:	469b      	mov	fp, r3
 8001392:	3302      	adds	r3, #2
 8001394:	2608      	movs	r6, #8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	e61b      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 800139a:	2303      	movs	r3, #3
 800139c:	4682      	mov	sl, r0
 800139e:	260c      	movs	r6, #12
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	e616      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013a4:	2300      	movs	r3, #0
 80013a6:	469b      	mov	fp, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	2604      	movs	r6, #4
 80013ac:	2500      	movs	r5, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	e60f      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013b2:	4642      	mov	r2, r8
 80013b4:	3301      	adds	r3, #1
 80013b6:	9501      	str	r5, [sp, #4]
 80013b8:	431e      	orrs	r6, r3
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	407a      	eors	r2, r7
 80013be:	3301      	adds	r3, #1
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2e0a      	cmp	r6, #10
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dmul+0x44c>
 80013ce:	e621      	b.n	8001014 <__aeabi_dmul+0x90>
 80013d0:	e63d      	b.n	800104e <__aeabi_dmul+0xca>
 80013d2:	2101      	movs	r1, #1
 80013d4:	1ac9      	subs	r1, r1, r3
 80013d6:	2938      	cmp	r1, #56	; 0x38
 80013d8:	dd00      	ble.n	80013dc <__aeabi_dmul+0x458>
 80013da:	e642      	b.n	8001062 <__aeabi_dmul+0xde>
 80013dc:	291f      	cmp	r1, #31
 80013de:	dd47      	ble.n	8001470 <__aeabi_dmul+0x4ec>
 80013e0:	261f      	movs	r6, #31
 80013e2:	0025      	movs	r5, r4
 80013e4:	4276      	negs	r6, r6
 80013e6:	1af3      	subs	r3, r6, r3
 80013e8:	40dd      	lsrs	r5, r3
 80013ea:	002b      	movs	r3, r5
 80013ec:	2920      	cmp	r1, #32
 80013ee:	d005      	beq.n	80013fc <__aeabi_dmul+0x478>
 80013f0:	4942      	ldr	r1, [pc, #264]	; (80014fc <__aeabi_dmul+0x578>)
 80013f2:	9d02      	ldr	r5, [sp, #8]
 80013f4:	468c      	mov	ip, r1
 80013f6:	4465      	add	r5, ip
 80013f8:	40ac      	lsls	r4, r5
 80013fa:	4320      	orrs	r0, r4
 80013fc:	1e41      	subs	r1, r0, #1
 80013fe:	4188      	sbcs	r0, r1
 8001400:	4318      	orrs	r0, r3
 8001402:	2307      	movs	r3, #7
 8001404:	001d      	movs	r5, r3
 8001406:	2400      	movs	r4, #0
 8001408:	4005      	ands	r5, r0
 800140a:	4203      	tst	r3, r0
 800140c:	d04a      	beq.n	80014a4 <__aeabi_dmul+0x520>
 800140e:	230f      	movs	r3, #15
 8001410:	2400      	movs	r4, #0
 8001412:	4003      	ands	r3, r0
 8001414:	2b04      	cmp	r3, #4
 8001416:	d042      	beq.n	800149e <__aeabi_dmul+0x51a>
 8001418:	1d03      	adds	r3, r0, #4
 800141a:	4283      	cmp	r3, r0
 800141c:	4180      	sbcs	r0, r0
 800141e:	4240      	negs	r0, r0
 8001420:	1824      	adds	r4, r4, r0
 8001422:	0018      	movs	r0, r3
 8001424:	0223      	lsls	r3, r4, #8
 8001426:	d53a      	bpl.n	800149e <__aeabi_dmul+0x51a>
 8001428:	2301      	movs	r3, #1
 800142a:	2400      	movs	r4, #0
 800142c:	2500      	movs	r5, #0
 800142e:	e61b      	b.n	8001068 <__aeabi_dmul+0xe4>
 8001430:	f000 fcea 	bl	8001e08 <__clzsi2>
 8001434:	0001      	movs	r1, r0
 8001436:	0003      	movs	r3, r0
 8001438:	3115      	adds	r1, #21
 800143a:	3320      	adds	r3, #32
 800143c:	291c      	cmp	r1, #28
 800143e:	dd8f      	ble.n	8001360 <__aeabi_dmul+0x3dc>
 8001440:	3808      	subs	r0, #8
 8001442:	2200      	movs	r2, #0
 8001444:	4084      	lsls	r4, r0
 8001446:	4692      	mov	sl, r2
 8001448:	46a3      	mov	fp, r4
 800144a:	e796      	b.n	800137a <__aeabi_dmul+0x3f6>
 800144c:	f000 fcdc 	bl	8001e08 <__clzsi2>
 8001450:	0001      	movs	r1, r0
 8001452:	0003      	movs	r3, r0
 8001454:	3115      	adds	r1, #21
 8001456:	3320      	adds	r3, #32
 8001458:	291c      	cmp	r1, #28
 800145a:	dc00      	bgt.n	800145e <__aeabi_dmul+0x4da>
 800145c:	e758      	b.n	8001310 <__aeabi_dmul+0x38c>
 800145e:	0002      	movs	r2, r0
 8001460:	464c      	mov	r4, r9
 8001462:	3a08      	subs	r2, #8
 8001464:	2000      	movs	r0, #0
 8001466:	4094      	lsls	r4, r2
 8001468:	e75d      	b.n	8001326 <__aeabi_dmul+0x3a2>
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	e711      	b.n	8001294 <__aeabi_dmul+0x310>
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <__aeabi_dmul+0x57c>)
 8001472:	0026      	movs	r6, r4
 8001474:	469c      	mov	ip, r3
 8001476:	0003      	movs	r3, r0
 8001478:	9d02      	ldr	r5, [sp, #8]
 800147a:	40cb      	lsrs	r3, r1
 800147c:	4465      	add	r5, ip
 800147e:	40ae      	lsls	r6, r5
 8001480:	431e      	orrs	r6, r3
 8001482:	0003      	movs	r3, r0
 8001484:	40ab      	lsls	r3, r5
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	4183      	sbcs	r3, r0
 800148a:	0030      	movs	r0, r6
 800148c:	4318      	orrs	r0, r3
 800148e:	40cc      	lsrs	r4, r1
 8001490:	0743      	lsls	r3, r0, #29
 8001492:	d0c7      	beq.n	8001424 <__aeabi_dmul+0x4a0>
 8001494:	230f      	movs	r3, #15
 8001496:	4003      	ands	r3, r0
 8001498:	2b04      	cmp	r3, #4
 800149a:	d1bd      	bne.n	8001418 <__aeabi_dmul+0x494>
 800149c:	e7c2      	b.n	8001424 <__aeabi_dmul+0x4a0>
 800149e:	0765      	lsls	r5, r4, #29
 80014a0:	0264      	lsls	r4, r4, #9
 80014a2:	0b24      	lsrs	r4, r4, #12
 80014a4:	08c0      	lsrs	r0, r0, #3
 80014a6:	2300      	movs	r3, #0
 80014a8:	4305      	orrs	r5, r0
 80014aa:	e5dd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ac:	2500      	movs	r5, #0
 80014ae:	2302      	movs	r3, #2
 80014b0:	2e0f      	cmp	r6, #15
 80014b2:	d10c      	bne.n	80014ce <__aeabi_dmul+0x54a>
 80014b4:	2480      	movs	r4, #128	; 0x80
 80014b6:	465b      	mov	r3, fp
 80014b8:	0324      	lsls	r4, r4, #12
 80014ba:	4223      	tst	r3, r4
 80014bc:	d00e      	beq.n	80014dc <__aeabi_dmul+0x558>
 80014be:	4221      	tst	r1, r4
 80014c0:	d10c      	bne.n	80014dc <__aeabi_dmul+0x558>
 80014c2:	430c      	orrs	r4, r1
 80014c4:	0324      	lsls	r4, r4, #12
 80014c6:	003a      	movs	r2, r7
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <__aeabi_dmul+0x580>)
 80014ca:	0b24      	lsrs	r4, r4, #12
 80014cc:	e5cc      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0x550>
 80014d2:	e5a2      	b.n	800101a <__aeabi_dmul+0x96>
 80014d4:	468b      	mov	fp, r1
 80014d6:	46aa      	mov	sl, r5
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	e5f7      	b.n	80010cc <__aeabi_dmul+0x148>
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	465b      	mov	r3, fp
 80014e0:	0324      	lsls	r4, r4, #12
 80014e2:	431c      	orrs	r4, r3
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	4642      	mov	r2, r8
 80014e8:	4655      	mov	r5, sl
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__aeabi_dmul+0x580>)
 80014ec:	0b24      	lsrs	r4, r4, #12
 80014ee:	e5bb      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014f0:	464d      	mov	r5, r9
 80014f2:	0021      	movs	r1, r4
 80014f4:	2303      	movs	r3, #3
 80014f6:	e7db      	b.n	80014b0 <__aeabi_dmul+0x52c>
 80014f8:	fffffc0d 	.word	0xfffffc0d
 80014fc:	0000043e 	.word	0x0000043e
 8001500:	0000041e 	.word	0x0000041e
 8001504:	000007ff 	.word	0x000007ff

08001508 <__aeabi_dsub>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	464e      	mov	r6, r9
 800150e:	4645      	mov	r5, r8
 8001510:	46de      	mov	lr, fp
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	000d      	movs	r5, r1
 8001516:	0004      	movs	r4, r0
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	032b      	lsls	r3, r5, #12
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	0f62      	lsrs	r2, r4, #29
 8001522:	431a      	orrs	r2, r3
 8001524:	00e3      	lsls	r3, r4, #3
 8001526:	030c      	lsls	r4, r1, #12
 8001528:	0a64      	lsrs	r4, r4, #9
 800152a:	0f47      	lsrs	r7, r0, #29
 800152c:	4327      	orrs	r7, r4
 800152e:	4cd0      	ldr	r4, [pc, #832]	; (8001870 <__aeabi_dsub+0x368>)
 8001530:	006e      	lsls	r6, r5, #1
 8001532:	4691      	mov	r9, r2
 8001534:	b083      	sub	sp, #12
 8001536:	004a      	lsls	r2, r1, #1
 8001538:	00c0      	lsls	r0, r0, #3
 800153a:	4698      	mov	r8, r3
 800153c:	46a2      	mov	sl, r4
 800153e:	0d76      	lsrs	r6, r6, #21
 8001540:	0fed      	lsrs	r5, r5, #31
 8001542:	0d52      	lsrs	r2, r2, #21
 8001544:	0fc9      	lsrs	r1, r1, #31
 8001546:	9001      	str	r0, [sp, #4]
 8001548:	42a2      	cmp	r2, r4
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x46>
 800154c:	e0b9      	b.n	80016c2 <__aeabi_dsub+0x1ba>
 800154e:	2401      	movs	r4, #1
 8001550:	4061      	eors	r1, r4
 8001552:	468b      	mov	fp, r1
 8001554:	428d      	cmp	r5, r1
 8001556:	d100      	bne.n	800155a <__aeabi_dsub+0x52>
 8001558:	e08d      	b.n	8001676 <__aeabi_dsub+0x16e>
 800155a:	1ab4      	subs	r4, r6, r2
 800155c:	46a4      	mov	ip, r4
 800155e:	2c00      	cmp	r4, #0
 8001560:	dc00      	bgt.n	8001564 <__aeabi_dsub+0x5c>
 8001562:	e0b7      	b.n	80016d4 <__aeabi_dsub+0x1cc>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dsub+0x62>
 8001568:	e0cb      	b.n	8001702 <__aeabi_dsub+0x1fa>
 800156a:	4ac1      	ldr	r2, [pc, #772]	; (8001870 <__aeabi_dsub+0x368>)
 800156c:	4296      	cmp	r6, r2
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x6a>
 8001570:	e186      	b.n	8001880 <__aeabi_dsub+0x378>
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0412      	lsls	r2, r2, #16
 8001576:	4317      	orrs	r7, r2
 8001578:	4662      	mov	r2, ip
 800157a:	2a38      	cmp	r2, #56	; 0x38
 800157c:	dd00      	ble.n	8001580 <__aeabi_dsub+0x78>
 800157e:	e1a4      	b.n	80018ca <__aeabi_dsub+0x3c2>
 8001580:	2a1f      	cmp	r2, #31
 8001582:	dd00      	ble.n	8001586 <__aeabi_dsub+0x7e>
 8001584:	e21d      	b.n	80019c2 <__aeabi_dsub+0x4ba>
 8001586:	4661      	mov	r1, ip
 8001588:	2220      	movs	r2, #32
 800158a:	003c      	movs	r4, r7
 800158c:	1a52      	subs	r2, r2, r1
 800158e:	0001      	movs	r1, r0
 8001590:	4090      	lsls	r0, r2
 8001592:	4094      	lsls	r4, r2
 8001594:	1e42      	subs	r2, r0, #1
 8001596:	4190      	sbcs	r0, r2
 8001598:	4662      	mov	r2, ip
 800159a:	46a0      	mov	r8, r4
 800159c:	4664      	mov	r4, ip
 800159e:	40d7      	lsrs	r7, r2
 80015a0:	464a      	mov	r2, r9
 80015a2:	40e1      	lsrs	r1, r4
 80015a4:	4644      	mov	r4, r8
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	4691      	mov	r9, r2
 80015aa:	430c      	orrs	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	1b1c      	subs	r4, r3, r4
 80015b0:	42a3      	cmp	r3, r4
 80015b2:	4192      	sbcs	r2, r2
 80015b4:	464b      	mov	r3, r9
 80015b6:	4252      	negs	r2, r2
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	469a      	mov	sl, r3
 80015bc:	4653      	mov	r3, sl
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_dsub+0xbc>
 80015c2:	e12b      	b.n	800181c <__aeabi_dsub+0x314>
 80015c4:	4653      	mov	r3, sl
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	0a53      	lsrs	r3, r2, #9
 80015ca:	469a      	mov	sl, r3
 80015cc:	4653      	mov	r3, sl
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0xcc>
 80015d2:	e166      	b.n	80018a2 <__aeabi_dsub+0x39a>
 80015d4:	4650      	mov	r0, sl
 80015d6:	f000 fc17 	bl	8001e08 <__clzsi2>
 80015da:	0003      	movs	r3, r0
 80015dc:	3b08      	subs	r3, #8
 80015de:	2220      	movs	r2, #32
 80015e0:	0020      	movs	r0, r4
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4651      	mov	r1, sl
 80015e6:	40d0      	lsrs	r0, r2
 80015e8:	4099      	lsls	r1, r3
 80015ea:	0002      	movs	r2, r0
 80015ec:	409c      	lsls	r4, r3
 80015ee:	430a      	orrs	r2, r1
 80015f0:	429e      	cmp	r6, r3
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dsub+0xee>
 80015f4:	e164      	b.n	80018c0 <__aeabi_dsub+0x3b8>
 80015f6:	1b9b      	subs	r3, r3, r6
 80015f8:	1c59      	adds	r1, r3, #1
 80015fa:	291f      	cmp	r1, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dsub+0xf8>
 80015fe:	e0fe      	b.n	80017fe <__aeabi_dsub+0x2f6>
 8001600:	2320      	movs	r3, #32
 8001602:	0010      	movs	r0, r2
 8001604:	0026      	movs	r6, r4
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	409c      	lsls	r4, r3
 800160a:	4098      	lsls	r0, r3
 800160c:	40ce      	lsrs	r6, r1
 800160e:	40ca      	lsrs	r2, r1
 8001610:	1e63      	subs	r3, r4, #1
 8001612:	419c      	sbcs	r4, r3
 8001614:	4330      	orrs	r0, r6
 8001616:	4692      	mov	sl, r2
 8001618:	2600      	movs	r6, #0
 800161a:	4304      	orrs	r4, r0
 800161c:	0763      	lsls	r3, r4, #29
 800161e:	d009      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001620:	230f      	movs	r3, #15
 8001622:	4023      	ands	r3, r4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d005      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001628:	1d23      	adds	r3, r4, #4
 800162a:	42a3      	cmp	r3, r4
 800162c:	41a4      	sbcs	r4, r4
 800162e:	4264      	negs	r4, r4
 8001630:	44a2      	add	sl, r4
 8001632:	001c      	movs	r4, r3
 8001634:	4653      	mov	r3, sl
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_dsub+0x134>
 800163a:	e0f2      	b.n	8001822 <__aeabi_dsub+0x31a>
 800163c:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <__aeabi_dsub+0x368>)
 800163e:	3601      	adds	r6, #1
 8001640:	429e      	cmp	r6, r3
 8001642:	d100      	bne.n	8001646 <__aeabi_dsub+0x13e>
 8001644:	e10f      	b.n	8001866 <__aeabi_dsub+0x35e>
 8001646:	4653      	mov	r3, sl
 8001648:	498a      	ldr	r1, [pc, #552]	; (8001874 <__aeabi_dsub+0x36c>)
 800164a:	08e4      	lsrs	r4, r4, #3
 800164c:	400b      	ands	r3, r1
 800164e:	0019      	movs	r1, r3
 8001650:	075b      	lsls	r3, r3, #29
 8001652:	4323      	orrs	r3, r4
 8001654:	0572      	lsls	r2, r6, #21
 8001656:	024c      	lsls	r4, r1, #9
 8001658:	0b24      	lsrs	r4, r4, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	0512      	lsls	r2, r2, #20
 800165e:	4322      	orrs	r2, r4
 8001660:	07ed      	lsls	r5, r5, #31
 8001662:	432a      	orrs	r2, r5
 8001664:	0018      	movs	r0, r3
 8001666:	0011      	movs	r1, r2
 8001668:	b003      	add	sp, #12
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	1ab4      	subs	r4, r6, r2
 8001678:	46a4      	mov	ip, r4
 800167a:	2c00      	cmp	r4, #0
 800167c:	dd59      	ble.n	8001732 <__aeabi_dsub+0x22a>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x17c>
 8001682:	e0b0      	b.n	80017e6 <__aeabi_dsub+0x2de>
 8001684:	4556      	cmp	r6, sl
 8001686:	d100      	bne.n	800168a <__aeabi_dsub+0x182>
 8001688:	e0fa      	b.n	8001880 <__aeabi_dsub+0x378>
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0412      	lsls	r2, r2, #16
 800168e:	4317      	orrs	r7, r2
 8001690:	4662      	mov	r2, ip
 8001692:	2a38      	cmp	r2, #56	; 0x38
 8001694:	dd00      	ble.n	8001698 <__aeabi_dsub+0x190>
 8001696:	e0d4      	b.n	8001842 <__aeabi_dsub+0x33a>
 8001698:	2a1f      	cmp	r2, #31
 800169a:	dc00      	bgt.n	800169e <__aeabi_dsub+0x196>
 800169c:	e1c0      	b.n	8001a20 <__aeabi_dsub+0x518>
 800169e:	0039      	movs	r1, r7
 80016a0:	3a20      	subs	r2, #32
 80016a2:	40d1      	lsrs	r1, r2
 80016a4:	4662      	mov	r2, ip
 80016a6:	2a20      	cmp	r2, #32
 80016a8:	d006      	beq.n	80016b8 <__aeabi_dsub+0x1b0>
 80016aa:	4664      	mov	r4, ip
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	1b12      	subs	r2, r2, r4
 80016b0:	003c      	movs	r4, r7
 80016b2:	4094      	lsls	r4, r2
 80016b4:	4304      	orrs	r4, r0
 80016b6:	9401      	str	r4, [sp, #4]
 80016b8:	9c01      	ldr	r4, [sp, #4]
 80016ba:	1e62      	subs	r2, r4, #1
 80016bc:	4194      	sbcs	r4, r2
 80016be:	430c      	orrs	r4, r1
 80016c0:	e0c3      	b.n	800184a <__aeabi_dsub+0x342>
 80016c2:	003c      	movs	r4, r7
 80016c4:	4304      	orrs	r4, r0
 80016c6:	d02b      	beq.n	8001720 <__aeabi_dsub+0x218>
 80016c8:	468b      	mov	fp, r1
 80016ca:	428d      	cmp	r5, r1
 80016cc:	d02e      	beq.n	800172c <__aeabi_dsub+0x224>
 80016ce:	4c6a      	ldr	r4, [pc, #424]	; (8001878 <__aeabi_dsub+0x370>)
 80016d0:	46a4      	mov	ip, r4
 80016d2:	44b4      	add	ip, r6
 80016d4:	4664      	mov	r4, ip
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d05f      	beq.n	800179a <__aeabi_dsub+0x292>
 80016da:	1b94      	subs	r4, r2, r6
 80016dc:	46a4      	mov	ip, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dsub+0x1dc>
 80016e2:	e120      	b.n	8001926 <__aeabi_dsub+0x41e>
 80016e4:	464c      	mov	r4, r9
 80016e6:	431c      	orrs	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x1e4>
 80016ea:	e1c7      	b.n	8001a7c <__aeabi_dsub+0x574>
 80016ec:	4661      	mov	r1, ip
 80016ee:	1e4c      	subs	r4, r1, #1
 80016f0:	2901      	cmp	r1, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dsub+0x1ee>
 80016f4:	e223      	b.n	8001b3e <__aeabi_dsub+0x636>
 80016f6:	4d5e      	ldr	r5, [pc, #376]	; (8001870 <__aeabi_dsub+0x368>)
 80016f8:	45ac      	cmp	ip, r5
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x1f6>
 80016fc:	e1d8      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 80016fe:	46a4      	mov	ip, r4
 8001700:	e11a      	b.n	8001938 <__aeabi_dsub+0x430>
 8001702:	003a      	movs	r2, r7
 8001704:	4302      	orrs	r2, r0
 8001706:	d100      	bne.n	800170a <__aeabi_dsub+0x202>
 8001708:	e0e4      	b.n	80018d4 <__aeabi_dsub+0x3cc>
 800170a:	0022      	movs	r2, r4
 800170c:	3a01      	subs	r2, #1
 800170e:	2c01      	cmp	r4, #1
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x20c>
 8001712:	e1c3      	b.n	8001a9c <__aeabi_dsub+0x594>
 8001714:	4956      	ldr	r1, [pc, #344]	; (8001870 <__aeabi_dsub+0x368>)
 8001716:	428c      	cmp	r4, r1
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0x214>
 800171a:	e0b1      	b.n	8001880 <__aeabi_dsub+0x378>
 800171c:	4694      	mov	ip, r2
 800171e:	e72b      	b.n	8001578 <__aeabi_dsub+0x70>
 8001720:	2401      	movs	r4, #1
 8001722:	4061      	eors	r1, r4
 8001724:	468b      	mov	fp, r1
 8001726:	428d      	cmp	r5, r1
 8001728:	d000      	beq.n	800172c <__aeabi_dsub+0x224>
 800172a:	e716      	b.n	800155a <__aeabi_dsub+0x52>
 800172c:	4952      	ldr	r1, [pc, #328]	; (8001878 <__aeabi_dsub+0x370>)
 800172e:	468c      	mov	ip, r1
 8001730:	44b4      	add	ip, r6
 8001732:	4664      	mov	r4, ip
 8001734:	2c00      	cmp	r4, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dsub+0x232>
 8001738:	e0d3      	b.n	80018e2 <__aeabi_dsub+0x3da>
 800173a:	1b91      	subs	r1, r2, r6
 800173c:	468c      	mov	ip, r1
 800173e:	2e00      	cmp	r6, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x23c>
 8001742:	e15e      	b.n	8001a02 <__aeabi_dsub+0x4fa>
 8001744:	494a      	ldr	r1, [pc, #296]	; (8001870 <__aeabi_dsub+0x368>)
 8001746:	428a      	cmp	r2, r1
 8001748:	d100      	bne.n	800174c <__aeabi_dsub+0x244>
 800174a:	e1be      	b.n	8001aca <__aeabi_dsub+0x5c2>
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	464c      	mov	r4, r9
 8001750:	0409      	lsls	r1, r1, #16
 8001752:	430c      	orrs	r4, r1
 8001754:	46a1      	mov	r9, r4
 8001756:	4661      	mov	r1, ip
 8001758:	2938      	cmp	r1, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dsub+0x256>
 800175c:	e1ba      	b.n	8001ad4 <__aeabi_dsub+0x5cc>
 800175e:	291f      	cmp	r1, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dsub+0x25c>
 8001762:	e227      	b.n	8001bb4 <__aeabi_dsub+0x6ac>
 8001764:	2420      	movs	r4, #32
 8001766:	1a64      	subs	r4, r4, r1
 8001768:	4649      	mov	r1, r9
 800176a:	40a1      	lsls	r1, r4
 800176c:	001e      	movs	r6, r3
 800176e:	4688      	mov	r8, r1
 8001770:	4661      	mov	r1, ip
 8001772:	40a3      	lsls	r3, r4
 8001774:	40ce      	lsrs	r6, r1
 8001776:	4641      	mov	r1, r8
 8001778:	1e5c      	subs	r4, r3, #1
 800177a:	41a3      	sbcs	r3, r4
 800177c:	4331      	orrs	r1, r6
 800177e:	4319      	orrs	r1, r3
 8001780:	000c      	movs	r4, r1
 8001782:	4663      	mov	r3, ip
 8001784:	4649      	mov	r1, r9
 8001786:	40d9      	lsrs	r1, r3
 8001788:	187f      	adds	r7, r7, r1
 800178a:	1824      	adds	r4, r4, r0
 800178c:	4284      	cmp	r4, r0
 800178e:	419b      	sbcs	r3, r3
 8001790:	425b      	negs	r3, r3
 8001792:	469a      	mov	sl, r3
 8001794:	0016      	movs	r6, r2
 8001796:	44ba      	add	sl, r7
 8001798:	e05d      	b.n	8001856 <__aeabi_dsub+0x34e>
 800179a:	4c38      	ldr	r4, [pc, #224]	; (800187c <__aeabi_dsub+0x374>)
 800179c:	1c72      	adds	r2, r6, #1
 800179e:	4222      	tst	r2, r4
 80017a0:	d000      	beq.n	80017a4 <__aeabi_dsub+0x29c>
 80017a2:	e0df      	b.n	8001964 <__aeabi_dsub+0x45c>
 80017a4:	464a      	mov	r2, r9
 80017a6:	431a      	orrs	r2, r3
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	d000      	beq.n	80017ae <__aeabi_dsub+0x2a6>
 80017ac:	e15c      	b.n	8001a68 <__aeabi_dsub+0x560>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dsub+0x2ac>
 80017b2:	e1cf      	b.n	8001b54 <__aeabi_dsub+0x64c>
 80017b4:	003a      	movs	r2, r7
 80017b6:	4302      	orrs	r2, r0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dsub+0x2b4>
 80017ba:	e17f      	b.n	8001abc <__aeabi_dsub+0x5b4>
 80017bc:	1a1c      	subs	r4, r3, r0
 80017be:	464a      	mov	r2, r9
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	1bd2      	subs	r2, r2, r7
 80017c6:	4249      	negs	r1, r1
 80017c8:	1a52      	subs	r2, r2, r1
 80017ca:	4692      	mov	sl, r2
 80017cc:	0212      	lsls	r2, r2, #8
 80017ce:	d400      	bmi.n	80017d2 <__aeabi_dsub+0x2ca>
 80017d0:	e20a      	b.n	8001be8 <__aeabi_dsub+0x6e0>
 80017d2:	1ac4      	subs	r4, r0, r3
 80017d4:	42a0      	cmp	r0, r4
 80017d6:	4180      	sbcs	r0, r0
 80017d8:	464b      	mov	r3, r9
 80017da:	4240      	negs	r0, r0
 80017dc:	1aff      	subs	r7, r7, r3
 80017de:	1a3b      	subs	r3, r7, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	465d      	mov	r5, fp
 80017e4:	e71a      	b.n	800161c <__aeabi_dsub+0x114>
 80017e6:	003a      	movs	r2, r7
 80017e8:	4302      	orrs	r2, r0
 80017ea:	d073      	beq.n	80018d4 <__aeabi_dsub+0x3cc>
 80017ec:	0022      	movs	r2, r4
 80017ee:	3a01      	subs	r2, #1
 80017f0:	2c01      	cmp	r4, #1
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x2ee>
 80017f4:	e0cb      	b.n	800198e <__aeabi_dsub+0x486>
 80017f6:	4554      	cmp	r4, sl
 80017f8:	d042      	beq.n	8001880 <__aeabi_dsub+0x378>
 80017fa:	4694      	mov	ip, r2
 80017fc:	e748      	b.n	8001690 <__aeabi_dsub+0x188>
 80017fe:	0010      	movs	r0, r2
 8001800:	3b1f      	subs	r3, #31
 8001802:	40d8      	lsrs	r0, r3
 8001804:	2920      	cmp	r1, #32
 8001806:	d003      	beq.n	8001810 <__aeabi_dsub+0x308>
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	1a5b      	subs	r3, r3, r1
 800180c:	409a      	lsls	r2, r3
 800180e:	4314      	orrs	r4, r2
 8001810:	1e63      	subs	r3, r4, #1
 8001812:	419c      	sbcs	r4, r3
 8001814:	2300      	movs	r3, #0
 8001816:	2600      	movs	r6, #0
 8001818:	469a      	mov	sl, r3
 800181a:	4304      	orrs	r4, r0
 800181c:	0763      	lsls	r3, r4, #29
 800181e:	d000      	beq.n	8001822 <__aeabi_dsub+0x31a>
 8001820:	e6fe      	b.n	8001620 <__aeabi_dsub+0x118>
 8001822:	4652      	mov	r2, sl
 8001824:	08e3      	lsrs	r3, r4, #3
 8001826:	0752      	lsls	r2, r2, #29
 8001828:	4313      	orrs	r3, r2
 800182a:	4652      	mov	r2, sl
 800182c:	46b4      	mov	ip, r6
 800182e:	08d2      	lsrs	r2, r2, #3
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <__aeabi_dsub+0x368>)
 8001832:	458c      	cmp	ip, r1
 8001834:	d02a      	beq.n	800188c <__aeabi_dsub+0x384>
 8001836:	0312      	lsls	r2, r2, #12
 8001838:	0b14      	lsrs	r4, r2, #12
 800183a:	4662      	mov	r2, ip
 800183c:	0552      	lsls	r2, r2, #21
 800183e:	0d52      	lsrs	r2, r2, #21
 8001840:	e70c      	b.n	800165c <__aeabi_dsub+0x154>
 8001842:	003c      	movs	r4, r7
 8001844:	4304      	orrs	r4, r0
 8001846:	1e62      	subs	r2, r4, #1
 8001848:	4194      	sbcs	r4, r2
 800184a:	18e4      	adds	r4, r4, r3
 800184c:	429c      	cmp	r4, r3
 800184e:	4192      	sbcs	r2, r2
 8001850:	4252      	negs	r2, r2
 8001852:	444a      	add	r2, r9
 8001854:	4692      	mov	sl, r2
 8001856:	4653      	mov	r3, sl
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	d5df      	bpl.n	800181c <__aeabi_dsub+0x314>
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__aeabi_dsub+0x368>)
 800185e:	3601      	adds	r6, #1
 8001860:	429e      	cmp	r6, r3
 8001862:	d000      	beq.n	8001866 <__aeabi_dsub+0x35e>
 8001864:	e0a0      	b.n	80019a8 <__aeabi_dsub+0x4a0>
 8001866:	0032      	movs	r2, r6
 8001868:	2400      	movs	r4, #0
 800186a:	2300      	movs	r3, #0
 800186c:	e6f6      	b.n	800165c <__aeabi_dsub+0x154>
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	000007ff 	.word	0x000007ff
 8001874:	ff7fffff 	.word	0xff7fffff
 8001878:	fffff801 	.word	0xfffff801
 800187c:	000007fe 	.word	0x000007fe
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	464a      	mov	r2, r9
 8001884:	0752      	lsls	r2, r2, #29
 8001886:	4313      	orrs	r3, r2
 8001888:	464a      	mov	r2, r9
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	0019      	movs	r1, r3
 800188e:	4311      	orrs	r1, r2
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x38c>
 8001892:	e1b5      	b.n	8001c00 <__aeabi_dsub+0x6f8>
 8001894:	2480      	movs	r4, #128	; 0x80
 8001896:	0324      	lsls	r4, r4, #12
 8001898:	4314      	orrs	r4, r2
 800189a:	0324      	lsls	r4, r4, #12
 800189c:	4ad5      	ldr	r2, [pc, #852]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	e6dc      	b.n	800165c <__aeabi_dsub+0x154>
 80018a2:	0020      	movs	r0, r4
 80018a4:	f000 fab0 	bl	8001e08 <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	3318      	adds	r3, #24
 80018ac:	2b1f      	cmp	r3, #31
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_dsub+0x3aa>
 80018b0:	e695      	b.n	80015de <__aeabi_dsub+0xd6>
 80018b2:	0022      	movs	r2, r4
 80018b4:	3808      	subs	r0, #8
 80018b6:	4082      	lsls	r2, r0
 80018b8:	2400      	movs	r4, #0
 80018ba:	429e      	cmp	r6, r3
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dsub+0x3b8>
 80018be:	e69a      	b.n	80015f6 <__aeabi_dsub+0xee>
 80018c0:	1af6      	subs	r6, r6, r3
 80018c2:	4bcd      	ldr	r3, [pc, #820]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80018c4:	401a      	ands	r2, r3
 80018c6:	4692      	mov	sl, r2
 80018c8:	e6a8      	b.n	800161c <__aeabi_dsub+0x114>
 80018ca:	003c      	movs	r4, r7
 80018cc:	4304      	orrs	r4, r0
 80018ce:	1e62      	subs	r2, r4, #1
 80018d0:	4194      	sbcs	r4, r2
 80018d2:	e66c      	b.n	80015ae <__aeabi_dsub+0xa6>
 80018d4:	464a      	mov	r2, r9
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	0752      	lsls	r2, r2, #29
 80018da:	4313      	orrs	r3, r2
 80018dc:	464a      	mov	r2, r9
 80018de:	08d2      	lsrs	r2, r2, #3
 80018e0:	e7a6      	b.n	8001830 <__aeabi_dsub+0x328>
 80018e2:	4cc6      	ldr	r4, [pc, #792]	; (8001bfc <__aeabi_dsub+0x6f4>)
 80018e4:	1c72      	adds	r2, r6, #1
 80018e6:	4222      	tst	r2, r4
 80018e8:	d000      	beq.n	80018ec <__aeabi_dsub+0x3e4>
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dsub+0x53e>
 80018ec:	464a      	mov	r2, r9
 80018ee:	431a      	orrs	r2, r3
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x3ee>
 80018f4:	e105      	b.n	8001b02 <__aeabi_dsub+0x5fa>
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x3f4>
 80018fa:	e156      	b.n	8001baa <__aeabi_dsub+0x6a2>
 80018fc:	003a      	movs	r2, r7
 80018fe:	4302      	orrs	r2, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x3fc>
 8001902:	e0db      	b.n	8001abc <__aeabi_dsub+0x5b4>
 8001904:	181c      	adds	r4, r3, r0
 8001906:	429c      	cmp	r4, r3
 8001908:	419b      	sbcs	r3, r3
 800190a:	444f      	add	r7, r9
 800190c:	46ba      	mov	sl, r7
 800190e:	425b      	negs	r3, r3
 8001910:	449a      	add	sl, r3
 8001912:	4653      	mov	r3, sl
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	d400      	bmi.n	800191a <__aeabi_dsub+0x412>
 8001918:	e780      	b.n	800181c <__aeabi_dsub+0x314>
 800191a:	4652      	mov	r2, sl
 800191c:	4bb6      	ldr	r3, [pc, #728]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 800191e:	2601      	movs	r6, #1
 8001920:	401a      	ands	r2, r3
 8001922:	4692      	mov	sl, r2
 8001924:	e77a      	b.n	800181c <__aeabi_dsub+0x314>
 8001926:	4cb3      	ldr	r4, [pc, #716]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001928:	42a2      	cmp	r2, r4
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x426>
 800192c:	e0c0      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 800192e:	2480      	movs	r4, #128	; 0x80
 8001930:	464d      	mov	r5, r9
 8001932:	0424      	lsls	r4, r4, #16
 8001934:	4325      	orrs	r5, r4
 8001936:	46a9      	mov	r9, r5
 8001938:	4664      	mov	r4, ip
 800193a:	2c38      	cmp	r4, #56	; 0x38
 800193c:	dc53      	bgt.n	80019e6 <__aeabi_dsub+0x4de>
 800193e:	4661      	mov	r1, ip
 8001940:	2c1f      	cmp	r4, #31
 8001942:	dd00      	ble.n	8001946 <__aeabi_dsub+0x43e>
 8001944:	e0cd      	b.n	8001ae2 <__aeabi_dsub+0x5da>
 8001946:	2520      	movs	r5, #32
 8001948:	001e      	movs	r6, r3
 800194a:	1b2d      	subs	r5, r5, r4
 800194c:	464c      	mov	r4, r9
 800194e:	40ab      	lsls	r3, r5
 8001950:	40ac      	lsls	r4, r5
 8001952:	40ce      	lsrs	r6, r1
 8001954:	1e5d      	subs	r5, r3, #1
 8001956:	41ab      	sbcs	r3, r5
 8001958:	4334      	orrs	r4, r6
 800195a:	4323      	orrs	r3, r4
 800195c:	464c      	mov	r4, r9
 800195e:	40cc      	lsrs	r4, r1
 8001960:	1b3f      	subs	r7, r7, r4
 8001962:	e045      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001964:	464a      	mov	r2, r9
 8001966:	1a1c      	subs	r4, r3, r0
 8001968:	1bd1      	subs	r1, r2, r7
 800196a:	42a3      	cmp	r3, r4
 800196c:	4192      	sbcs	r2, r2
 800196e:	4252      	negs	r2, r2
 8001970:	4692      	mov	sl, r2
 8001972:	000a      	movs	r2, r1
 8001974:	4651      	mov	r1, sl
 8001976:	1a52      	subs	r2, r2, r1
 8001978:	4692      	mov	sl, r2
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	d500      	bpl.n	8001980 <__aeabi_dsub+0x478>
 800197e:	e083      	b.n	8001a88 <__aeabi_dsub+0x580>
 8001980:	4653      	mov	r3, sl
 8001982:	4323      	orrs	r3, r4
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x480>
 8001986:	e621      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001988:	2200      	movs	r2, #0
 800198a:	2500      	movs	r5, #0
 800198c:	e753      	b.n	8001836 <__aeabi_dsub+0x32e>
 800198e:	181c      	adds	r4, r3, r0
 8001990:	429c      	cmp	r4, r3
 8001992:	419b      	sbcs	r3, r3
 8001994:	444f      	add	r7, r9
 8001996:	46ba      	mov	sl, r7
 8001998:	425b      	negs	r3, r3
 800199a:	449a      	add	sl, r3
 800199c:	4653      	mov	r3, sl
 800199e:	2601      	movs	r6, #1
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x49e>
 80019a4:	e73a      	b.n	800181c <__aeabi_dsub+0x314>
 80019a6:	2602      	movs	r6, #2
 80019a8:	4652      	mov	r2, sl
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	4021      	ands	r1, r4
 80019b4:	0862      	lsrs	r2, r4, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	07dc      	lsls	r4, r3, #31
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	469a      	mov	sl, r3
 80019be:	4314      	orrs	r4, r2
 80019c0:	e62c      	b.n	800161c <__aeabi_dsub+0x114>
 80019c2:	0039      	movs	r1, r7
 80019c4:	3a20      	subs	r2, #32
 80019c6:	40d1      	lsrs	r1, r2
 80019c8:	4662      	mov	r2, ip
 80019ca:	2a20      	cmp	r2, #32
 80019cc:	d006      	beq.n	80019dc <__aeabi_dsub+0x4d4>
 80019ce:	4664      	mov	r4, ip
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	1b12      	subs	r2, r2, r4
 80019d4:	003c      	movs	r4, r7
 80019d6:	4094      	lsls	r4, r2
 80019d8:	4304      	orrs	r4, r0
 80019da:	9401      	str	r4, [sp, #4]
 80019dc:	9c01      	ldr	r4, [sp, #4]
 80019de:	1e62      	subs	r2, r4, #1
 80019e0:	4194      	sbcs	r4, r2
 80019e2:	430c      	orrs	r4, r1
 80019e4:	e5e3      	b.n	80015ae <__aeabi_dsub+0xa6>
 80019e6:	4649      	mov	r1, r9
 80019e8:	4319      	orrs	r1, r3
 80019ea:	000b      	movs	r3, r1
 80019ec:	1e5c      	subs	r4, r3, #1
 80019ee:	41a3      	sbcs	r3, r4
 80019f0:	1ac4      	subs	r4, r0, r3
 80019f2:	42a0      	cmp	r0, r4
 80019f4:	419b      	sbcs	r3, r3
 80019f6:	425b      	negs	r3, r3
 80019f8:	1afb      	subs	r3, r7, r3
 80019fa:	469a      	mov	sl, r3
 80019fc:	465d      	mov	r5, fp
 80019fe:	0016      	movs	r6, r2
 8001a00:	e5dc      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001a02:	4649      	mov	r1, r9
 8001a04:	4319      	orrs	r1, r3
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x502>
 8001a08:	e0ae      	b.n	8001b68 <__aeabi_dsub+0x660>
 8001a0a:	4661      	mov	r1, ip
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	3901      	subs	r1, #1
 8001a10:	2c01      	cmp	r4, #1
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x50e>
 8001a14:	e0e0      	b.n	8001bd8 <__aeabi_dsub+0x6d0>
 8001a16:	4c77      	ldr	r4, [pc, #476]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a18:	45a4      	cmp	ip, r4
 8001a1a:	d056      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	e69a      	b.n	8001756 <__aeabi_dsub+0x24e>
 8001a20:	4661      	mov	r1, ip
 8001a22:	2220      	movs	r2, #32
 8001a24:	003c      	movs	r4, r7
 8001a26:	1a52      	subs	r2, r2, r1
 8001a28:	4094      	lsls	r4, r2
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	4090      	lsls	r0, r2
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	4664      	mov	r4, ip
 8001a32:	1e42      	subs	r2, r0, #1
 8001a34:	4190      	sbcs	r0, r2
 8001a36:	4662      	mov	r2, ip
 8001a38:	40e1      	lsrs	r1, r4
 8001a3a:	4644      	mov	r4, r8
 8001a3c:	40d7      	lsrs	r7, r2
 8001a3e:	430c      	orrs	r4, r1
 8001a40:	4304      	orrs	r4, r0
 8001a42:	44b9      	add	r9, r7
 8001a44:	e701      	b.n	800184a <__aeabi_dsub+0x342>
 8001a46:	496b      	ldr	r1, [pc, #428]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x546>
 8001a4c:	e70c      	b.n	8001868 <__aeabi_dsub+0x360>
 8001a4e:	1818      	adds	r0, r3, r0
 8001a50:	4298      	cmp	r0, r3
 8001a52:	419b      	sbcs	r3, r3
 8001a54:	444f      	add	r7, r9
 8001a56:	425b      	negs	r3, r3
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	07dc      	lsls	r4, r3, #31
 8001a5c:	0840      	lsrs	r0, r0, #1
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	469a      	mov	sl, r3
 8001a62:	0016      	movs	r6, r2
 8001a64:	4304      	orrs	r4, r0
 8001a66:	e6d9      	b.n	800181c <__aeabi_dsub+0x314>
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x566>
 8001a6c:	e081      	b.n	8001b72 <__aeabi_dsub+0x66a>
 8001a6e:	003b      	movs	r3, r7
 8001a70:	4303      	orrs	r3, r0
 8001a72:	d11d      	bne.n	8001ab0 <__aeabi_dsub+0x5a8>
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	2500      	movs	r5, #0
 8001a78:	0312      	lsls	r2, r2, #12
 8001a7a:	e70b      	b.n	8001894 <__aeabi_dsub+0x38c>
 8001a7c:	08c0      	lsrs	r0, r0, #3
 8001a7e:	077b      	lsls	r3, r7, #29
 8001a80:	465d      	mov	r5, fp
 8001a82:	4303      	orrs	r3, r0
 8001a84:	08fa      	lsrs	r2, r7, #3
 8001a86:	e6d3      	b.n	8001830 <__aeabi_dsub+0x328>
 8001a88:	1ac4      	subs	r4, r0, r3
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	464b      	mov	r3, r9
 8001a90:	4240      	negs	r0, r0
 8001a92:	1aff      	subs	r7, r7, r3
 8001a94:	1a3b      	subs	r3, r7, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	465d      	mov	r5, fp
 8001a9a:	e597      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001a9c:	1a1c      	subs	r4, r3, r0
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	419b      	sbcs	r3, r3
 8001aa4:	1bd7      	subs	r7, r2, r7
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	1afb      	subs	r3, r7, r3
 8001aaa:	469a      	mov	sl, r3
 8001aac:	2601      	movs	r6, #1
 8001aae:	e585      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001ab0:	08c0      	lsrs	r0, r0, #3
 8001ab2:	077b      	lsls	r3, r7, #29
 8001ab4:	465d      	mov	r5, fp
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	08fa      	lsrs	r2, r7, #3
 8001aba:	e6e7      	b.n	800188c <__aeabi_dsub+0x384>
 8001abc:	464a      	mov	r2, r9
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	0752      	lsls	r2, r2, #29
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	08d2      	lsrs	r2, r2, #3
 8001ac8:	e6b5      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001aca:	08c0      	lsrs	r0, r0, #3
 8001acc:	077b      	lsls	r3, r7, #29
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	08fa      	lsrs	r2, r7, #3
 8001ad2:	e6db      	b.n	800188c <__aeabi_dsub+0x384>
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	1e59      	subs	r1, r3, #1
 8001adc:	418b      	sbcs	r3, r1
 8001ade:	001c      	movs	r4, r3
 8001ae0:	e653      	b.n	800178a <__aeabi_dsub+0x282>
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	3c20      	subs	r4, #32
 8001ae6:	40e5      	lsrs	r5, r4
 8001ae8:	2920      	cmp	r1, #32
 8001aea:	d005      	beq.n	8001af8 <__aeabi_dsub+0x5f0>
 8001aec:	2440      	movs	r4, #64	; 0x40
 8001aee:	1a64      	subs	r4, r4, r1
 8001af0:	4649      	mov	r1, r9
 8001af2:	40a1      	lsls	r1, r4
 8001af4:	430b      	orrs	r3, r1
 8001af6:	4698      	mov	r8, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	1e5c      	subs	r4, r3, #1
 8001afc:	41a3      	sbcs	r3, r4
 8001afe:	432b      	orrs	r3, r5
 8001b00:	e776      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d0e1      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001b06:	003a      	movs	r2, r7
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x608>
 8001b0e:	e6b8      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b10:	464a      	mov	r2, r9
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	2480      	movs	r4, #128	; 0x80
 8001b16:	4313      	orrs	r3, r2
 8001b18:	464a      	mov	r2, r9
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	08d2      	lsrs	r2, r2, #3
 8001b1e:	4222      	tst	r2, r4
 8001b20:	d007      	beq.n	8001b32 <__aeabi_dsub+0x62a>
 8001b22:	08fe      	lsrs	r6, r7, #3
 8001b24:	4226      	tst	r6, r4
 8001b26:	d104      	bne.n	8001b32 <__aeabi_dsub+0x62a>
 8001b28:	465d      	mov	r5, fp
 8001b2a:	0032      	movs	r2, r6
 8001b2c:	08c3      	lsrs	r3, r0, #3
 8001b2e:	077f      	lsls	r7, r7, #29
 8001b30:	433b      	orrs	r3, r7
 8001b32:	0f59      	lsrs	r1, r3, #29
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	0749      	lsls	r1, r1, #29
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	e6a6      	b.n	800188c <__aeabi_dsub+0x384>
 8001b3e:	1ac4      	subs	r4, r0, r3
 8001b40:	42a0      	cmp	r0, r4
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	464b      	mov	r3, r9
 8001b46:	4240      	negs	r0, r0
 8001b48:	1aff      	subs	r7, r7, r3
 8001b4a:	1a3b      	subs	r3, r7, r0
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	465d      	mov	r5, fp
 8001b50:	2601      	movs	r6, #1
 8001b52:	e533      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001b54:	003b      	movs	r3, r7
 8001b56:	4303      	orrs	r3, r0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x654>
 8001b5a:	e715      	b.n	8001988 <__aeabi_dsub+0x480>
 8001b5c:	08c0      	lsrs	r0, r0, #3
 8001b5e:	077b      	lsls	r3, r7, #29
 8001b60:	465d      	mov	r5, fp
 8001b62:	4303      	orrs	r3, r0
 8001b64:	08fa      	lsrs	r2, r7, #3
 8001b66:	e666      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001b68:	08c0      	lsrs	r0, r0, #3
 8001b6a:	077b      	lsls	r3, r7, #29
 8001b6c:	4303      	orrs	r3, r0
 8001b6e:	08fa      	lsrs	r2, r7, #3
 8001b70:	e65e      	b.n	8001830 <__aeabi_dsub+0x328>
 8001b72:	003a      	movs	r2, r7
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	4302      	orrs	r2, r0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x674>
 8001b7a:	e682      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	0752      	lsls	r2, r2, #29
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	4313      	orrs	r3, r2
 8001b84:	464a      	mov	r2, r9
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	08d2      	lsrs	r2, r2, #3
 8001b8a:	4222      	tst	r2, r4
 8001b8c:	d007      	beq.n	8001b9e <__aeabi_dsub+0x696>
 8001b8e:	08fe      	lsrs	r6, r7, #3
 8001b90:	4226      	tst	r6, r4
 8001b92:	d104      	bne.n	8001b9e <__aeabi_dsub+0x696>
 8001b94:	465d      	mov	r5, fp
 8001b96:	0032      	movs	r2, r6
 8001b98:	08c3      	lsrs	r3, r0, #3
 8001b9a:	077f      	lsls	r7, r7, #29
 8001b9c:	433b      	orrs	r3, r7
 8001b9e:	0f59      	lsrs	r1, r3, #29
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	0749      	lsls	r1, r1, #29
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	e670      	b.n	800188c <__aeabi_dsub+0x384>
 8001baa:	08c0      	lsrs	r0, r0, #3
 8001bac:	077b      	lsls	r3, r7, #29
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	08fa      	lsrs	r2, r7, #3
 8001bb2:	e640      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001bb4:	464c      	mov	r4, r9
 8001bb6:	3920      	subs	r1, #32
 8001bb8:	40cc      	lsrs	r4, r1
 8001bba:	4661      	mov	r1, ip
 8001bbc:	2920      	cmp	r1, #32
 8001bbe:	d006      	beq.n	8001bce <__aeabi_dsub+0x6c6>
 8001bc0:	4666      	mov	r6, ip
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	1b89      	subs	r1, r1, r6
 8001bc6:	464e      	mov	r6, r9
 8001bc8:	408e      	lsls	r6, r1
 8001bca:	4333      	orrs	r3, r6
 8001bcc:	4698      	mov	r8, r3
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	418b      	sbcs	r3, r1
 8001bd4:	431c      	orrs	r4, r3
 8001bd6:	e5d8      	b.n	800178a <__aeabi_dsub+0x282>
 8001bd8:	181c      	adds	r4, r3, r0
 8001bda:	4284      	cmp	r4, r0
 8001bdc:	4180      	sbcs	r0, r0
 8001bde:	444f      	add	r7, r9
 8001be0:	46ba      	mov	sl, r7
 8001be2:	4240      	negs	r0, r0
 8001be4:	4482      	add	sl, r0
 8001be6:	e6d9      	b.n	800199c <__aeabi_dsub+0x494>
 8001be8:	4653      	mov	r3, sl
 8001bea:	4323      	orrs	r3, r4
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x6e8>
 8001bee:	e6cb      	b.n	8001988 <__aeabi_dsub+0x480>
 8001bf0:	e614      	b.n	800181c <__aeabi_dsub+0x314>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000007ff 	.word	0x000007ff
 8001bf8:	ff7fffff 	.word	0xff7fffff
 8001bfc:	000007fe 	.word	0x000007fe
 8001c00:	2300      	movs	r3, #0
 8001c02:	4a01      	ldr	r2, [pc, #4]	; (8001c08 <__aeabi_dsub+0x700>)
 8001c04:	001c      	movs	r4, r3
 8001c06:	e529      	b.n	800165c <__aeabi_dsub+0x154>
 8001c08:	000007ff 	.word	0x000007ff

08001c0c <__aeabi_i2d>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d016      	beq.n	8001c40 <__aeabi_i2d+0x34>
 8001c12:	17c3      	asrs	r3, r0, #31
 8001c14:	18c5      	adds	r5, r0, r3
 8001c16:	405d      	eors	r5, r3
 8001c18:	0fc4      	lsrs	r4, r0, #31
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	f000 f8f4 	bl	8001e08 <__clzsi2>
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <__aeabi_i2d+0x5c>)
 8001c22:	1a1b      	subs	r3, r3, r0
 8001c24:	280a      	cmp	r0, #10
 8001c26:	dc16      	bgt.n	8001c56 <__aeabi_i2d+0x4a>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	002e      	movs	r6, r5
 8001c2c:	3215      	adds	r2, #21
 8001c2e:	4096      	lsls	r6, r2
 8001c30:	220b      	movs	r2, #11
 8001c32:	1a12      	subs	r2, r2, r0
 8001c34:	40d5      	lsrs	r5, r2
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	032d      	lsls	r5, r5, #12
 8001c3a:	0b2d      	lsrs	r5, r5, #12
 8001c3c:	0d5b      	lsrs	r3, r3, #21
 8001c3e:	e003      	b.n	8001c48 <__aeabi_i2d+0x3c>
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	2500      	movs	r5, #0
 8001c46:	2600      	movs	r6, #0
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	432b      	orrs	r3, r5
 8001c4c:	07e4      	lsls	r4, r4, #31
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	0030      	movs	r0, r6
 8001c52:	0019      	movs	r1, r3
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
 8001c56:	380b      	subs	r0, #11
 8001c58:	4085      	lsls	r5, r0
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	032d      	lsls	r5, r5, #12
 8001c5e:	2600      	movs	r6, #0
 8001c60:	0b2d      	lsrs	r5, r5, #12
 8001c62:	0d5b      	lsrs	r3, r3, #21
 8001c64:	e7f0      	b.n	8001c48 <__aeabi_i2d+0x3c>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	0000041e 	.word	0x0000041e

08001c6c <__aeabi_f2d>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	0242      	lsls	r2, r0, #9
 8001c70:	0043      	lsls	r3, r0, #1
 8001c72:	0fc4      	lsrs	r4, r0, #31
 8001c74:	20fe      	movs	r0, #254	; 0xfe
 8001c76:	0e1b      	lsrs	r3, r3, #24
 8001c78:	1c59      	adds	r1, r3, #1
 8001c7a:	0a55      	lsrs	r5, r2, #9
 8001c7c:	4208      	tst	r0, r1
 8001c7e:	d00c      	beq.n	8001c9a <__aeabi_f2d+0x2e>
 8001c80:	21e0      	movs	r1, #224	; 0xe0
 8001c82:	0089      	lsls	r1, r1, #2
 8001c84:	468c      	mov	ip, r1
 8001c86:	076d      	lsls	r5, r5, #29
 8001c88:	0b12      	lsrs	r2, r2, #12
 8001c8a:	4463      	add	r3, ip
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	07e4      	lsls	r4, r4, #31
 8001c92:	4323      	orrs	r3, r4
 8001c94:	0028      	movs	r0, r5
 8001c96:	0019      	movs	r1, r3
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d114      	bne.n	8001cc8 <__aeabi_f2d+0x5c>
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	d01b      	beq.n	8001cda <__aeabi_f2d+0x6e>
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	f000 f8b0 	bl	8001e08 <__clzsi2>
 8001ca8:	280a      	cmp	r0, #10
 8001caa:	dc1c      	bgt.n	8001ce6 <__aeabi_f2d+0x7a>
 8001cac:	230b      	movs	r3, #11
 8001cae:	002a      	movs	r2, r5
 8001cb0:	1a1b      	subs	r3, r3, r0
 8001cb2:	40da      	lsrs	r2, r3
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	3315      	adds	r3, #21
 8001cb8:	409d      	lsls	r5, r3
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <__aeabi_f2d+0x88>)
 8001cbc:	0312      	lsls	r2, r2, #12
 8001cbe:	1a1b      	subs	r3, r3, r0
 8001cc0:	055b      	lsls	r3, r3, #21
 8001cc2:	0b12      	lsrs	r2, r2, #12
 8001cc4:	0d5b      	lsrs	r3, r3, #21
 8001cc6:	e7e1      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	d009      	beq.n	8001ce0 <__aeabi_f2d+0x74>
 8001ccc:	0b13      	lsrs	r3, r2, #12
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	0312      	lsls	r2, r2, #12
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	076d      	lsls	r5, r5, #29
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001cd8:	e7d8      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	e7d5      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001ce4:	e7d2      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	002a      	movs	r2, r5
 8001cea:	3b0b      	subs	r3, #11
 8001cec:	409a      	lsls	r2, r3
 8001cee:	2500      	movs	r5, #0
 8001cf0:	e7e3      	b.n	8001cba <__aeabi_f2d+0x4e>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	00000389 	.word	0x00000389
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <__aeabi_d2f>:
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d00:	004b      	lsls	r3, r1, #1
 8001d02:	030d      	lsls	r5, r1, #12
 8001d04:	0f40      	lsrs	r0, r0, #29
 8001d06:	0d5b      	lsrs	r3, r3, #21
 8001d08:	0fcc      	lsrs	r4, r1, #31
 8001d0a:	0a6d      	lsrs	r5, r5, #9
 8001d0c:	493a      	ldr	r1, [pc, #232]	; (8001df8 <__aeabi_d2f+0xfc>)
 8001d0e:	4305      	orrs	r5, r0
 8001d10:	1c58      	adds	r0, r3, #1
 8001d12:	00d7      	lsls	r7, r2, #3
 8001d14:	4208      	tst	r0, r1
 8001d16:	d00a      	beq.n	8001d2e <__aeabi_d2f+0x32>
 8001d18:	4938      	ldr	r1, [pc, #224]	; (8001dfc <__aeabi_d2f+0x100>)
 8001d1a:	1859      	adds	r1, r3, r1
 8001d1c:	29fe      	cmp	r1, #254	; 0xfe
 8001d1e:	dd16      	ble.n	8001d4e <__aeabi_d2f+0x52>
 8001d20:	20ff      	movs	r0, #255	; 0xff
 8001d22:	2200      	movs	r2, #0
 8001d24:	05c0      	lsls	r0, r0, #23
 8001d26:	4310      	orrs	r0, r2
 8001d28:	07e4      	lsls	r4, r4, #31
 8001d2a:	4320      	orrs	r0, r4
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <__aeabi_d2f+0x44>
 8001d32:	433d      	orrs	r5, r7
 8001d34:	d026      	beq.n	8001d84 <__aeabi_d2f+0x88>
 8001d36:	2205      	movs	r2, #5
 8001d38:	0192      	lsls	r2, r2, #6
 8001d3a:	0a52      	lsrs	r2, r2, #9
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	e7f1      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d40:	432f      	orrs	r7, r5
 8001d42:	d0ed      	beq.n	8001d20 <__aeabi_d2f+0x24>
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	03d2      	lsls	r2, r2, #15
 8001d48:	20ff      	movs	r0, #255	; 0xff
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	e7ea      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	dd1b      	ble.n	8001d8a <__aeabi_d2f+0x8e>
 8001d52:	0192      	lsls	r2, r2, #6
 8001d54:	1e50      	subs	r0, r2, #1
 8001d56:	4182      	sbcs	r2, r0
 8001d58:	00ed      	lsls	r5, r5, #3
 8001d5a:	0f7f      	lsrs	r7, r7, #29
 8001d5c:	432a      	orrs	r2, r5
 8001d5e:	433a      	orrs	r2, r7
 8001d60:	0753      	lsls	r3, r2, #29
 8001d62:	d047      	beq.n	8001df4 <__aeabi_d2f+0xf8>
 8001d64:	230f      	movs	r3, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_d2f+0x72>
 8001d6c:	3204      	adds	r2, #4
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	04db      	lsls	r3, r3, #19
 8001d72:	4013      	ands	r3, r2
 8001d74:	d03e      	beq.n	8001df4 <__aeabi_d2f+0xf8>
 8001d76:	1c48      	adds	r0, r1, #1
 8001d78:	29fe      	cmp	r1, #254	; 0xfe
 8001d7a:	d0d1      	beq.n	8001d20 <__aeabi_d2f+0x24>
 8001d7c:	0192      	lsls	r2, r2, #6
 8001d7e:	0a52      	lsrs	r2, r2, #9
 8001d80:	b2c0      	uxtb	r0, r0
 8001d82:	e7cf      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d84:	2000      	movs	r0, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	e7cc      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	3217      	adds	r2, #23
 8001d8e:	db2f      	blt.n	8001df0 <__aeabi_d2f+0xf4>
 8001d90:	2680      	movs	r6, #128	; 0x80
 8001d92:	0436      	lsls	r6, r6, #16
 8001d94:	432e      	orrs	r6, r5
 8001d96:	251e      	movs	r5, #30
 8001d98:	1a6d      	subs	r5, r5, r1
 8001d9a:	2d1f      	cmp	r5, #31
 8001d9c:	dd11      	ble.n	8001dc2 <__aeabi_d2f+0xc6>
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a52      	subs	r2, r2, r1
 8001da4:	0031      	movs	r1, r6
 8001da6:	40d1      	lsrs	r1, r2
 8001da8:	2d20      	cmp	r5, #32
 8001daa:	d004      	beq.n	8001db6 <__aeabi_d2f+0xba>
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <__aeabi_d2f+0x104>)
 8001dae:	4694      	mov	ip, r2
 8001db0:	4463      	add	r3, ip
 8001db2:	409e      	lsls	r6, r3
 8001db4:	4337      	orrs	r7, r6
 8001db6:	003a      	movs	r2, r7
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	419a      	sbcs	r2, r3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	e7ce      	b.n	8001d60 <__aeabi_d2f+0x64>
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <__aeabi_d2f+0x108>)
 8001dc4:	0038      	movs	r0, r7
 8001dc6:	4694      	mov	ip, r2
 8001dc8:	4463      	add	r3, ip
 8001dca:	4098      	lsls	r0, r3
 8001dcc:	003a      	movs	r2, r7
 8001dce:	1e41      	subs	r1, r0, #1
 8001dd0:	4188      	sbcs	r0, r1
 8001dd2:	409e      	lsls	r6, r3
 8001dd4:	40ea      	lsrs	r2, r5
 8001dd6:	4330      	orrs	r0, r6
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	0753      	lsls	r3, r2, #29
 8001dde:	d1c1      	bne.n	8001d64 <__aeabi_d2f+0x68>
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0013      	movs	r3, r2
 8001de4:	04c9      	lsls	r1, r1, #19
 8001de6:	2001      	movs	r0, #1
 8001de8:	400b      	ands	r3, r1
 8001dea:	420a      	tst	r2, r1
 8001dec:	d1c6      	bne.n	8001d7c <__aeabi_d2f+0x80>
 8001dee:	e7a3      	b.n	8001d38 <__aeabi_d2f+0x3c>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e7a0      	b.n	8001d36 <__aeabi_d2f+0x3a>
 8001df4:	000b      	movs	r3, r1
 8001df6:	e79f      	b.n	8001d38 <__aeabi_d2f+0x3c>
 8001df8:	000007fe 	.word	0x000007fe
 8001dfc:	fffffc80 	.word	0xfffffc80
 8001e00:	fffffca2 	.word	0xfffffca2
 8001e04:	fffffc82 	.word	0xfffffc82

08001e08 <__clzsi2>:
 8001e08:	211c      	movs	r1, #28
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d301      	bcc.n	8001e16 <__clzsi2+0xe>
 8001e12:	0c00      	lsrs	r0, r0, #16
 8001e14:	3910      	subs	r1, #16
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d301      	bcc.n	8001e20 <__clzsi2+0x18>
 8001e1c:	0a00      	lsrs	r0, r0, #8
 8001e1e:	3908      	subs	r1, #8
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	4298      	cmp	r0, r3
 8001e24:	d301      	bcc.n	8001e2a <__clzsi2+0x22>
 8001e26:	0900      	lsrs	r0, r0, #4
 8001e28:	3904      	subs	r1, #4
 8001e2a:	a202      	add	r2, pc, #8	; (adr r2, 8001e34 <__clzsi2+0x2c>)
 8001e2c:	5c10      	ldrb	r0, [r2, r0]
 8001e2e:	1840      	adds	r0, r0, r1
 8001e30:	4770      	bx	lr
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	02020304 	.word	0x02020304
 8001e38:	01010101 	.word	0x01010101
	...

08001e44 <IMU_Init>:
float gyro_z_offset;
#define MAX_DATA_POINTS 10 // Adjust this based on your requirements
UART_HandleTypeDef uart;

void IMU_Init()
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
	//Checks to see IMU and Microcontroller is connected
	GPIOB->ODR |= GPIO_ODR_2 | GPIO_ODR_0;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <IMU_Init+0x48>)
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <IMU_Init+0x48>)
 8001e50:	2105      	movs	r1, #5
 8001e52:	430a      	orrs	r2, r1
 8001e54:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c2, hi2c2.Init.OwnAddress1,  100, 1000);
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <IMU_Init+0x4c>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	1dfc      	adds	r4, r7, #7
 8001e5e:	23fa      	movs	r3, #250	; 0xfa
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	480b      	ldr	r0, [pc, #44]	; (8001e90 <IMU_Init+0x4c>)
 8001e64:	2264      	movs	r2, #100	; 0x64
 8001e66:	f002 f979 	bl	800415c <HAL_I2C_IsDeviceReady>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
	SENSOR_Config();
 8001e6e:	f000 f811 	bl	8001e94 <SENSOR_Config>
	FIFO_Config();
 8001e72:	f000 f871 	bl	8001f58 <FIFO_Config>
	GPIOB->ODR &= ~GPIO_ODR_2;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <IMU_Init+0x48>)
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <IMU_Init+0x48>)
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	438a      	bics	r2, r1
 8001e80:	615a      	str	r2, [r3, #20]

//	ReadAccelerometerAtRest();
//	READ_DATA();
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b003      	add	sp, #12
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	20000040 	.word	0x20000040

08001e94 <SENSOR_Config>:

void SENSOR_Config()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af04      	add	r7, sp, #16
	// turn on accelerometer sensor high performance mode
	uint8_t Acc_Data = 0b10100100;
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	22a4      	movs	r2, #164	; 0xa4
 8001e9e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL1_XL_ADDRESS, 1, &Acc_Data, 1, 1000);
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <SENSOR_Config+0xc0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	482b      	ldr	r0, [pc, #172]	; (8001f54 <SENSOR_Config+0xc0>)
 8001ea8:	23fa      	movs	r3, #250	; 0xfa
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	2210      	movs	r2, #16
 8001eba:	f001 feed 	bl	8003c98 <HAL_I2C_Mem_Write>
	uint8_t Acc_Control = 0b00010000;
 8001ebe:	1d7b      	adds	r3, r7, #5
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL6_C_ADDRESS, 1, &Acc_Control, 1, 100);
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <SENSOR_Config+0xc0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	4822      	ldr	r0, [pc, #136]	; (8001f54 <SENSOR_Config+0xc0>)
 8001ecc:	2364      	movs	r3, #100	; 0x64
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	1d7b      	adds	r3, r7, #5
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	2215      	movs	r2, #21
 8001edc:	f001 fedc 	bl	8003c98 <HAL_I2C_Mem_Write>

//	turn on Gyroscope sensor high performance
	uint8_t Gyro_Data = 0b10101100;
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	22ac      	movs	r2, #172	; 0xac
 8001ee4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL2_G_ADDRESS, 1, &Gyro_Data, 1, 1000);
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <SENSOR_Config+0xc0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	b299      	uxth	r1, r3
 8001eec:	4819      	ldr	r0, [pc, #100]	; (8001f54 <SENSOR_Config+0xc0>)
 8001eee:	23fa      	movs	r3, #250	; 0xfa
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	2211      	movs	r2, #17
 8001f00:	f001 feca 	bl	8003c98 <HAL_I2C_Mem_Write>
	uint8_t Gyro_Control = 0b00000000;
 8001f04:	1cfb      	adds	r3, r7, #3
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL7_G_ADDRESS, 1, &Gyro_Control, 1, 1000);
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <SENSOR_Config+0xc0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	b299      	uxth	r1, r3
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <SENSOR_Config+0xc0>)
 8001f12:	23fa      	movs	r3, #250	; 0xfa
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	1cfb      	adds	r3, r7, #3
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2216      	movs	r2, #22
 8001f24:	f001 feb8 	bl	8003c98 <HAL_I2C_Mem_Write>

	uint8_t Master_Config = 0b0001101;
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	220d      	movs	r2, #13
 8001f2c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, MASTER_CONFIG_ADDRESS, 1, &Gyro_Control, 1, 1000);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <SENSOR_Config+0xc0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	b299      	uxth	r1, r3
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <SENSOR_Config+0xc0>)
 8001f36:	23fa      	movs	r3, #250	; 0xfa
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	1cfb      	adds	r3, r7, #3
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	221a      	movs	r2, #26
 8001f48:	f001 fea6 	bl	8003c98 <HAL_I2C_Mem_Write>
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000040 	.word	0x20000040

08001f58 <FIFO_Config>:

void FIFO_Config()
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af04      	add	r7, sp, #16

	uint8_t FIFO_CTRL3 = 0b00010010;
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2212      	movs	r2, #18
 8001f62:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL3_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL3_ADDRESS, 1, &FIFO_CTRL3, 1, 1000);
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <FIFO_Config+0x8c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	1dfc      	adds	r4, r7, #7
 8001f6c:	481d      	ldr	r0, [pc, #116]	; (8001fe4 <FIFO_Config+0x8c>)
 8001f6e:	23fa      	movs	r3, #250	; 0xfa
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	9302      	str	r3, [sp, #8]
 8001f74:	2301      	movs	r3, #1
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	2208      	movs	r2, #8
 8001f80:	f001 fe8a 	bl	8003c98 <HAL_I2C_Mem_Write>
 8001f84:	0003      	movs	r3, r0
 8001f86:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL4 = 0b00010010;
 8001f88:	1cfb      	adds	r3, r7, #3
 8001f8a:	2212      	movs	r2, #18
 8001f8c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL4_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL4_ADDRESS, 1, &FIFO_CTRL4, 1, 1000);
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <FIFO_Config+0x8c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	b299      	uxth	r1, r3
 8001f94:	1dbc      	adds	r4, r7, #6
 8001f96:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <FIFO_Config+0x8c>)
 8001f98:	23fa      	movs	r3, #250	; 0xfa
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	9302      	str	r3, [sp, #8]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	1cfb      	adds	r3, r7, #3
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2209      	movs	r2, #9
 8001faa:	f001 fe75 	bl	8003c98 <HAL_I2C_Mem_Write>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL5 = 0b01010110;
 8001fb2:	1cbb      	adds	r3, r7, #2
 8001fb4:	2256      	movs	r2, #86	; 0x56
 8001fb6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL5_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL5_ADDRESS, 1, &FIFO_CTRL5, 1, 1000);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <FIFO_Config+0x8c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	1d7c      	adds	r4, r7, #5
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <FIFO_Config+0x8c>)
 8001fc2:	23fa      	movs	r3, #250	; 0xfa
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	1cbb      	adds	r3, r7, #2
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	f001 fe60 	bl	8003c98 <HAL_I2C_Mem_Write>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	7023      	strb	r3, [r4, #0]
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b003      	add	sp, #12
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	20000040 	.word	0x20000040

08001fe8 <READ_DATA>:

void READ_DATA()
{
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b0f6      	sub	sp, #472	; 0x1d8
 8001fec:	af04      	add	r7, sp, #16

	int data_index = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	22e2      	movs	r2, #226	; 0xe2
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	18ba      	adds	r2, r7, r2
 8001ff6:	6013      	str	r3, [r2, #0]
	float acc_z_data[MAX_DATA_POINTS];
	float gyro_x_data[MAX_DATA_POINTS];
	float gyro_y_data[MAX_DATA_POINTS];
	float gyro_z_data[MAX_DATA_POINTS];

	int collect = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	22e0      	movs	r2, #224	; 0xe0
 8001ffc:	0052      	lsls	r2, r2, #1
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	6013      	str	r3, [r2, #0]

	while (!collect){
 8002002:	e31e      	b.n	8002642 <READ_DATA+0x65a>
		uint8_t Acc_X_L[1];
		HAL_StatusTypeDef X_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, &Acc_X_L[0], 1, 100);
 8002004:	4bf3      	ldr	r3, [pc, #972]	; (80023d4 <READ_DATA+0x3ec>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	b299      	uxth	r1, r3
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	33ff      	adds	r3, #255	; 0xff
 800200e:	18fc      	adds	r4, r7, r3
 8002010:	48f0      	ldr	r0, [pc, #960]	; (80023d4 <READ_DATA+0x3ec>)
 8002012:	2364      	movs	r3, #100	; 0x64
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	235c      	movs	r3, #92	; 0x5c
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	2228      	movs	r2, #40	; 0x28
 8002024:	f001 ff66 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002028:	0003      	movs	r3, r0
 800202a:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_X_H[1];
		HAL_StatusTypeDef X2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, &Acc_X_H[0], 1, 100);
 800202c:	4be9      	ldr	r3, [pc, #932]	; (80023d4 <READ_DATA+0x3ec>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	b299      	uxth	r1, r3
 8002032:	23bf      	movs	r3, #191	; 0xbf
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	18fc      	adds	r4, r7, r3
 8002038:	48e6      	ldr	r0, [pc, #920]	; (80023d4 <READ_DATA+0x3ec>)
 800203a:	2364      	movs	r3, #100	; 0x64
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	2301      	movs	r3, #1
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2358      	movs	r3, #88	; 0x58
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	2229      	movs	r2, #41	; 0x29
 800204c:	f001 ff52 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002050:	0003      	movs	r3, r0
 8002052:	7023      	strb	r3, [r4, #0]
		uint16_t acc_x_raw = (Acc_X_H[0] << 8) | Acc_X_L[0];
 8002054:	4be0      	ldr	r3, [pc, #896]	; (80023d8 <READ_DATA+0x3f0>)
 8002056:	21e4      	movs	r1, #228	; 0xe4
 8002058:	0049      	lsls	r1, r1, #1
 800205a:	185b      	adds	r3, r3, r1
 800205c:	19db      	adds	r3, r3, r7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21a      	sxth	r2, r3
 8002064:	4bdd      	ldr	r3, [pc, #884]	; (80023dc <READ_DATA+0x3f4>)
 8002066:	185b      	adds	r3, r3, r1
 8002068:	19db      	adds	r3, r3, r7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21a      	sxth	r2, r3
 8002072:	21df      	movs	r1, #223	; 0xdf
 8002074:	0049      	lsls	r1, r1, #1
 8002076:	187b      	adds	r3, r7, r1
 8002078:	801a      	strh	r2, [r3, #0]
		if(acc_x_raw > 32768) {
 800207a:	187b      	adds	r3, r7, r1
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	429a      	cmp	r2, r3
 8002084:	d904      	bls.n	8002090 <READ_DATA+0xa8>
			acc_x_raw = (~acc_x_raw + 1);
 8002086:	187b      	adds	r3, r7, r1
 8002088:	187a      	adds	r2, r7, r1
 800208a:	8812      	ldrh	r2, [r2, #0]
 800208c:	4252      	negs	r2, r2
 800208e:	801a      	strh	r2, [r3, #0]
		}
		float acc_x = (9.8 * (acc_x_raw *ACC_SENS) / 1000) - acc_x_offset;
 8002090:	23df      	movs	r3, #223	; 0xdf
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fdb7 	bl	8001c0c <__aeabi_i2d>
 800209e:	4ad0      	ldr	r2, [pc, #832]	; (80023e0 <READ_DATA+0x3f8>)
 80020a0:	4bd0      	ldr	r3, [pc, #832]	; (80023e4 <READ_DATA+0x3fc>)
 80020a2:	f7fe ff6f 	bl	8000f84 <__aeabi_dmul>
 80020a6:	0002      	movs	r2, r0
 80020a8:	000b      	movs	r3, r1
 80020aa:	0010      	movs	r0, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	4ace      	ldr	r2, [pc, #824]	; (80023e8 <READ_DATA+0x400>)
 80020b0:	4bce      	ldr	r3, [pc, #824]	; (80023ec <READ_DATA+0x404>)
 80020b2:	f7fe ff67 	bl	8000f84 <__aeabi_dmul>
 80020b6:	0002      	movs	r2, r0
 80020b8:	000b      	movs	r3, r1
 80020ba:	0010      	movs	r0, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	4bcb      	ldr	r3, [pc, #812]	; (80023f0 <READ_DATA+0x408>)
 80020c2:	f7fe fc71 	bl	80009a8 <__aeabi_ddiv>
 80020c6:	0002      	movs	r2, r0
 80020c8:	000b      	movs	r3, r1
 80020ca:	0014      	movs	r4, r2
 80020cc:	001d      	movs	r5, r3
 80020ce:	4bc9      	ldr	r3, [pc, #804]	; (80023f4 <READ_DATA+0x40c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1c18      	adds	r0, r3, #0
 80020d4:	f7ff fdca 	bl	8001c6c <__aeabi_f2d>
 80020d8:	0002      	movs	r2, r0
 80020da:	000b      	movs	r3, r1
 80020dc:	0020      	movs	r0, r4
 80020de:	0029      	movs	r1, r5
 80020e0:	f7ff fa12 	bl	8001508 <__aeabi_dsub>
 80020e4:	0002      	movs	r2, r0
 80020e6:	000b      	movs	r3, r1
 80020e8:	0010      	movs	r0, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	f7ff fe06 	bl	8001cfc <__aeabi_d2f>
 80020f0:	1c03      	adds	r3, r0, #0
 80020f2:	22bc      	movs	r2, #188	; 0xbc
 80020f4:	0052      	lsls	r2, r2, #1
 80020f6:	18ba      	adds	r2, r7, r2
 80020f8:	6013      	str	r3, [r2, #0]
		uint8_t Acc_Y_L[1];
		HAL_StatusTypeDef Y_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, &Acc_Y_L[0], 1, 100);
 80020fa:	4bb6      	ldr	r3, [pc, #728]	; (80023d4 <READ_DATA+0x3ec>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	b299      	uxth	r1, r3
 8002100:	2378      	movs	r3, #120	; 0x78
 8002102:	33ff      	adds	r3, #255	; 0xff
 8002104:	18fc      	adds	r4, r7, r3
 8002106:	48b3      	ldr	r0, [pc, #716]	; (80023d4 <READ_DATA+0x3ec>)
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2354      	movs	r3, #84	; 0x54
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	222a      	movs	r2, #42	; 0x2a
 800211a:	f001 feeb 	bl	8003ef4 <HAL_I2C_Mem_Read>
 800211e:	0003      	movs	r3, r0
 8002120:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_Y_H[1];
		HAL_StatusTypeDef Y2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, &Acc_Y_H[0], 1, 100);
 8002122:	4bac      	ldr	r3, [pc, #688]	; (80023d4 <READ_DATA+0x3ec>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	b299      	uxth	r1, r3
 8002128:	23bb      	movs	r3, #187	; 0xbb
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	18fc      	adds	r4, r7, r3
 800212e:	48a9      	ldr	r0, [pc, #676]	; (80023d4 <READ_DATA+0x3ec>)
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2350      	movs	r3, #80	; 0x50
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	222b      	movs	r2, #43	; 0x2b
 8002142:	f001 fed7 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002146:	0003      	movs	r3, r0
 8002148:	7023      	strb	r3, [r4, #0]
		uint16_t acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 800214a:	4bab      	ldr	r3, [pc, #684]	; (80023f8 <READ_DATA+0x410>)
 800214c:	21e4      	movs	r1, #228	; 0xe4
 800214e:	0049      	lsls	r1, r1, #1
 8002150:	185b      	adds	r3, r3, r1
 8002152:	19db      	adds	r3, r3, r7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21a      	sxth	r2, r3
 8002158:	4ba8      	ldr	r3, [pc, #672]	; (80023fc <READ_DATA+0x414>)
 800215a:	185b      	adds	r3, r3, r1
 800215c:	19db      	adds	r3, r3, r7
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21a      	sxth	r2, r3
 8002168:	21de      	movs	r1, #222	; 0xde
 800216a:	0049      	lsls	r1, r1, #1
 800216c:	187b      	adds	r3, r7, r1
 800216e:	801a      	strh	r2, [r3, #0]
		if(acc_y_raw > 32768) {
 8002170:	187b      	adds	r3, r7, r1
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	429a      	cmp	r2, r3
 800217a:	d904      	bls.n	8002186 <READ_DATA+0x19e>
			acc_y_raw = (~acc_y_raw + 1);
 800217c:	187b      	adds	r3, r7, r1
 800217e:	187a      	adds	r2, r7, r1
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	4252      	negs	r2, r2
 8002184:	801a      	strh	r2, [r3, #0]
		}
		float acc_y = (9.8 * (acc_y_raw *ACC_SENS) / 1000) - acc_y_offset;
 8002186:	23de      	movs	r3, #222	; 0xde
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff fd3c 	bl	8001c0c <__aeabi_i2d>
 8002194:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <READ_DATA+0x3f8>)
 8002196:	4b93      	ldr	r3, [pc, #588]	; (80023e4 <READ_DATA+0x3fc>)
 8002198:	f7fe fef4 	bl	8000f84 <__aeabi_dmul>
 800219c:	0002      	movs	r2, r0
 800219e:	000b      	movs	r3, r1
 80021a0:	0010      	movs	r0, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	4a90      	ldr	r2, [pc, #576]	; (80023e8 <READ_DATA+0x400>)
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <READ_DATA+0x404>)
 80021a8:	f7fe feec 	bl	8000f84 <__aeabi_dmul>
 80021ac:	0002      	movs	r2, r0
 80021ae:	000b      	movs	r3, r1
 80021b0:	0010      	movs	r0, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <READ_DATA+0x408>)
 80021b8:	f7fe fbf6 	bl	80009a8 <__aeabi_ddiv>
 80021bc:	0002      	movs	r2, r0
 80021be:	000b      	movs	r3, r1
 80021c0:	0014      	movs	r4, r2
 80021c2:	001d      	movs	r5, r3
 80021c4:	4b8e      	ldr	r3, [pc, #568]	; (8002400 <READ_DATA+0x418>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c18      	adds	r0, r3, #0
 80021ca:	f7ff fd4f 	bl	8001c6c <__aeabi_f2d>
 80021ce:	0002      	movs	r2, r0
 80021d0:	000b      	movs	r3, r1
 80021d2:	0020      	movs	r0, r4
 80021d4:	0029      	movs	r1, r5
 80021d6:	f7ff f997 	bl	8001508 <__aeabi_dsub>
 80021da:	0002      	movs	r2, r0
 80021dc:	000b      	movs	r3, r1
 80021de:	0010      	movs	r0, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	f7ff fd8b 	bl	8001cfc <__aeabi_d2f>
 80021e6:	1c03      	adds	r3, r0, #0
 80021e8:	22b8      	movs	r2, #184	; 0xb8
 80021ea:	0052      	lsls	r2, r2, #1
 80021ec:	18ba      	adds	r2, r7, r2
 80021ee:	6013      	str	r3, [r2, #0]
		uint8_t Acc_Z_L[1];
		HAL_StatusTypeDef Z_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, &Acc_Z_L[0], 1, 100);
 80021f0:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <READ_DATA+0x3ec>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	b299      	uxth	r1, r3
 80021f6:	2370      	movs	r3, #112	; 0x70
 80021f8:	33ff      	adds	r3, #255	; 0xff
 80021fa:	18fc      	adds	r4, r7, r3
 80021fc:	4875      	ldr	r0, [pc, #468]	; (80023d4 <READ_DATA+0x3ec>)
 80021fe:	2364      	movs	r3, #100	; 0x64
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	234c      	movs	r3, #76	; 0x4c
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	222c      	movs	r2, #44	; 0x2c
 8002210:	f001 fe70 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002214:	0003      	movs	r3, r0
 8002216:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_Z_H[1];
		HAL_StatusTypeDef Z2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, &Acc_Z_H[0], 1, 100);
 8002218:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <READ_DATA+0x3ec>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	b299      	uxth	r1, r3
 800221e:	23b7      	movs	r3, #183	; 0xb7
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	18fc      	adds	r4, r7, r3
 8002224:	486b      	ldr	r0, [pc, #428]	; (80023d4 <READ_DATA+0x3ec>)
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2348      	movs	r3, #72	; 0x48
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	222d      	movs	r2, #45	; 0x2d
 8002238:	f001 fe5c 	bl	8003ef4 <HAL_I2C_Mem_Read>
 800223c:	0003      	movs	r3, r0
 800223e:	7023      	strb	r3, [r4, #0]
		uint16_t acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002240:	4b70      	ldr	r3, [pc, #448]	; (8002404 <READ_DATA+0x41c>)
 8002242:	21e4      	movs	r1, #228	; 0xe4
 8002244:	0049      	lsls	r1, r1, #1
 8002246:	185b      	adds	r3, r3, r1
 8002248:	19db      	adds	r3, r3, r7
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <READ_DATA+0x420>)
 8002250:	185b      	adds	r3, r3, r1
 8002252:	19db      	adds	r3, r3, r7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21a      	sxth	r2, r3
 800225e:	21dd      	movs	r1, #221	; 0xdd
 8002260:	0049      	lsls	r1, r1, #1
 8002262:	187b      	adds	r3, r7, r1
 8002264:	801a      	strh	r2, [r3, #0]
		if(acc_z_raw > 32768) {
 8002266:	187b      	adds	r3, r7, r1
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	429a      	cmp	r2, r3
 8002270:	d904      	bls.n	800227c <READ_DATA+0x294>
			acc_z_raw = (~acc_z_raw + 1);
 8002272:	187b      	adds	r3, r7, r1
 8002274:	187a      	adds	r2, r7, r1
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	4252      	negs	r2, r2
 800227a:	801a      	strh	r2, [r3, #0]
		}
		float acc_z = (9.8 * (acc_z_raw *ACC_SENS) / 1000) - acc_z_offset;
 800227c:	23dd      	movs	r3, #221	; 0xdd
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff fcc1 	bl	8001c0c <__aeabi_i2d>
 800228a:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <READ_DATA+0x3f8>)
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <READ_DATA+0x3fc>)
 800228e:	f7fe fe79 	bl	8000f84 <__aeabi_dmul>
 8002292:	0002      	movs	r2, r0
 8002294:	000b      	movs	r3, r1
 8002296:	0010      	movs	r0, r2
 8002298:	0019      	movs	r1, r3
 800229a:	4a53      	ldr	r2, [pc, #332]	; (80023e8 <READ_DATA+0x400>)
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <READ_DATA+0x404>)
 800229e:	f7fe fe71 	bl	8000f84 <__aeabi_dmul>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0010      	movs	r0, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <READ_DATA+0x408>)
 80022ae:	f7fe fb7b 	bl	80009a8 <__aeabi_ddiv>
 80022b2:	0002      	movs	r2, r0
 80022b4:	000b      	movs	r3, r1
 80022b6:	0014      	movs	r4, r2
 80022b8:	001d      	movs	r5, r3
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <READ_DATA+0x424>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1c18      	adds	r0, r3, #0
 80022c0:	f7ff fcd4 	bl	8001c6c <__aeabi_f2d>
 80022c4:	0002      	movs	r2, r0
 80022c6:	000b      	movs	r3, r1
 80022c8:	0020      	movs	r0, r4
 80022ca:	0029      	movs	r1, r5
 80022cc:	f7ff f91c 	bl	8001508 <__aeabi_dsub>
 80022d0:	0002      	movs	r2, r0
 80022d2:	000b      	movs	r3, r1
 80022d4:	0010      	movs	r0, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	f7ff fd10 	bl	8001cfc <__aeabi_d2f>
 80022dc:	1c03      	adds	r3, r0, #0
 80022de:	22b4      	movs	r2, #180	; 0xb4
 80022e0:	0052      	lsls	r2, r2, #1
 80022e2:	18ba      	adds	r2, r7, r2
 80022e4:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_X_L[1];
		HAL_StatusTypeDef  X_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, &Gyro_X_L[0], 1, 100);
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <READ_DATA+0x3ec>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	b299      	uxth	r1, r3
 80022ec:	2368      	movs	r3, #104	; 0x68
 80022ee:	33ff      	adds	r3, #255	; 0xff
 80022f0:	18fc      	adds	r4, r7, r3
 80022f2:	4838      	ldr	r0, [pc, #224]	; (80023d4 <READ_DATA+0x3ec>)
 80022f4:	2364      	movs	r3, #100	; 0x64
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	2301      	movs	r3, #1
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2344      	movs	r3, #68	; 0x44
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	2222      	movs	r2, #34	; 0x22
 8002306:	f001 fdf5 	bl	8003ef4 <HAL_I2C_Mem_Read>
 800230a:	0003      	movs	r3, r0
 800230c:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_X_H[1];
		HAL_StatusTypeDef X2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, &Gyro_X_H[0], 1, 100);
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <READ_DATA+0x3ec>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	b299      	uxth	r1, r3
 8002314:	23b3      	movs	r3, #179	; 0xb3
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	18fc      	adds	r4, r7, r3
 800231a:	482e      	ldr	r0, [pc, #184]	; (80023d4 <READ_DATA+0x3ec>)
 800231c:	2364      	movs	r3, #100	; 0x64
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2340      	movs	r3, #64	; 0x40
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	2223      	movs	r2, #35	; 0x23
 800232e:	f001 fde1 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002332:	0003      	movs	r3, r0
 8002334:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <READ_DATA+0x428>)
 8002338:	21e4      	movs	r1, #228	; 0xe4
 800233a:	0049      	lsls	r1, r1, #1
 800233c:	185b      	adds	r3, r3, r1
 800233e:	19db      	adds	r3, r3, r7
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b21a      	sxth	r2, r3
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <READ_DATA+0x42c>)
 8002346:	185b      	adds	r3, r3, r1
 8002348:	19db      	adds	r3, r3, r7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21a      	sxth	r2, r3
 8002354:	21dc      	movs	r1, #220	; 0xdc
 8002356:	0049      	lsls	r1, r1, #1
 8002358:	187b      	adds	r3, r7, r1
 800235a:	801a      	strh	r2, [r3, #0]
		if(gyro_x_raw > 32768) {
 800235c:	187b      	adds	r3, r7, r1
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	429a      	cmp	r2, r3
 8002366:	d904      	bls.n	8002372 <READ_DATA+0x38a>
			gyro_x_raw = (~gyro_x_raw + 1);
 8002368:	187b      	adds	r3, r7, r1
 800236a:	187a      	adds	r2, r7, r1
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	4252      	negs	r2, r2
 8002370:	801a      	strh	r2, [r3, #0]
		}
		float gyro_x = ((gyro_x_raw *GYRO_SENS/1000)) - gyro_x_offset;
 8002372:	23dc      	movs	r3, #220	; 0xdc
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	2246      	movs	r2, #70	; 0x46
 800237c:	4353      	muls	r3, r2
 800237e:	22fa      	movs	r2, #250	; 0xfa
 8002380:	0091      	lsls	r1, r2, #2
 8002382:	0018      	movs	r0, r3
 8002384:	f7fd ff48 	bl	8000218 <__divsi3>
 8002388:	0003      	movs	r3, r0
 800238a:	0018      	movs	r0, r3
 800238c:	f7fe faba 	bl	8000904 <__aeabi_i2f>
 8002390:	1c02      	adds	r2, r0, #0
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <READ_DATA+0x430>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1c19      	adds	r1, r3, #0
 8002398:	1c10      	adds	r0, r2, #0
 800239a:	f7fe f913 	bl	80005c4 <__aeabi_fsub>
 800239e:	1c03      	adds	r3, r0, #0
 80023a0:	22b0      	movs	r2, #176	; 0xb0
 80023a2:	0052      	lsls	r2, r2, #1
 80023a4:	18ba      	adds	r2, r7, r2
 80023a6:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_Y_L[1];
		HAL_StatusTypeDef Y_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, &Gyro_Y_L[0], 1, 100);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <READ_DATA+0x3ec>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	b299      	uxth	r1, r3
 80023ae:	2360      	movs	r3, #96	; 0x60
 80023b0:	33ff      	adds	r3, #255	; 0xff
 80023b2:	18fc      	adds	r4, r7, r3
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <READ_DATA+0x3ec>)
 80023b6:	2364      	movs	r3, #100	; 0x64
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	2301      	movs	r3, #1
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	233c      	movs	r3, #60	; 0x3c
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2301      	movs	r3, #1
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f001 fd94 	bl	8003ef4 <HAL_I2C_Mem_Read>
 80023cc:	0003      	movs	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
 80023d0:	e024      	b.n	800241c <READ_DATA+0x434>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	20000040 	.word	0x20000040
 80023d8:	fffffe90 	.word	0xfffffe90
 80023dc:	fffffe94 	.word	0xfffffe94
 80023e0:	5a1cac08 	.word	0x5a1cac08
 80023e4:	3fdf3b64 	.word	0x3fdf3b64
 80023e8:	9999999a 	.word	0x9999999a
 80023ec:	40239999 	.word	0x40239999
 80023f0:	408f4000 	.word	0x408f4000
 80023f4:	20000028 	.word	0x20000028
 80023f8:	fffffe8c 	.word	0xfffffe8c
 80023fc:	fffffe88 	.word	0xfffffe88
 8002400:	2000002c 	.word	0x2000002c
 8002404:	fffffe84 	.word	0xfffffe84
 8002408:	fffffe80 	.word	0xfffffe80
 800240c:	20000030 	.word	0x20000030
 8002410:	fffffe7c 	.word	0xfffffe7c
 8002414:	fffffe78 	.word	0xfffffe78
 8002418:	20000034 	.word	0x20000034
		uint8_t Gyro_Y_H[1];
		HAL_StatusTypeDef Y2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, &Gyro_Y_H[0], 1, 100);
 800241c:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <READ_DATA+0x66c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	b299      	uxth	r1, r3
 8002422:	23af      	movs	r3, #175	; 0xaf
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	18fc      	adds	r4, r7, r3
 8002428:	488a      	ldr	r0, [pc, #552]	; (8002654 <READ_DATA+0x66c>)
 800242a:	2364      	movs	r3, #100	; 0x64
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	2301      	movs	r3, #1
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	2338      	movs	r3, #56	; 0x38
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2225      	movs	r2, #37	; 0x25
 800243c:	f001 fd5a 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002440:	0003      	movs	r3, r0
 8002442:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <READ_DATA+0x670>)
 8002446:	21e4      	movs	r1, #228	; 0xe4
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	185b      	adds	r3, r3, r1
 800244c:	19db      	adds	r3, r3, r7
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b21a      	sxth	r2, r3
 8002452:	4b82      	ldr	r3, [pc, #520]	; (800265c <READ_DATA+0x674>)
 8002454:	185b      	adds	r3, r3, r1
 8002456:	19db      	adds	r3, r3, r7
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21a      	sxth	r2, r3
 8002462:	21db      	movs	r1, #219	; 0xdb
 8002464:	0049      	lsls	r1, r1, #1
 8002466:	187b      	adds	r3, r7, r1
 8002468:	801a      	strh	r2, [r3, #0]
	    if(gyro_y_raw > 32768) {
 800246a:	187b      	adds	r3, r7, r1
 800246c:	881a      	ldrh	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	429a      	cmp	r2, r3
 8002474:	d904      	bls.n	8002480 <READ_DATA+0x498>
	    	gyro_y_raw = (~gyro_y_raw + 1);
 8002476:	187b      	adds	r3, r7, r1
 8002478:	187a      	adds	r2, r7, r1
 800247a:	8812      	ldrh	r2, [r2, #0]
 800247c:	4252      	negs	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_y = ((gyro_y_raw *GYRO_SENS/1000)) - gyro_y_offset;
 8002480:	23db      	movs	r3, #219	; 0xdb
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2246      	movs	r2, #70	; 0x46
 800248a:	4353      	muls	r3, r2
 800248c:	22fa      	movs	r2, #250	; 0xfa
 800248e:	0091      	lsls	r1, r2, #2
 8002490:	0018      	movs	r0, r3
 8002492:	f7fd fec1 	bl	8000218 <__divsi3>
 8002496:	0003      	movs	r3, r0
 8002498:	0018      	movs	r0, r3
 800249a:	f7fe fa33 	bl	8000904 <__aeabi_i2f>
 800249e:	1c02      	adds	r2, r0, #0
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <READ_DATA+0x678>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1c19      	adds	r1, r3, #0
 80024a6:	1c10      	adds	r0, r2, #0
 80024a8:	f7fe f88c 	bl	80005c4 <__aeabi_fsub>
 80024ac:	1c03      	adds	r3, r0, #0
 80024ae:	22ac      	movs	r2, #172	; 0xac
 80024b0:	0052      	lsls	r2, r2, #1
 80024b2:	18ba      	adds	r2, r7, r2
 80024b4:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_Z_L[1];
		HAL_StatusTypeDef Z_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, &Gyro_Z_L[0], 1, 100);
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <READ_DATA+0x66c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	b299      	uxth	r1, r3
 80024bc:	2358      	movs	r3, #88	; 0x58
 80024be:	33ff      	adds	r3, #255	; 0xff
 80024c0:	18fc      	adds	r4, r7, r3
 80024c2:	4864      	ldr	r0, [pc, #400]	; (8002654 <READ_DATA+0x66c>)
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2334      	movs	r3, #52	; 0x34
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	2226      	movs	r2, #38	; 0x26
 80024d6:	f001 fd0d 	bl	8003ef4 <HAL_I2C_Mem_Read>
 80024da:	0003      	movs	r3, r0
 80024dc:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Z_H[1];
		HAL_StatusTypeDef Z2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, &Gyro_Z_H[0], 1, 100);
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <READ_DATA+0x66c>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	b299      	uxth	r1, r3
 80024e4:	23ab      	movs	r3, #171	; 0xab
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	18fc      	adds	r4, r7, r3
 80024ea:	485a      	ldr	r0, [pc, #360]	; (8002654 <READ_DATA+0x66c>)
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2330      	movs	r3, #48	; 0x30
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	2227      	movs	r2, #39	; 0x27
 80024fe:	f001 fcf9 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <READ_DATA+0x67c>)
 8002508:	21e4      	movs	r1, #228	; 0xe4
 800250a:	0049      	lsls	r1, r1, #1
 800250c:	185b      	adds	r3, r3, r1
 800250e:	19db      	adds	r3, r3, r7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b21a      	sxth	r2, r3
 8002514:	4b54      	ldr	r3, [pc, #336]	; (8002668 <READ_DATA+0x680>)
 8002516:	185b      	adds	r3, r3, r1
 8002518:	19db      	adds	r3, r3, r7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	b21b      	sxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b21a      	sxth	r2, r3
 8002524:	21da      	movs	r1, #218	; 0xda
 8002526:	0049      	lsls	r1, r1, #1
 8002528:	187b      	adds	r3, r7, r1
 800252a:	801a      	strh	r2, [r3, #0]
	    if(gyro_z_raw > 32768) {
 800252c:	187b      	adds	r3, r7, r1
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	429a      	cmp	r2, r3
 8002536:	d904      	bls.n	8002542 <READ_DATA+0x55a>
	    	gyro_z_raw = (~gyro_z_raw + 1);
 8002538:	187b      	adds	r3, r7, r1
 800253a:	187a      	adds	r2, r7, r1
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	4252      	negs	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_z = ((gyro_z_raw *GYRO_SENS/1000)) - gyro_z_offset;
 8002542:	23da      	movs	r3, #218	; 0xda
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2246      	movs	r2, #70	; 0x46
 800254c:	4353      	muls	r3, r2
 800254e:	22fa      	movs	r2, #250	; 0xfa
 8002550:	0091      	lsls	r1, r2, #2
 8002552:	0018      	movs	r0, r3
 8002554:	f7fd fe60 	bl	8000218 <__divsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	0018      	movs	r0, r3
 800255c:	f7fe f9d2 	bl	8000904 <__aeabi_i2f>
 8002560:	1c02      	adds	r2, r0, #0
 8002562:	4b42      	ldr	r3, [pc, #264]	; (800266c <READ_DATA+0x684>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	1c19      	adds	r1, r3, #0
 8002568:	1c10      	adds	r0, r2, #0
 800256a:	f7fe f82b 	bl	80005c4 <__aeabi_fsub>
 800256e:	1c03      	adds	r3, r0, #0
 8002570:	22a8      	movs	r2, #168	; 0xa8
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	18ba      	adds	r2, r7, r2
 8002576:	6013      	str	r3, [r2, #0]

		// THIS WHILE LOOP COLLECTS DATA CONTINUOUSLY UNTIL IT COLLECTS A VALUE WITH A MAGNITUDE > 5 m/s^2 IN ANY OF THE 3 ACC AXES
		// ONCE IT DETECTS ACCELERATION ABOVE THE THRESHOLD VALUE IT PROCEEDS TO SAVE FOLLOWING MAX_DATA_POINTS DATA POINTS


		if ((acc_x > THRESHOLD) || (acc_x < ((-1) * THRESHOLD)) || (acc_y > THRESHOLD) || (acc_y < ((-1) * THRESHOLD)) ||
 8002578:	493d      	ldr	r1, [pc, #244]	; (8002670 <READ_DATA+0x688>)
 800257a:	24bc      	movs	r4, #188	; 0xbc
 800257c:	0064      	lsls	r4, r4, #1
 800257e:	193b      	adds	r3, r7, r4
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f7fd ff5b 	bl	800043c <__aeabi_fcmpgt>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d126      	bne.n	80025d8 <READ_DATA+0x5f0>
 800258a:	493a      	ldr	r1, [pc, #232]	; (8002674 <READ_DATA+0x68c>)
 800258c:	193b      	adds	r3, r7, r4
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	f7fd ff40 	bl	8000414 <__aeabi_fcmplt>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d11f      	bne.n	80025d8 <READ_DATA+0x5f0>
 8002598:	4935      	ldr	r1, [pc, #212]	; (8002670 <READ_DATA+0x688>)
 800259a:	24b8      	movs	r4, #184	; 0xb8
 800259c:	0064      	lsls	r4, r4, #1
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	f7fd ff4b 	bl	800043c <__aeabi_fcmpgt>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d116      	bne.n	80025d8 <READ_DATA+0x5f0>
 80025aa:	4932      	ldr	r1, [pc, #200]	; (8002674 <READ_DATA+0x68c>)
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	f7fd ff30 	bl	8000414 <__aeabi_fcmplt>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d10f      	bne.n	80025d8 <READ_DATA+0x5f0>
 80025b8:	492d      	ldr	r1, [pc, #180]	; (8002670 <READ_DATA+0x688>)
 80025ba:	24b4      	movs	r4, #180	; 0xb4
 80025bc:	0064      	lsls	r4, r4, #1
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	f7fd ff3b 	bl	800043c <__aeabi_fcmpgt>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d106      	bne.n	80025d8 <READ_DATA+0x5f0>
				(acc_z > THRESHOLD) || (acc_z < ((-1) * THRESHOLD))) {
 80025ca:	492a      	ldr	r1, [pc, #168]	; (8002674 <READ_DATA+0x68c>)
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f7fd ff20 	bl	8000414 <__aeabi_fcmplt>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d034      	beq.n	8002642 <READ_DATA+0x65a>
			collect = 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	22e0      	movs	r2, #224	; 0xe0
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	18ba      	adds	r2, r7, r2
 80025e0:	6013      	str	r3, [r2, #0]
			//GPIOB->ODR &= ~GPIO_ODR_11;
			acc_x_data[0] = acc_x;
 80025e2:	2394      	movs	r3, #148	; 0x94
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	22bc      	movs	r2, #188	; 0xbc
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	18ba      	adds	r2, r7, r2
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	601a      	str	r2, [r3, #0]
			acc_y_data[0] = acc_y;
 80025f2:	1c7b      	adds	r3, r7, #1
 80025f4:	33ff      	adds	r3, #255	; 0xff
 80025f6:	22b8      	movs	r2, #184	; 0xb8
 80025f8:	0052      	lsls	r2, r2, #1
 80025fa:	18ba      	adds	r2, r7, r2
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	601a      	str	r2, [r3, #0]
			acc_z_data[0] = acc_z;
 8002600:	23d8      	movs	r3, #216	; 0xd8
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	22b4      	movs	r2, #180	; 0xb4
 8002606:	0052      	lsls	r2, r2, #1
 8002608:	18ba      	adds	r2, r7, r2
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	601a      	str	r2, [r3, #0]
			gyro_x_data[0] = gyro_x;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <READ_DATA+0x690>)
 8002610:	21e4      	movs	r1, #228	; 0xe4
 8002612:	0049      	lsls	r1, r1, #1
 8002614:	185b      	adds	r3, r3, r1
 8002616:	19db      	adds	r3, r3, r7
 8002618:	22b0      	movs	r2, #176	; 0xb0
 800261a:	0052      	lsls	r2, r2, #1
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	601a      	str	r2, [r3, #0]
			gyro_y_data[0] = gyro_y;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <READ_DATA+0x694>)
 8002624:	185b      	adds	r3, r3, r1
 8002626:	19db      	adds	r3, r3, r7
 8002628:	22ac      	movs	r2, #172	; 0xac
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	18ba      	adds	r2, r7, r2
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	601a      	str	r2, [r3, #0]
			gyro_z_data[0] = gyro_z;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <READ_DATA+0x698>)
 8002634:	185b      	adds	r3, r3, r1
 8002636:	19db      	adds	r3, r3, r7
 8002638:	22a8      	movs	r2, #168	; 0xa8
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	18ba      	adds	r2, r7, r2
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	601a      	str	r2, [r3, #0]
	while (!collect){
 8002642:	23e0      	movs	r3, #224	; 0xe0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d100      	bne.n	8002650 <READ_DATA+0x668>
 800264e:	e4d9      	b.n	8002004 <READ_DATA+0x1c>
		}
	}


	while(data_index != MAX_DATA_POINTS) {
 8002650:	e2fd      	b.n	8002c4e <READ_DATA+0xc66>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	20000040 	.word	0x20000040
 8002658:	fffffe74 	.word	0xfffffe74
 800265c:	fffffe70 	.word	0xfffffe70
 8002660:	20000038 	.word	0x20000038
 8002664:	fffffe6c 	.word	0xfffffe6c
 8002668:	fffffe68 	.word	0xfffffe68
 800266c:	2000003c 	.word	0x2000003c
 8002670:	41200000 	.word	0x41200000
 8002674:	c1200000 	.word	0xc1200000
 8002678:	fffffee8 	.word	0xfffffee8
 800267c:	fffffec0 	.word	0xfffffec0
 8002680:	fffffe98 	.word	0xfffffe98
		//Linear acceleration sesitivity: FS +-16 is .488
		//Angular rate sensitivity: FS = 2000 is 70

		//Read Accelerometer X
		uint8_t Acc_X_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, &Acc_X_L[0], 1, 100);
 8002684:	4bf4      	ldr	r3, [pc, #976]	; (8002a58 <READ_DATA+0xa70>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	b299      	uxth	r1, r3
 800268a:	48f3      	ldr	r0, [pc, #972]	; (8002a58 <READ_DATA+0xa70>)
 800268c:	2364      	movs	r3, #100	; 0x64
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	2301      	movs	r3, #1
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	232c      	movs	r3, #44	; 0x2c
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	2228      	movs	r2, #40	; 0x28
 800269e:	f001 fc29 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint8_t Acc_X_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, &Acc_X_H[0], 1, 100);
 80026a2:	4bed      	ldr	r3, [pc, #948]	; (8002a58 <READ_DATA+0xa70>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	b299      	uxth	r1, r3
 80026a8:	48eb      	ldr	r0, [pc, #940]	; (8002a58 <READ_DATA+0xa70>)
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2328      	movs	r3, #40	; 0x28
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	2229      	movs	r2, #41	; 0x29
 80026bc:	f001 fc1a 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint16_t acc_x_raw = (Acc_X_H[0] << 8) | Acc_X_L[0];
 80026c0:	4be6      	ldr	r3, [pc, #920]	; (8002a5c <READ_DATA+0xa74>)
 80026c2:	21e4      	movs	r1, #228	; 0xe4
 80026c4:	0049      	lsls	r1, r1, #1
 80026c6:	185b      	adds	r3, r3, r1
 80026c8:	19db      	adds	r3, r3, r7
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	4be3      	ldr	r3, [pc, #908]	; (8002a60 <READ_DATA+0xa78>)
 80026d2:	185b      	adds	r3, r3, r1
 80026d4:	19db      	adds	r3, r3, r7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b21a      	sxth	r2, r3
 80026de:	21d9      	movs	r1, #217	; 0xd9
 80026e0:	0049      	lsls	r1, r1, #1
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	801a      	strh	r2, [r3, #0]
	    if(acc_x_raw > 32768) {
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d904      	bls.n	80026fc <READ_DATA+0x714>
	    	acc_x_raw = (~acc_x_raw + 1);
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	4252      	negs	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
	    }
	    float acc_x = (9.8 * (acc_x_raw *ACC_SENS) / 1000) - acc_x_offset;
 80026fc:	23d9      	movs	r3, #217	; 0xd9
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fa81 	bl	8001c0c <__aeabi_i2d>
 800270a:	4ad6      	ldr	r2, [pc, #856]	; (8002a64 <READ_DATA+0xa7c>)
 800270c:	4bd6      	ldr	r3, [pc, #856]	; (8002a68 <READ_DATA+0xa80>)
 800270e:	f7fe fc39 	bl	8000f84 <__aeabi_dmul>
 8002712:	0002      	movs	r2, r0
 8002714:	000b      	movs	r3, r1
 8002716:	0010      	movs	r0, r2
 8002718:	0019      	movs	r1, r3
 800271a:	4ad4      	ldr	r2, [pc, #848]	; (8002a6c <READ_DATA+0xa84>)
 800271c:	4bd4      	ldr	r3, [pc, #848]	; (8002a70 <READ_DATA+0xa88>)
 800271e:	f7fe fc31 	bl	8000f84 <__aeabi_dmul>
 8002722:	0002      	movs	r2, r0
 8002724:	000b      	movs	r3, r1
 8002726:	0010      	movs	r0, r2
 8002728:	0019      	movs	r1, r3
 800272a:	2200      	movs	r2, #0
 800272c:	4bd1      	ldr	r3, [pc, #836]	; (8002a74 <READ_DATA+0xa8c>)
 800272e:	f7fe f93b 	bl	80009a8 <__aeabi_ddiv>
 8002732:	0002      	movs	r2, r0
 8002734:	000b      	movs	r3, r1
 8002736:	0014      	movs	r4, r2
 8002738:	001d      	movs	r5, r3
 800273a:	4bcf      	ldr	r3, [pc, #828]	; (8002a78 <READ_DATA+0xa90>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1c18      	adds	r0, r3, #0
 8002740:	f7ff fa94 	bl	8001c6c <__aeabi_f2d>
 8002744:	0002      	movs	r2, r0
 8002746:	000b      	movs	r3, r1
 8002748:	0020      	movs	r0, r4
 800274a:	0029      	movs	r1, r5
 800274c:	f7fe fedc 	bl	8001508 <__aeabi_dsub>
 8002750:	0002      	movs	r2, r0
 8002752:	000b      	movs	r3, r1
 8002754:	0010      	movs	r0, r2
 8002756:	0019      	movs	r1, r3
 8002758:	f7ff fad0 	bl	8001cfc <__aeabi_d2f>
 800275c:	1c03      	adds	r3, r0, #0
 800275e:	22d0      	movs	r2, #208	; 0xd0
 8002760:	0052      	lsls	r2, r2, #1
 8002762:	18ba      	adds	r2, r7, r2
 8002764:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Y
		uint8_t Acc_Y_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, &Acc_Y_L[0], 1, 100);
 8002766:	4bbc      	ldr	r3, [pc, #752]	; (8002a58 <READ_DATA+0xa70>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	b299      	uxth	r1, r3
 800276c:	48ba      	ldr	r0, [pc, #744]	; (8002a58 <READ_DATA+0xa70>)
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	2301      	movs	r3, #1
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2324      	movs	r3, #36	; 0x24
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	222a      	movs	r2, #42	; 0x2a
 8002780:	f001 fbb8 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint8_t Acc_Y_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, &Acc_Y_H[0], 1, 100);
 8002784:	4bb4      	ldr	r3, [pc, #720]	; (8002a58 <READ_DATA+0xa70>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	b299      	uxth	r1, r3
 800278a:	48b3      	ldr	r0, [pc, #716]	; (8002a58 <READ_DATA+0xa70>)
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	9302      	str	r3, [sp, #8]
 8002790:	2301      	movs	r3, #1
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2320      	movs	r3, #32
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2301      	movs	r3, #1
 800279c:	222b      	movs	r2, #43	; 0x2b
 800279e:	f001 fba9 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint16_t acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 80027a2:	4bb6      	ldr	r3, [pc, #728]	; (8002a7c <READ_DATA+0xa94>)
 80027a4:	21e4      	movs	r1, #228	; 0xe4
 80027a6:	0049      	lsls	r1, r1, #1
 80027a8:	185b      	adds	r3, r3, r1
 80027aa:	19db      	adds	r3, r3, r7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	4bb3      	ldr	r3, [pc, #716]	; (8002a80 <READ_DATA+0xa98>)
 80027b2:	185b      	adds	r3, r3, r1
 80027b4:	19db      	adds	r3, r3, r7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b21a      	sxth	r2, r3
 80027c0:	21d8      	movs	r1, #216	; 0xd8
 80027c2:	0049      	lsls	r1, r1, #1
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	801a      	strh	r2, [r3, #0]
	    if(acc_y_raw > 32768) {
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d904      	bls.n	80027de <READ_DATA+0x7f6>
	    	acc_y_raw = (~acc_y_raw + 1);
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	187a      	adds	r2, r7, r1
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	4252      	negs	r2, r2
 80027dc:	801a      	strh	r2, [r3, #0]
	    }
		float acc_y = (9.8 * (acc_y_raw *ACC_SENS) / 1000) - acc_y_offset;
 80027de:	23d8      	movs	r3, #216	; 0xd8
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff fa10 	bl	8001c0c <__aeabi_i2d>
 80027ec:	4a9d      	ldr	r2, [pc, #628]	; (8002a64 <READ_DATA+0xa7c>)
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <READ_DATA+0xa80>)
 80027f0:	f7fe fbc8 	bl	8000f84 <__aeabi_dmul>
 80027f4:	0002      	movs	r2, r0
 80027f6:	000b      	movs	r3, r1
 80027f8:	0010      	movs	r0, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <READ_DATA+0xa84>)
 80027fe:	4b9c      	ldr	r3, [pc, #624]	; (8002a70 <READ_DATA+0xa88>)
 8002800:	f7fe fbc0 	bl	8000f84 <__aeabi_dmul>
 8002804:	0002      	movs	r2, r0
 8002806:	000b      	movs	r3, r1
 8002808:	0010      	movs	r0, r2
 800280a:	0019      	movs	r1, r3
 800280c:	2200      	movs	r2, #0
 800280e:	4b99      	ldr	r3, [pc, #612]	; (8002a74 <READ_DATA+0xa8c>)
 8002810:	f7fe f8ca 	bl	80009a8 <__aeabi_ddiv>
 8002814:	0002      	movs	r2, r0
 8002816:	000b      	movs	r3, r1
 8002818:	0014      	movs	r4, r2
 800281a:	001d      	movs	r5, r3
 800281c:	4b99      	ldr	r3, [pc, #612]	; (8002a84 <READ_DATA+0xa9c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c18      	adds	r0, r3, #0
 8002822:	f7ff fa23 	bl	8001c6c <__aeabi_f2d>
 8002826:	0002      	movs	r2, r0
 8002828:	000b      	movs	r3, r1
 800282a:	0020      	movs	r0, r4
 800282c:	0029      	movs	r1, r5
 800282e:	f7fe fe6b 	bl	8001508 <__aeabi_dsub>
 8002832:	0002      	movs	r2, r0
 8002834:	000b      	movs	r3, r1
 8002836:	0010      	movs	r0, r2
 8002838:	0019      	movs	r1, r3
 800283a:	f7ff fa5f 	bl	8001cfc <__aeabi_d2f>
 800283e:	1c03      	adds	r3, r0, #0
 8002840:	22ce      	movs	r2, #206	; 0xce
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	18ba      	adds	r2, r7, r2
 8002846:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Z
		uint8_t Acc_Z_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, &Acc_Z_L[0], 1, 100);
 8002848:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <READ_DATA+0xa70>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	b299      	uxth	r1, r3
 800284e:	4882      	ldr	r0, [pc, #520]	; (8002a58 <READ_DATA+0xa70>)
 8002850:	2364      	movs	r3, #100	; 0x64
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	2301      	movs	r3, #1
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	231c      	movs	r3, #28
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	222c      	movs	r2, #44	; 0x2c
 8002862:	f001 fb47 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint8_t Acc_Z_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, &Acc_Z_H[0], 1, 100);
 8002866:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <READ_DATA+0xa70>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	b299      	uxth	r1, r3
 800286c:	487a      	ldr	r0, [pc, #488]	; (8002a58 <READ_DATA+0xa70>)
 800286e:	2364      	movs	r3, #100	; 0x64
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2318      	movs	r3, #24
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	222d      	movs	r2, #45	; 0x2d
 8002880:	f001 fb38 	bl	8003ef4 <HAL_I2C_Mem_Read>
		uint16_t acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002884:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <READ_DATA+0xaa0>)
 8002886:	21e4      	movs	r1, #228	; 0xe4
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	185b      	adds	r3, r3, r1
 800288c:	19db      	adds	r3, r3, r7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b21a      	sxth	r2, r3
 8002892:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <READ_DATA+0xaa4>)
 8002894:	185b      	adds	r3, r3, r1
 8002896:	19db      	adds	r3, r3, r7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21b      	sxth	r3, r3
 800289e:	4313      	orrs	r3, r2
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	21d7      	movs	r1, #215	; 0xd7
 80028a4:	0049      	lsls	r1, r1, #1
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	801a      	strh	r2, [r3, #0]
	    if(acc_z_raw > 32768) {
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d904      	bls.n	80028c0 <READ_DATA+0x8d8>
	    	acc_z_raw = (~acc_z_raw + 1);
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	187a      	adds	r2, r7, r1
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	4252      	negs	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
	    }
		float acc_z = (9.8 * (acc_z_raw *ACC_SENS) / 1000) - acc_z_offset;
 80028c0:	23d7      	movs	r3, #215	; 0xd7
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff f99f 	bl	8001c0c <__aeabi_i2d>
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <READ_DATA+0xa7c>)
 80028d0:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <READ_DATA+0xa80>)
 80028d2:	f7fe fb57 	bl	8000f84 <__aeabi_dmul>
 80028d6:	0002      	movs	r2, r0
 80028d8:	000b      	movs	r3, r1
 80028da:	0010      	movs	r0, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <READ_DATA+0xa84>)
 80028e0:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <READ_DATA+0xa88>)
 80028e2:	f7fe fb4f 	bl	8000f84 <__aeabi_dmul>
 80028e6:	0002      	movs	r2, r0
 80028e8:	000b      	movs	r3, r1
 80028ea:	0010      	movs	r0, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	2200      	movs	r2, #0
 80028f0:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <READ_DATA+0xa8c>)
 80028f2:	f7fe f859 	bl	80009a8 <__aeabi_ddiv>
 80028f6:	0002      	movs	r2, r0
 80028f8:	000b      	movs	r3, r1
 80028fa:	0014      	movs	r4, r2
 80028fc:	001d      	movs	r5, r3
 80028fe:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <READ_DATA+0xaa8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1c18      	adds	r0, r3, #0
 8002904:	f7ff f9b2 	bl	8001c6c <__aeabi_f2d>
 8002908:	0002      	movs	r2, r0
 800290a:	000b      	movs	r3, r1
 800290c:	0020      	movs	r0, r4
 800290e:	0029      	movs	r1, r5
 8002910:	f7fe fdfa 	bl	8001508 <__aeabi_dsub>
 8002914:	0002      	movs	r2, r0
 8002916:	000b      	movs	r3, r1
 8002918:	0010      	movs	r0, r2
 800291a:	0019      	movs	r1, r3
 800291c:	f7ff f9ee 	bl	8001cfc <__aeabi_d2f>
 8002920:	1c03      	adds	r3, r0, #0
 8002922:	22cc      	movs	r2, #204	; 0xcc
 8002924:	0052      	lsls	r2, r2, #1
 8002926:	18ba      	adds	r2, r7, r2
 8002928:	6013      	str	r3, [r2, #0]

		//Read Gyroscope X
		uint8_t Gyro_X_L[1];
		HAL_StatusTypeDef  X = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, &Gyro_X_L[0], 1, 100);
 800292a:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <READ_DATA+0xa70>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	b299      	uxth	r1, r3
 8002930:	2398      	movs	r3, #152	; 0x98
 8002932:	33ff      	adds	r3, #255	; 0xff
 8002934:	18fc      	adds	r4, r7, r3
 8002936:	4848      	ldr	r0, [pc, #288]	; (8002a58 <READ_DATA+0xa70>)
 8002938:	2364      	movs	r3, #100	; 0x64
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	2301      	movs	r3, #1
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2314      	movs	r3, #20
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2301      	movs	r3, #1
 8002948:	2222      	movs	r2, #34	; 0x22
 800294a:	f001 fad3 	bl	8003ef4 <HAL_I2C_Mem_Read>
 800294e:	0003      	movs	r3, r0
 8002950:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_X_H[1];
		HAL_StatusTypeDef X2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, &Gyro_X_H[0], 1, 100);
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <READ_DATA+0xa70>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	b299      	uxth	r1, r3
 8002958:	23cb      	movs	r3, #203	; 0xcb
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	18fc      	adds	r4, r7, r3
 800295e:	483e      	ldr	r0, [pc, #248]	; (8002a58 <READ_DATA+0xa70>)
 8002960:	2364      	movs	r3, #100	; 0x64
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2301      	movs	r3, #1
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2310      	movs	r3, #16
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	2223      	movs	r2, #35	; 0x23
 8002972:	f001 fabf 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002976:	0003      	movs	r3, r0
 8002978:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <READ_DATA+0xaac>)
 800297c:	21e4      	movs	r1, #228	; 0xe4
 800297e:	0049      	lsls	r1, r1, #1
 8002980:	185b      	adds	r3, r3, r1
 8002982:	19db      	adds	r3, r3, r7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <READ_DATA+0xab0>)
 800298a:	185b      	adds	r3, r3, r1
 800298c:	19db      	adds	r3, r3, r7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21b      	sxth	r3, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	b21a      	sxth	r2, r3
 8002998:	21d6      	movs	r1, #214	; 0xd6
 800299a:	0049      	lsls	r1, r1, #1
 800299c:	187b      	adds	r3, r7, r1
 800299e:	801a      	strh	r2, [r3, #0]
	    if(gyro_x_raw > 32768) {
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d904      	bls.n	80029b6 <READ_DATA+0x9ce>
	    	gyro_x_raw = (~gyro_x_raw + 1);
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	187a      	adds	r2, r7, r1
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	4252      	negs	r2, r2
 80029b4:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_x = ((gyro_x_raw *GYRO_SENS/1000)) - gyro_x_offset;
 80029b6:	23d6      	movs	r3, #214	; 0xd6
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	2246      	movs	r2, #70	; 0x46
 80029c0:	4353      	muls	r3, r2
 80029c2:	22fa      	movs	r2, #250	; 0xfa
 80029c4:	0091      	lsls	r1, r2, #2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fd fc26 	bl	8000218 <__divsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7fd ff98 	bl	8000904 <__aeabi_i2f>
 80029d4:	1c02      	adds	r2, r0, #0
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <READ_DATA+0xab4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1c19      	adds	r1, r3, #0
 80029dc:	1c10      	adds	r0, r2, #0
 80029de:	f7fd fdf1 	bl	80005c4 <__aeabi_fsub>
 80029e2:	1c03      	adds	r3, r0, #0
 80029e4:	22c8      	movs	r2, #200	; 0xc8
 80029e6:	0052      	lsls	r2, r2, #1
 80029e8:	18ba      	adds	r2, r7, r2
 80029ea:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Y
		uint8_t Gyro_Y_L[1];
		HAL_StatusTypeDef Y = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, &Gyro_Y_L[0], 1, 100);
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <READ_DATA+0xa70>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	b299      	uxth	r1, r3
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	33ff      	adds	r3, #255	; 0xff
 80029f6:	18fc      	adds	r4, r7, r3
 80029f8:	4817      	ldr	r0, [pc, #92]	; (8002a58 <READ_DATA+0xa70>)
 80029fa:	2364      	movs	r3, #100	; 0x64
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	2301      	movs	r3, #1
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	230c      	movs	r3, #12
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f001 fa72 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002a10:	0003      	movs	r3, r0
 8002a12:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Y_H[1];
		HAL_StatusTypeDef Y2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, &Gyro_Y_H[0], 1, 100);
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <READ_DATA+0xa70>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	23c7      	movs	r3, #199	; 0xc7
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	18fc      	adds	r4, r7, r3
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <READ_DATA+0xa70>)
 8002a22:	2364      	movs	r3, #100	; 0x64
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	2225      	movs	r2, #37	; 0x25
 8002a34:	f001 fa5e 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <READ_DATA+0xab8>)
 8002a3e:	21e4      	movs	r1, #228	; 0xe4
 8002a40:	0049      	lsls	r1, r1, #1
 8002a42:	185b      	adds	r3, r3, r1
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <READ_DATA+0xabc>)
 8002a4c:	185b      	adds	r3, r3, r1
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	e028      	b.n	8002aa8 <READ_DATA+0xac0>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	20000040 	.word	0x20000040
 8002a5c:	fffffe60 	.word	0xfffffe60
 8002a60:	fffffe64 	.word	0xfffffe64
 8002a64:	5a1cac08 	.word	0x5a1cac08
 8002a68:	3fdf3b64 	.word	0x3fdf3b64
 8002a6c:	9999999a 	.word	0x9999999a
 8002a70:	40239999 	.word	0x40239999
 8002a74:	408f4000 	.word	0x408f4000
 8002a78:	20000028 	.word	0x20000028
 8002a7c:	fffffe5c 	.word	0xfffffe5c
 8002a80:	fffffe58 	.word	0xfffffe58
 8002a84:	2000002c 	.word	0x2000002c
 8002a88:	fffffe54 	.word	0xfffffe54
 8002a8c:	fffffe50 	.word	0xfffffe50
 8002a90:	20000030 	.word	0x20000030
 8002a94:	fffffe4c 	.word	0xfffffe4c
 8002a98:	fffffe48 	.word	0xfffffe48
 8002a9c:	20000034 	.word	0x20000034
 8002aa0:	fffffe44 	.word	0xfffffe44
 8002aa4:	fffffe40 	.word	0xfffffe40
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	21d5      	movs	r1, #213	; 0xd5
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	801a      	strh	r2, [r3, #0]
	    if(gyro_y_raw > 32768) {
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d904      	bls.n	8002acc <READ_DATA+0xae4>
	    	gyro_y_raw = (~gyro_y_raw + 1);
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	187a      	adds	r2, r7, r1
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	4252      	negs	r2, r2
 8002aca:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_y = ((gyro_y_raw *GYRO_SENS/1000)) - gyro_y_offset;
 8002acc:	23d5      	movs	r3, #213	; 0xd5
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	2246      	movs	r2, #70	; 0x46
 8002ad6:	4353      	muls	r3, r2
 8002ad8:	22fa      	movs	r2, #250	; 0xfa
 8002ada:	0091      	lsls	r1, r2, #2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fb9b 	bl	8000218 <__divsi3>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fd ff0d 	bl	8000904 <__aeabi_i2f>
 8002aea:	1c02      	adds	r2, r0, #0
 8002aec:	4b8e      	ldr	r3, [pc, #568]	; (8002d28 <READ_DATA+0xd40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1c19      	adds	r1, r3, #0
 8002af2:	1c10      	adds	r0, r2, #0
 8002af4:	f7fd fd66 	bl	80005c4 <__aeabi_fsub>
 8002af8:	1c03      	adds	r3, r0, #0
 8002afa:	22c4      	movs	r2, #196	; 0xc4
 8002afc:	0052      	lsls	r2, r2, #1
 8002afe:	18ba      	adds	r2, r7, r2
 8002b00:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Z
		uint8_t Gyro_Z_L[1];
		HAL_StatusTypeDef Z = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, &Gyro_Z_L[0], 1, 100);
 8002b02:	4b8a      	ldr	r3, [pc, #552]	; (8002d2c <READ_DATA+0xd44>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	b299      	uxth	r1, r3
 8002b08:	2388      	movs	r3, #136	; 0x88
 8002b0a:	33ff      	adds	r3, #255	; 0xff
 8002b0c:	18fc      	adds	r4, r7, r3
 8002b0e:	4887      	ldr	r0, [pc, #540]	; (8002d2c <READ_DATA+0xd44>)
 8002b10:	2364      	movs	r3, #100	; 0x64
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	2301      	movs	r3, #1
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2226      	movs	r2, #38	; 0x26
 8002b20:	f001 f9e8 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002b24:	0003      	movs	r3, r0
 8002b26:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Z_H[1];
		HAL_StatusTypeDef Z2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, &Gyro_Z_H[0], 1, 100);
 8002b28:	4b80      	ldr	r3, [pc, #512]	; (8002d2c <READ_DATA+0xd44>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	23c3      	movs	r3, #195	; 0xc3
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	18fc      	adds	r4, r7, r3
 8002b34:	487d      	ldr	r0, [pc, #500]	; (8002d2c <READ_DATA+0xd44>)
 8002b36:	2364      	movs	r3, #100	; 0x64
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	003b      	movs	r3, r7
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2301      	movs	r3, #1
 8002b44:	2227      	movs	r2, #39	; 0x27
 8002b46:	f001 f9d5 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 8002b4e:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <READ_DATA+0xd48>)
 8002b50:	21e4      	movs	r1, #228	; 0xe4
 8002b52:	0049      	lsls	r1, r1, #1
 8002b54:	185b      	adds	r3, r3, r1
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b21a      	sxth	r2, r3
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <READ_DATA+0xd4c>)
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	19db      	adds	r3, r3, r7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21a      	sxth	r2, r3
 8002b6c:	21d4      	movs	r1, #212	; 0xd4
 8002b6e:	0049      	lsls	r1, r1, #1
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	801a      	strh	r2, [r3, #0]
	    if(gyro_z_raw > 32768) {
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d904      	bls.n	8002b8a <READ_DATA+0xba2>
	    	gyro_z_raw = (~gyro_z_raw + 1);
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	187a      	adds	r2, r7, r1
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	4252      	negs	r2, r2
 8002b88:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_z = ((gyro_z_raw *GYRO_SENS/1000)) - gyro_z_offset;
 8002b8a:	23d4      	movs	r3, #212	; 0xd4
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	2246      	movs	r2, #70	; 0x46
 8002b94:	4353      	muls	r3, r2
 8002b96:	22fa      	movs	r2, #250	; 0xfa
 8002b98:	0091      	lsls	r1, r2, #2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fb3c 	bl	8000218 <__divsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fd feae 	bl	8000904 <__aeabi_i2f>
 8002ba8:	1c02      	adds	r2, r0, #0
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <READ_DATA+0xd50>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c19      	adds	r1, r3, #0
 8002bb0:	1c10      	adds	r0, r2, #0
 8002bb2:	f7fd fd07 	bl	80005c4 <__aeabi_fsub>
 8002bb6:	1c03      	adds	r3, r0, #0
 8002bb8:	25c0      	movs	r5, #192	; 0xc0
 8002bba:	006d      	lsls	r5, r5, #1
 8002bbc:	197a      	adds	r2, r7, r5
 8002bbe:	6013      	str	r3, [r2, #0]

	    // Store the data
	    acc_x_data[data_index] = acc_x;
 8002bc0:	2394      	movs	r3, #148	; 0x94
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	20e2      	movs	r0, #226	; 0xe2
 8002bc8:	0040      	lsls	r0, r0, #1
 8002bca:	183a      	adds	r2, r7, r0
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	21d0      	movs	r1, #208	; 0xd0
 8002bd2:	0049      	lsls	r1, r1, #1
 8002bd4:	1879      	adds	r1, r7, r1
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	50d1      	str	r1, [r2, r3]
	    acc_y_data[data_index] = acc_y;
 8002bda:	1c7b      	adds	r3, r7, #1
 8002bdc:	33ff      	adds	r3, #255	; 0xff
 8002bde:	183a      	adds	r2, r7, r0
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	21ce      	movs	r1, #206	; 0xce
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	1879      	adds	r1, r7, r1
 8002bea:	6809      	ldr	r1, [r1, #0]
 8002bec:	50d1      	str	r1, [r2, r3]
	    acc_z_data[data_index] = acc_z;
 8002bee:	23d8      	movs	r3, #216	; 0xd8
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	183a      	adds	r2, r7, r0
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	21cc      	movs	r1, #204	; 0xcc
 8002bfa:	0049      	lsls	r1, r1, #1
 8002bfc:	1879      	adds	r1, r7, r1
 8002bfe:	6809      	ldr	r1, [r1, #0]
 8002c00:	50d1      	str	r1, [r2, r3]
	    gyro_x_data[data_index] = gyro_x;
 8002c02:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <READ_DATA+0xd54>)
 8002c04:	24e4      	movs	r4, #228	; 0xe4
 8002c06:	0064      	lsls	r4, r4, #1
 8002c08:	191b      	adds	r3, r3, r4
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	183a      	adds	r2, r7, r0
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	21c8      	movs	r1, #200	; 0xc8
 8002c14:	0049      	lsls	r1, r1, #1
 8002c16:	1879      	adds	r1, r7, r1
 8002c18:	6809      	ldr	r1, [r1, #0]
 8002c1a:	50d1      	str	r1, [r2, r3]
	    gyro_y_data[data_index] = gyro_y;
 8002c1c:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <READ_DATA+0xd58>)
 8002c1e:	191b      	adds	r3, r3, r4
 8002c20:	19db      	adds	r3, r3, r7
 8002c22:	183a      	adds	r2, r7, r0
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	21c4      	movs	r1, #196	; 0xc4
 8002c2a:	0049      	lsls	r1, r1, #1
 8002c2c:	1879      	adds	r1, r7, r1
 8002c2e:	6809      	ldr	r1, [r1, #0]
 8002c30:	50d1      	str	r1, [r2, r3]
	    gyro_z_data[data_index] = gyro_z;
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <READ_DATA+0xd5c>)
 8002c34:	191b      	adds	r3, r3, r4
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	183a      	adds	r2, r7, r0
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	1979      	adds	r1, r7, r5
 8002c40:	6809      	ldr	r1, [r1, #0]
 8002c42:	50d1      	str	r1, [r2, r3]

	    // Increment data_index (wrap around if it exceeds MAX_DATA_POINTS)
	    data_index++;
 8002c44:	183b      	adds	r3, r7, r0
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	183a      	adds	r2, r7, r0
 8002c4c:	6013      	str	r3, [r2, #0]
	while(data_index != MAX_DATA_POINTS) {
 8002c4e:	23e2      	movs	r3, #226	; 0xe2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b0a      	cmp	r3, #10
 8002c58:	d000      	beq.n	8002c5c <READ_DATA+0xc74>
 8002c5a:	e513      	b.n	8002684 <READ_DATA+0x69c>
	}

	int i;
	for (i = 0; i < MAX_DATA_POINTS; i++) { // SEND DATA
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	22d2      	movs	r2, #210	; 0xd2
 8002c60:	0052      	lsls	r2, r2, #1
 8002c62:	18ba      	adds	r2, r7, r2
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e04f      	b.n	8002d08 <READ_DATA+0xd20>
		HAL_UART_Transmit(&huart6, &acc_x_data[i], 4, HAL_MAX_DELAY);
 8002c68:	2394      	movs	r3, #148	; 0x94
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	18fa      	adds	r2, r7, r3
 8002c6e:	24d2      	movs	r4, #210	; 0xd2
 8002c70:	0064      	lsls	r4, r4, #1
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18d1      	adds	r1, r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	425b      	negs	r3, r3
 8002c7e:	4832      	ldr	r0, [pc, #200]	; (8002d48 <READ_DATA+0xd60>)
 8002c80:	2204      	movs	r2, #4
 8002c82:	f002 fc5d 	bl	8005540 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &acc_y_data[i], 4, HAL_MAX_DELAY);
 8002c86:	1c7a      	adds	r2, r7, #1
 8002c88:	32ff      	adds	r2, #255	; 0xff
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	18d1      	adds	r1, r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	425b      	negs	r3, r3
 8002c96:	482c      	ldr	r0, [pc, #176]	; (8002d48 <READ_DATA+0xd60>)
 8002c98:	2204      	movs	r2, #4
 8002c9a:	f002 fc51 	bl	8005540 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &acc_z_data[i], 4, HAL_MAX_DELAY);
 8002c9e:	23d8      	movs	r3, #216	; 0xd8
 8002ca0:	18fa      	adds	r2, r7, r3
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	18d1      	adds	r1, r2, r3
 8002caa:	2301      	movs	r3, #1
 8002cac:	425b      	negs	r3, r3
 8002cae:	4826      	ldr	r0, [pc, #152]	; (8002d48 <READ_DATA+0xd60>)
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	f002 fc45 	bl	8005540 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &gyro_x_data[i], 4, HAL_MAX_DELAY);
 8002cb6:	23b0      	movs	r3, #176	; 0xb0
 8002cb8:	18fa      	adds	r2, r7, r3
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	18d1      	adds	r1, r2, r3
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	4820      	ldr	r0, [pc, #128]	; (8002d48 <READ_DATA+0xd60>)
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f002 fc39 	bl	8005540 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &gyro_y_data[i], 4, HAL_MAX_DELAY);
 8002cce:	2388      	movs	r3, #136	; 0x88
 8002cd0:	18fa      	adds	r2, r7, r3
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	18d1      	adds	r1, r2, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	425b      	negs	r3, r3
 8002cde:	481a      	ldr	r0, [pc, #104]	; (8002d48 <READ_DATA+0xd60>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	f002 fc2d 	bl	8005540 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &gyro_z_data[i], 4, HAL_MAX_DELAY);
 8002ce6:	2360      	movs	r3, #96	; 0x60
 8002ce8:	18fa      	adds	r2, r7, r3
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	18d1      	adds	r1, r2, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	425b      	negs	r3, r3
 8002cf6:	4814      	ldr	r0, [pc, #80]	; (8002d48 <READ_DATA+0xd60>)
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	f002 fc21 	bl	8005540 <HAL_UART_Transmit>
	for (i = 0; i < MAX_DATA_POINTS; i++) { // SEND DATA
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	193a      	adds	r2, r7, r4
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	23d2      	movs	r3, #210	; 0xd2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	dda9      	ble.n	8002c68 <READ_DATA+0xc80>
	}

	GPIOB->ODR &= ~GPIO_ODR_2;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <READ_DATA+0xd64>)
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <READ_DATA+0xd64>)
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	615a      	str	r2, [r3, #20]
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b072      	add	sp, #456	; 0x1c8
 8002d26:	bdb0      	pop	{r4, r5, r7, pc}
 8002d28:	20000038 	.word	0x20000038
 8002d2c:	20000040 	.word	0x20000040
 8002d30:	fffffe3c 	.word	0xfffffe3c
 8002d34:	fffffe38 	.word	0xfffffe38
 8002d38:	2000003c 	.word	0x2000003c
 8002d3c:	fffffee8 	.word	0xfffffee8
 8002d40:	fffffec0 	.word	0xfffffec0
 8002d44:	fffffe98 	.word	0xfffffe98
 8002d48:	20000094 	.word	0x20000094
 8002d4c:	48000400 	.word	0x48000400

08002d50 <ReadAccelerometerAtRest>:

void ReadAccelerometerAtRest() {
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b094      	sub	sp, #80	; 0x50
 8002d54:	af04      	add	r7, sp, #16
	GPIOB->ODR |= GPIO_ODR_2;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <ReadAccelerometerAtRest+0x80>)
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <ReadAccelerometerAtRest+0x80>)
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]

    //Offset X
	uint8_t Acc_X_L[1];
    uint8_t Acc_X_H[1];
    uint16_t acc_x_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, Acc_X_L, 1, 100);
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <ReadAccelerometerAtRest+0x84>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	b299      	uxth	r1, r3
 8002d68:	481a      	ldr	r0, [pc, #104]	; (8002dd4 <ReadAccelerometerAtRest+0x84>)
 8002d6a:	2364      	movs	r3, #100	; 0x64
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2430      	movs	r4, #48	; 0x30
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	2228      	movs	r2, #40	; 0x28
 8002d7c:	f001 f8ba 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, Acc_X_H, 1, 100);
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <ReadAccelerometerAtRest+0x84>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	b299      	uxth	r1, r3
 8002d86:	4813      	ldr	r0, [pc, #76]	; (8002dd4 <ReadAccelerometerAtRest+0x84>)
 8002d88:	2364      	movs	r3, #100	; 0x64
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	252c      	movs	r5, #44	; 0x2c
 8002d92:	197b      	adds	r3, r7, r5
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2301      	movs	r3, #1
 8002d98:	2229      	movs	r2, #41	; 0x29
 8002d9a:	f001 f8ab 	bl	8003ef4 <HAL_I2C_Mem_Read>
    acc_x_raw = Acc_X_L[0] | (Acc_X_H[0] << 8);
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	2132      	movs	r1, #50	; 0x32
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	801a      	strh	r2, [r3, #0]
    uint16_t raw_value;
    if(acc_x_raw > 32768) {
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d90a      	bls.n	8002dd8 <ReadAccelerometerAtRest+0x88>
    	raw_value = (~acc_x_raw + 1);
 8002dc2:	233e      	movs	r3, #62	; 0x3e
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	187a      	adds	r2, r7, r1
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	4252      	negs	r2, r2
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	e009      	b.n	8002de4 <ReadAccelerometerAtRest+0x94>
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	20000040 	.word	0x20000040
    } else {
    	raw_value = acc_x_raw;
 8002dd8:	233e      	movs	r3, #62	; 0x3e
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2232      	movs	r2, #50	; 0x32
 8002dde:	18ba      	adds	r2, r7, r2
 8002de0:	8812      	ldrh	r2, [r2, #0]
 8002de2:	801a      	strh	r2, [r3, #0]
    }
    acc_x_offset = 9.8 * (raw_value *ACC_SENS) / 1000;
 8002de4:	233e      	movs	r3, #62	; 0x3e
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fe ff0e 	bl	8001c0c <__aeabi_i2d>
 8002df0:	4ad4      	ldr	r2, [pc, #848]	; (8003144 <ReadAccelerometerAtRest+0x3f4>)
 8002df2:	4bd5      	ldr	r3, [pc, #852]	; (8003148 <ReadAccelerometerAtRest+0x3f8>)
 8002df4:	f7fe f8c6 	bl	8000f84 <__aeabi_dmul>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4ad2      	ldr	r2, [pc, #840]	; (800314c <ReadAccelerometerAtRest+0x3fc>)
 8002e02:	4bd3      	ldr	r3, [pc, #844]	; (8003150 <ReadAccelerometerAtRest+0x400>)
 8002e04:	f7fe f8be 	bl	8000f84 <__aeabi_dmul>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	4bd0      	ldr	r3, [pc, #832]	; (8003154 <ReadAccelerometerAtRest+0x404>)
 8002e14:	f7fd fdc8 	bl	80009a8 <__aeabi_ddiv>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	000b      	movs	r3, r1
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	f7fe ff6c 	bl	8001cfc <__aeabi_d2f>
 8002e24:	1c02      	adds	r2, r0, #0
 8002e26:	4bcc      	ldr	r3, [pc, #816]	; (8003158 <ReadAccelerometerAtRest+0x408>)
 8002e28:	601a      	str	r2, [r3, #0]
    //Offset Y
    uint8_t Acc_Y_L[1];
    uint8_t Acc_Y_H[1];
    uint16_t acc_y_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, Acc_Y_L, 1, 100);
 8002e2a:	4bcc      	ldr	r3, [pc, #816]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	b299      	uxth	r1, r3
 8002e30:	48ca      	ldr	r0, [pc, #808]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002e32:	2364      	movs	r3, #100	; 0x64
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	2301      	movs	r3, #1
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2428      	movs	r4, #40	; 0x28
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2301      	movs	r3, #1
 8002e42:	222a      	movs	r2, #42	; 0x2a
 8002e44:	f001 f856 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, Acc_Y_H, 1, 100);
 8002e48:	4bc4      	ldr	r3, [pc, #784]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	48c3      	ldr	r0, [pc, #780]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002e50:	2364      	movs	r3, #100	; 0x64
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	2301      	movs	r3, #1
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2524      	movs	r5, #36	; 0x24
 8002e5a:	197b      	adds	r3, r7, r5
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	222b      	movs	r2, #43	; 0x2b
 8002e62:	f001 f847 	bl	8003ef4 <HAL_I2C_Mem_Read>
    acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	197b      	adds	r3, r7, r5
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	213c      	movs	r1, #60	; 0x3c
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	801a      	strh	r2, [r3, #0]
    if(acc_y_raw > 32768) {
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d904      	bls.n	8002e94 <ReadAccelerometerAtRest+0x144>
    	acc_y_raw = (~acc_y_raw + 1);
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	187a      	adds	r2, r7, r1
 8002e8e:	8812      	ldrh	r2, [r2, #0]
 8002e90:	4252      	negs	r2, r2
 8002e92:	801a      	strh	r2, [r3, #0]
    }
    acc_y_offset = 9.8 * (acc_y_raw *ACC_SENS) / 1000;
 8002e94:	233c      	movs	r3, #60	; 0x3c
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fe feb6 	bl	8001c0c <__aeabi_i2d>
 8002ea0:	4aa8      	ldr	r2, [pc, #672]	; (8003144 <ReadAccelerometerAtRest+0x3f4>)
 8002ea2:	4ba9      	ldr	r3, [pc, #676]	; (8003148 <ReadAccelerometerAtRest+0x3f8>)
 8002ea4:	f7fe f86e 	bl	8000f84 <__aeabi_dmul>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	000b      	movs	r3, r1
 8002eac:	0010      	movs	r0, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	4aa6      	ldr	r2, [pc, #664]	; (800314c <ReadAccelerometerAtRest+0x3fc>)
 8002eb2:	4ba7      	ldr	r3, [pc, #668]	; (8003150 <ReadAccelerometerAtRest+0x400>)
 8002eb4:	f7fe f866 	bl	8000f84 <__aeabi_dmul>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	000b      	movs	r3, r1
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4ba4      	ldr	r3, [pc, #656]	; (8003154 <ReadAccelerometerAtRest+0x404>)
 8002ec4:	f7fd fd70 	bl	80009a8 <__aeabi_ddiv>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	000b      	movs	r3, r1
 8002ecc:	0010      	movs	r0, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	f7fe ff14 	bl	8001cfc <__aeabi_d2f>
 8002ed4:	1c02      	adds	r2, r0, #0
 8002ed6:	4ba2      	ldr	r3, [pc, #648]	; (8003160 <ReadAccelerometerAtRest+0x410>)
 8002ed8:	601a      	str	r2, [r3, #0]

    //Offset Z
    uint8_t Acc_Z_L[1];
    uint8_t Acc_Z_H[1];
    uint16_t acc_z_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, Acc_Z_L, 1, 100);
 8002eda:	4ba0      	ldr	r3, [pc, #640]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	489e      	ldr	r0, [pc, #632]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002ee2:	2364      	movs	r3, #100	; 0x64
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2420      	movs	r4, #32
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	222c      	movs	r2, #44	; 0x2c
 8002ef4:	f000 fffe 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, Acc_Z_H, 1, 100);
 8002ef8:	4b98      	ldr	r3, [pc, #608]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	b299      	uxth	r1, r3
 8002efe:	4897      	ldr	r0, [pc, #604]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002f00:	2364      	movs	r3, #100	; 0x64
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2301      	movs	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	251c      	movs	r5, #28
 8002f0a:	197b      	adds	r3, r7, r5
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	222d      	movs	r2, #45	; 0x2d
 8002f12:	f000 ffef 	bl	8003ef4 <HAL_I2C_Mem_Read>
    acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	213a      	movs	r1, #58	; 0x3a
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	801a      	strh	r2, [r3, #0]
    if(acc_z_raw > 32768) {
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d904      	bls.n	8002f44 <ReadAccelerometerAtRest+0x1f4>
    	acc_z_raw = (~acc_z_raw + 1);
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	187a      	adds	r2, r7, r1
 8002f3e:	8812      	ldrh	r2, [r2, #0]
 8002f40:	4252      	negs	r2, r2
 8002f42:	801a      	strh	r2, [r3, #0]
    }
    acc_z_offset = 9.8 * (acc_z_raw *ACC_SENS) / 1000;
 8002f44:	233a      	movs	r3, #58	; 0x3a
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fe fe5e 	bl	8001c0c <__aeabi_i2d>
 8002f50:	4a7c      	ldr	r2, [pc, #496]	; (8003144 <ReadAccelerometerAtRest+0x3f4>)
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <ReadAccelerometerAtRest+0x3f8>)
 8002f54:	f7fe f816 	bl	8000f84 <__aeabi_dmul>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	000b      	movs	r3, r1
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	4a7a      	ldr	r2, [pc, #488]	; (800314c <ReadAccelerometerAtRest+0x3fc>)
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <ReadAccelerometerAtRest+0x400>)
 8002f64:	f7fe f80e 	bl	8000f84 <__aeabi_dmul>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <ReadAccelerometerAtRest+0x404>)
 8002f74:	f7fd fd18 	bl	80009a8 <__aeabi_ddiv>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	f7fe febc 	bl	8001cfc <__aeabi_d2f>
 8002f84:	1c02      	adds	r2, r0, #0
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <ReadAccelerometerAtRest+0x414>)
 8002f88:	601a      	str	r2, [r3, #0]
    //Gyroscope
    //Offset X
	uint8_t Gyro_X_L[1];
    uint8_t Gyro_X_H[1];
    uint16_t gyro_x_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, Acc_X_L, 1, 100);
 8002f8a:	4b74      	ldr	r3, [pc, #464]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	b299      	uxth	r1, r3
 8002f90:	4872      	ldr	r0, [pc, #456]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002f92:	2364      	movs	r3, #100	; 0x64
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2330      	movs	r3, #48	; 0x30
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	2222      	movs	r2, #34	; 0x22
 8002fa4:	f000 ffa6 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, Acc_X_H, 1, 100);
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	b299      	uxth	r1, r3
 8002fae:	486b      	ldr	r0, [pc, #428]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8002fb0:	2364      	movs	r3, #100	; 0x64
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	232c      	movs	r3, #44	; 0x2c
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	2223      	movs	r2, #35	; 0x23
 8002fc2:	f000 ff97 	bl	8003ef4 <HAL_I2C_Mem_Read>
    gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 8002fc6:	2318      	movs	r3, #24
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	2314      	movs	r3, #20
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	2138      	movs	r1, #56	; 0x38
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	801a      	strh	r2, [r3, #0]
    if(gyro_x_raw > 32768) {
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d904      	bls.n	8002ff8 <ReadAccelerometerAtRest+0x2a8>
    	gyro_x_raw = (~gyro_x_raw + 1);
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	187a      	adds	r2, r7, r1
 8002ff2:	8812      	ldrh	r2, [r2, #0]
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	801a      	strh	r2, [r3, #0]
    }
    gyro_x_offset = (gyro_x_raw *GYRO_SENS/1000);
 8002ff8:	2338      	movs	r3, #56	; 0x38
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	2246      	movs	r2, #70	; 0x46
 8003000:	4353      	muls	r3, r2
 8003002:	22fa      	movs	r2, #250	; 0xfa
 8003004:	0091      	lsls	r1, r2, #2
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd f906 	bl	8000218 <__divsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	0018      	movs	r0, r3
 8003010:	f7fd fc78 	bl	8000904 <__aeabi_i2f>
 8003014:	1c02      	adds	r2, r0, #0
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <ReadAccelerometerAtRest+0x418>)
 8003018:	601a      	str	r2, [r3, #0]

    //Offset Y
	uint8_t Gyro_Y_L[1];
    uint8_t Gyro_Y_H[1];
    uint16_t gyro_y_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, Acc_Y_L, 1, 100);
 800301a:	4b50      	ldr	r3, [pc, #320]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	b299      	uxth	r1, r3
 8003020:	484e      	ldr	r0, [pc, #312]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8003022:	2364      	movs	r3, #100	; 0x64
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	2301      	movs	r3, #1
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2328      	movs	r3, #40	; 0x28
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f000 ff5e 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, Acc_Y_H, 1, 100);
 8003038:	4b48      	ldr	r3, [pc, #288]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	b299      	uxth	r1, r3
 800303e:	4847      	ldr	r0, [pc, #284]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 8003040:	2364      	movs	r3, #100	; 0x64
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	2301      	movs	r3, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2324      	movs	r3, #36	; 0x24
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2301      	movs	r3, #1
 8003050:	2225      	movs	r2, #37	; 0x25
 8003052:	f000 ff4f 	bl	8003ef4 <HAL_I2C_Mem_Read>
    gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8003056:	2310      	movs	r3, #16
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b21a      	sxth	r2, r3
 800305e:	230c      	movs	r3, #12
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21a      	sxth	r2, r3
 800306c:	2136      	movs	r1, #54	; 0x36
 800306e:	187b      	adds	r3, r7, r1
 8003070:	801a      	strh	r2, [r3, #0]
    if(gyro_y_raw > 32768) {
 8003072:	187b      	adds	r3, r7, r1
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	429a      	cmp	r2, r3
 800307c:	d904      	bls.n	8003088 <ReadAccelerometerAtRest+0x338>
    	gyro_y_raw = (~gyro_y_raw + 1);
 800307e:	187b      	adds	r3, r7, r1
 8003080:	187a      	adds	r2, r7, r1
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	4252      	negs	r2, r2
 8003086:	801a      	strh	r2, [r3, #0]
    }
    gyro_y_offset = (gyro_y_raw *GYRO_SENS/1000);
 8003088:	2336      	movs	r3, #54	; 0x36
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	2246      	movs	r2, #70	; 0x46
 8003090:	4353      	muls	r3, r2
 8003092:	22fa      	movs	r2, #250	; 0xfa
 8003094:	0091      	lsls	r1, r2, #2
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd f8be 	bl	8000218 <__divsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fd fc30 	bl	8000904 <__aeabi_i2f>
 80030a4:	1c02      	adds	r2, r0, #0
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <ReadAccelerometerAtRest+0x41c>)
 80030a8:	601a      	str	r2, [r3, #0]

    //Offset Z
	uint8_t Gyro_Z_L[1];
    uint8_t Gyro_Z_H[1];
    uint16_t gyro_z_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, Acc_Z_L, 1, 100);
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	b299      	uxth	r1, r3
 80030b0:	482a      	ldr	r0, [pc, #168]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 80030b2:	2364      	movs	r3, #100	; 0x64
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	2301      	movs	r3, #1
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2320      	movs	r3, #32
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2301      	movs	r3, #1
 80030c2:	2226      	movs	r2, #38	; 0x26
 80030c4:	f000 ff16 	bl	8003ef4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, Acc_Z_H, 1, 100);
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	b299      	uxth	r1, r3
 80030ce:	4823      	ldr	r0, [pc, #140]	; (800315c <ReadAccelerometerAtRest+0x40c>)
 80030d0:	2364      	movs	r3, #100	; 0x64
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	2301      	movs	r3, #1
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	231c      	movs	r3, #28
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	2227      	movs	r2, #39	; 0x27
 80030e2:	f000 ff07 	bl	8003ef4 <HAL_I2C_Mem_Read>
    gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 80030e6:	2308      	movs	r3, #8
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	2134      	movs	r1, #52	; 0x34
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	801a      	strh	r2, [r3, #0]
    if(gyro_z_raw > 32768) {
 8003100:	187b      	adds	r3, r7, r1
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	429a      	cmp	r2, r3
 800310a:	d904      	bls.n	8003116 <ReadAccelerometerAtRest+0x3c6>
    	gyro_z_raw = (~gyro_z_raw + 1);
 800310c:	187b      	adds	r3, r7, r1
 800310e:	187a      	adds	r2, r7, r1
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	4252      	negs	r2, r2
 8003114:	801a      	strh	r2, [r3, #0]
    }
    gyro_z_offset = (gyro_z_raw *GYRO_SENS/1000);
 8003116:	2334      	movs	r3, #52	; 0x34
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	2246      	movs	r2, #70	; 0x46
 800311e:	4353      	muls	r3, r2
 8003120:	22fa      	movs	r2, #250	; 0xfa
 8003122:	0091      	lsls	r1, r2, #2
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd f877 	bl	8000218 <__divsi3>
 800312a:	0003      	movs	r3, r0
 800312c:	0018      	movs	r0, r3
 800312e:	f7fd fbe9 	bl	8000904 <__aeabi_i2f>
 8003132:	1c02      	adds	r2, r0, #0
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <ReadAccelerometerAtRest+0x420>)
 8003136:	601a      	str	r2, [r3, #0]

    READ_DATA();
 8003138:	f7fe ff56 	bl	8001fe8 <READ_DATA>
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b010      	add	sp, #64	; 0x40
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	5a1cac08 	.word	0x5a1cac08
 8003148:	3fdf3b64 	.word	0x3fdf3b64
 800314c:	9999999a 	.word	0x9999999a
 8003150:	40239999 	.word	0x40239999
 8003154:	408f4000 	.word	0x408f4000
 8003158:	20000028 	.word	0x20000028
 800315c:	20000040 	.word	0x20000040
 8003160:	2000002c 	.word	0x2000002c
 8003164:	20000030 	.word	0x20000030
 8003168:	20000034 	.word	0x20000034
 800316c:	20000038 	.word	0x20000038
 8003170:	2000003c 	.word	0x2000003c

08003174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003178:	f000 fa4a 	bl	8003610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800317c:	f000 f812 	bl	80031a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003180:	f000 f8c0 	bl	8003304 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003184:	f000 f84e 	bl	8003224 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8003188:	f000 f88c 	bl	80032a4 <MX_USART6_UART_Init>
  //IMU_Init();

  HAL_UART_Receive_IT(&huart6, Rx_data, 10);
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <main+0x28>)
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <main+0x2c>)
 8003190:	220a      	movs	r2, #10
 8003192:	0018      	movs	r0, r3
 8003194:	f002 fa74 	bl	8005680 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003198:	e7fe      	b.n	8003198 <main+0x24>
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	2000011c 	.word	0x2000011c
 80031a0:	20000094 	.word	0x20000094

080031a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b093      	sub	sp, #76	; 0x4c
 80031a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031aa:	2414      	movs	r4, #20
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	0018      	movs	r0, r3
 80031b0:	2334      	movs	r3, #52	; 0x34
 80031b2:	001a      	movs	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f003 f959 	bl	800646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	0018      	movs	r0, r3
 80031be:	2310      	movs	r3, #16
 80031c0:	001a      	movs	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	f003 f952 	bl	800646c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031c8:	0021      	movs	r1, r4
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2201      	movs	r2, #1
 80031d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2210      	movs	r2, #16
 80031da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	0018      	movs	r0, r3
 80031e6:	f001 fc65 	bl	8004ab4 <HAL_RCC_OscConfig>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d001      	beq.n	80031f2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80031ee:	f000 f905 	bl	80033fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	2200      	movs	r2, #0
 80031fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	2100      	movs	r1, #0
 800320e:	0018      	movs	r0, r3
 8003210:	f001 ffd6 	bl	80051c0 <HAL_RCC_ClockConfig>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003218:	f000 f8f0 	bl	80033fc <Error_Handler>
  }
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b013      	add	sp, #76	; 0x4c
 8003222:	bd90      	pop	{r4, r7, pc}

08003224 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <MX_I2C2_Init+0x74>)
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <MX_I2C2_Init+0x78>)
 800322c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <MX_I2C2_Init+0x74>)
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <MX_I2C2_Init+0x7c>)
 8003232:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 214;
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <MX_I2C2_Init+0x74>)
 8003236:	22d6      	movs	r2, #214	; 0xd6
 8003238:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <MX_I2C2_Init+0x74>)
 800323c:	2201      	movs	r2, #1
 800323e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <MX_I2C2_Init+0x74>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <MX_I2C2_Init+0x74>)
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <MX_I2C2_Init+0x74>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_I2C2_Init+0x74>)
 8003254:	2200      	movs	r2, #0
 8003256:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <MX_I2C2_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_I2C2_Init+0x74>)
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fc83 	bl	8003b6c <HAL_I2C_Init>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d001      	beq.n	800326e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800326a:	f000 f8c7 	bl	80033fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <MX_I2C2_Init+0x74>)
 8003270:	2100      	movs	r1, #0
 8003272:	0018      	movs	r0, r3
 8003274:	f001 fb86 	bl	8004984 <HAL_I2CEx_ConfigAnalogFilter>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d001      	beq.n	8003280 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800327c:	f000 f8be 	bl	80033fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <MX_I2C2_Init+0x74>)
 8003282:	2100      	movs	r1, #0
 8003284:	0018      	movs	r0, r3
 8003286:	f001 fbc9 	bl	8004a1c <HAL_I2CEx_ConfigDigitalFilter>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800328e:	f000 f8b5 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000040 	.word	0x20000040
 800329c:	40005800 	.word	0x40005800
 80032a0:	2000090e 	.word	0x2000090e

080032a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <MX_USART6_UART_Init+0x5c>)
 80032ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032b0:	22e1      	movs	r2, #225	; 0xe1
 80032b2:	0252      	lsls	r2, r2, #9
 80032b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <MX_USART6_UART_Init+0x58>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 f8d5 	bl	8005498 <HAL_UART_Init>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80032f2:	f000 f883 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000094 	.word	0x20000094
 8003300:	40011400 	.word	0x40011400

08003304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	240c      	movs	r4, #12
 800330c:	193b      	adds	r3, r7, r4
 800330e:	0018      	movs	r0, r3
 8003310:	2314      	movs	r3, #20
 8003312:	001a      	movs	r2, r3
 8003314:	2100      	movs	r1, #0
 8003316:	f003 f8a9 	bl	800646c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <MX_GPIO_Init+0x88>)
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_GPIO_Init+0x88>)
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0309      	lsls	r1, r1, #12
 8003324:	430a      	orrs	r2, r1
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_GPIO_Init+0x88>)
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	031b      	lsls	r3, r3, #12
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_GPIO_Init+0x88>)
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_GPIO_Init+0x88>)
 800333c:	2180      	movs	r1, #128	; 0x80
 800333e:	02c9      	lsls	r1, r1, #11
 8003340:	430a      	orrs	r2, r1
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_GPIO_Init+0x88>)
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	02db      	lsls	r3, r3, #11
 800334c:	4013      	ands	r3, r2
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_GPIO_Init+0x8c>)
 8003354:	2200      	movs	r2, #0
 8003356:	2105      	movs	r1, #5
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fbe9 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800335e:	0021      	movs	r1, r4
 8003360:	187b      	adds	r3, r7, r1
 8003362:	2205      	movs	r2, #5
 8003364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2201      	movs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2201      	movs	r2, #1
 8003370:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	187b      	adds	r3, r7, r1
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <MX_GPIO_Init+0x8c>)
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f000 fa5e 	bl	8003840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b009      	add	sp, #36	; 0x24
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	48000400 	.word	0x48000400

08003394 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef received;
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FEFLAG(&huart6);
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(&huart6);
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2204      	movs	r2, #4
 80033b2:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2208      	movs	r2, #8
 80033ba:	621a      	str	r2, [r3, #32]
	received = HAL_UART_Receive_IT(&huart6, Rx_data, 10);
 80033bc:	230f      	movs	r3, #15
 80033be:	18fc      	adds	r4, r7, r3
 80033c0:	490d      	ldr	r1, [pc, #52]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033c4:	220a      	movs	r2, #10
 80033c6:	0018      	movs	r0, r3
 80033c8:	f002 f95a 	bl	8005680 <HAL_UART_Receive_IT>
 80033cc:	0003      	movs	r3, r0
 80033ce:	7023      	strb	r3, [r4, #0]
	if (Rx_data[0] == 'i') {
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b69      	cmp	r3, #105	; 0x69
 80033d6:	d102      	bne.n	80033de <HAL_UART_RxCpltCallback+0x4a>
		IMU_Init();
 80033d8:	f7fe fd34 	bl	8001e44 <IMU_Init>
		//ReadAccelerometerAtRest();
	} else if (Rx_data[0] == 'c'){
		ReadAccelerometerAtRest();
	}
}
 80033dc:	e005      	b.n	80033ea <HAL_UART_RxCpltCallback+0x56>
	} else if (Rx_data[0] == 'c'){
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b63      	cmp	r3, #99	; 0x63
 80033e4:	d101      	bne.n	80033ea <HAL_UART_RxCpltCallback+0x56>
		ReadAccelerometerAtRest();
 80033e6:	f7ff fcb3 	bl	8002d50 <ReadAccelerometerAtRest>
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b005      	add	sp, #20
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000094 	.word	0x20000094
 80033f8:	2000011c 	.word	0x2000011c

080033fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
}
 8003402:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003404:	e7fe      	b.n	8003404 <Error_Handler+0x8>
	...

08003408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_MspInit+0x44>)
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_MspInit+0x44>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	619a      	str	r2, [r3, #24]
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_MspInit+0x44>)
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_MspInit+0x44>)
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_MspInit+0x44>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0549      	lsls	r1, r1, #21
 8003430:	430a      	orrs	r2, r1
 8003432:	61da      	str	r2, [r3, #28]
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_MspInit+0x44>)
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	055b      	lsls	r3, r3, #21
 800343c:	4013      	ands	r3, r2
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	2414      	movs	r4, #20
 800345a:	193b      	adds	r3, r7, r4
 800345c:	0018      	movs	r0, r3
 800345e:	2314      	movs	r3, #20
 8003460:	001a      	movs	r2, r3
 8003462:	2100      	movs	r1, #0
 8003464:	f003 f802 	bl	800646c <memset>
  if(hi2c->Instance==I2C2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_I2C_MspInit+0x90>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d132      	bne.n	80034d8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	02c9      	lsls	r1, r1, #11
 800347c:	430a      	orrs	r2, r1
 800347e:	615a      	str	r2, [r3, #20]
 8003480:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	02db      	lsls	r3, r3, #11
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	22c0      	movs	r2, #192	; 0xc0
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003496:	0021      	movs	r1, r4
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2212      	movs	r2, #18
 800349c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2201      	movs	r2, #1
 80034a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2203      	movs	r2, #3
 80034a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2201      	movs	r2, #1
 80034ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <HAL_I2C_MspInit+0x98>)
 80034b4:	0019      	movs	r1, r3
 80034b6:	0010      	movs	r0, r2
 80034b8:	f000 f9c2 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	03c9      	lsls	r1, r1, #15
 80034c6:	430a      	orrs	r2, r1
 80034c8:	61da      	str	r2, [r3, #28]
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_I2C_MspInit+0x94>)
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	03db      	lsls	r3, r3, #15
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b00b      	add	sp, #44	; 0x2c
 80034de:	bd90      	pop	{r4, r7, pc}
 80034e0:	40005800 	.word	0x40005800
 80034e4:	40021000 	.word	0x40021000
 80034e8:	48000400 	.word	0x48000400

080034ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b08b      	sub	sp, #44	; 0x2c
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	2414      	movs	r4, #20
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	0018      	movs	r0, r3
 80034fa:	2314      	movs	r3, #20
 80034fc:	001a      	movs	r2, r3
 80034fe:	2100      	movs	r1, #0
 8003500:	f002 ffb4 	bl	800646c <memset>
  if(huart->Instance==USART6)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_UART_MspInit+0x8c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d12f      	bne.n	800356e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_UART_MspInit+0x90>)
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_UART_MspInit+0x90>)
 8003514:	2120      	movs	r1, #32
 8003516:	430a      	orrs	r2, r1
 8003518:	619a      	str	r2, [r3, #24]
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_UART_MspInit+0x90>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2220      	movs	r2, #32
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_UART_MspInit+0x90>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_UART_MspInit+0x90>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0309      	lsls	r1, r1, #12
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_UART_MspInit+0x90>)
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	031b      	lsls	r3, r3, #12
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC0     ------> USART6_TX
    PC1     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003542:	0021      	movs	r1, r4
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2203      	movs	r2, #3
 8003548:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2202      	movs	r2, #2
 800354e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	187b      	adds	r3, r7, r1
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2203      	movs	r2, #3
 800355a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART6;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2202      	movs	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003562:	187b      	adds	r3, r7, r1
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <HAL_UART_MspInit+0x94>)
 8003566:	0019      	movs	r1, r3
 8003568:	0010      	movs	r0, r2
 800356a:	f000 f969 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b00b      	add	sp, #44	; 0x2c
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	40011400 	.word	0x40011400
 800357c:	40021000 	.word	0x40021000
 8003580:	48000800 	.word	0x48000800

08003584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003588:	e7fe      	b.n	8003588 <NMI_Handler+0x4>

0800358a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358e:	e7fe      	b.n	800358e <HardFault_Handler+0x4>

08003590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f87a 	bl	80036a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035bc:	480d      	ldr	r0, [pc, #52]	; (80035f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c0:	f7ff fff7 	bl	80035b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <LoopForever+0xe>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035cc:	e002      	b.n	80035d4 <LoopCopyDataInit>

080035ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d2:	3304      	adds	r3, #4

080035d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d8:	d3f9      	bcc.n	80035ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <LoopForever+0x16>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e0:	e001      	b.n	80035e6 <LoopFillZerobss>

080035e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e4:	3204      	adds	r2, #4

080035e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e8:	d3fb      	bcc.n	80035e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ea:	f002 ff47 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ee:	f7ff fdc1 	bl	8003174 <main>

080035f2 <LoopForever>:

LoopForever:
    b LoopForever
 80035f2:	e7fe      	b.n	80035f2 <LoopForever>
  ldr   r0, =_estack
 80035f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003600:	0800655c 	.word	0x0800655c
  ldr r2, =_sbss
 8003604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003608:	2000012c 	.word	0x2000012c

0800360c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_COMP_IRQHandler>
	...

08003610 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_Init+0x24>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_Init+0x24>)
 800361a:	2110      	movs	r1, #16
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 f809 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003626:	f7ff feef 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40022000 	.word	0x40022000

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_InitTick+0x5c>)
 8003642:	681c      	ldr	r4, [r3, #0]
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_InitTick+0x60>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	0019      	movs	r1, r3
 800364a:	23fa      	movs	r3, #250	; 0xfa
 800364c:	0098      	lsls	r0, r3, #2
 800364e:	f7fc fd59 	bl	8000104 <__udivsi3>
 8003652:	0003      	movs	r3, r0
 8003654:	0019      	movs	r1, r3
 8003656:	0020      	movs	r0, r4
 8003658:	f7fc fd54 	bl	8000104 <__udivsi3>
 800365c:	0003      	movs	r3, r0
 800365e:	0018      	movs	r0, r3
 8003660:	f000 f8e1 	bl	8003826 <HAL_SYSTICK_Config>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d001      	beq.n	800366c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e00f      	b.n	800368c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d80b      	bhi.n	800368a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	2301      	movs	r3, #1
 8003676:	425b      	negs	r3, r3
 8003678:	2200      	movs	r2, #0
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f8be 	bl	80037fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_InitTick+0x64>)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b003      	add	sp, #12
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	20000000 	.word	0x20000000
 8003698:	20000008 	.word	0x20000008
 800369c:	20000004 	.word	0x20000004

080036a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_IncTick+0x1c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	001a      	movs	r2, r3
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_IncTick+0x20>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	18d2      	adds	r2, r2, r3
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_IncTick+0x20>)
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000008 	.word	0x20000008
 80036c0:	20000128 	.word	0x20000128

080036c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <HAL_GetTick+0x10>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000128 	.word	0x20000128

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b7f      	cmp	r3, #127	; 0x7f
 80036ec:	d828      	bhi.n	8003740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ee:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <__NVIC_SetPriority+0xd4>)
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	33c0      	adds	r3, #192	; 0xc0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	589b      	ldr	r3, [r3, r2]
 80036fe:	1dfa      	adds	r2, r7, #7
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	0011      	movs	r1, r2
 8003704:	2203      	movs	r2, #3
 8003706:	400a      	ands	r2, r1
 8003708:	00d2      	lsls	r2, r2, #3
 800370a:	21ff      	movs	r1, #255	; 0xff
 800370c:	4091      	lsls	r1, r2
 800370e:	000a      	movs	r2, r1
 8003710:	43d2      	mvns	r2, r2
 8003712:	401a      	ands	r2, r3
 8003714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	401a      	ands	r2, r3
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	0018      	movs	r0, r3
 8003724:	2303      	movs	r3, #3
 8003726:	4003      	ands	r3, r0
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800372c:	481f      	ldr	r0, [pc, #124]	; (80037ac <__NVIC_SetPriority+0xd4>)
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b25b      	sxtb	r3, r3
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	430a      	orrs	r2, r1
 8003738:	33c0      	adds	r3, #192	; 0xc0
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800373e:	e031      	b.n	80037a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0019      	movs	r1, r3
 8003748:	230f      	movs	r3, #15
 800374a:	400b      	ands	r3, r1
 800374c:	3b08      	subs	r3, #8
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3306      	adds	r3, #6
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	3304      	adds	r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1dfa      	adds	r2, r7, #7
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	0011      	movs	r1, r2
 8003760:	2203      	movs	r2, #3
 8003762:	400a      	ands	r2, r1
 8003764:	00d2      	lsls	r2, r2, #3
 8003766:	21ff      	movs	r1, #255	; 0xff
 8003768:	4091      	lsls	r1, r2
 800376a:	000a      	movs	r2, r1
 800376c:	43d2      	mvns	r2, r2
 800376e:	401a      	ands	r2, r3
 8003770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	401a      	ands	r2, r3
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	0018      	movs	r0, r3
 8003780:	2303      	movs	r3, #3
 8003782:	4003      	ands	r3, r0
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	001c      	movs	r4, r3
 8003790:	230f      	movs	r3, #15
 8003792:	4023      	ands	r3, r4
 8003794:	3b08      	subs	r3, #8
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	430a      	orrs	r2, r1
 800379a:	3306      	adds	r3, #6
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	18c3      	adds	r3, r0, r3
 80037a0:	3304      	adds	r3, #4
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b003      	add	sp, #12
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	045b      	lsls	r3, r3, #17
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d301      	bcc.n	80037cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c8:	2301      	movs	r3, #1
 80037ca:	e010      	b.n	80037ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <SysTick_Config+0x44>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2103      	movs	r1, #3
 80037da:	0018      	movs	r0, r3
 80037dc:	f7ff ff7c 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x44>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x44>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	210f      	movs	r1, #15
 8003808:	187b      	adds	r3, r7, r1
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	187b      	adds	r3, r7, r1
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff ffbf 	bl	80037b4 <SysTick_Config>
 8003836:	0003      	movs	r3, r0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	e155      	b.n	8003afc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4091      	lsls	r1, r2
 800385a:	000a      	movs	r2, r1
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d100      	bne.n	8003868 <HAL_GPIO_Init+0x28>
 8003866:	e146      	b.n	8003af6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2203      	movs	r2, #3
 800386e:	4013      	ands	r3, r2
 8003870:	2b01      	cmp	r3, #1
 8003872:	d005      	beq.n	8003880 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2203      	movs	r2, #3
 800387a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800387c:	2b02      	cmp	r3, #2
 800387e:	d130      	bne.n	80038e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	409a      	lsls	r2, r3
 800388e:	0013      	movs	r3, r2
 8003890:	43da      	mvns	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	409a      	lsls	r2, r3
 80038a2:	0013      	movs	r3, r2
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b6:	2201      	movs	r2, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	43da      	mvns	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	2201      	movs	r2, #1
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
 80038d4:	0013      	movs	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d017      	beq.n	800391e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	2203      	movs	r2, #3
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	43da      	mvns	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2203      	movs	r2, #3
 8003924:	4013      	ands	r3, r2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d123      	bne.n	8003972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	58d3      	ldr	r3, [r2, r3]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2207      	movs	r2, #7
 800393c:	4013      	ands	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	43da      	mvns	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2107      	movs	r1, #7
 8003956:	400b      	ands	r3, r1
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	409a      	lsls	r2, r3
 800395c:	0013      	movs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	6939      	ldr	r1, [r7, #16]
 8003970:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	43da      	mvns	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2203      	movs	r2, #3
 8003990:	401a      	ands	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	0013      	movs	r3, r2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	23c0      	movs	r3, #192	; 0xc0
 80039ac:	029b      	lsls	r3, r3, #10
 80039ae:	4013      	ands	r3, r2
 80039b0:	d100      	bne.n	80039b4 <HAL_GPIO_Init+0x174>
 80039b2:	e0a0      	b.n	8003af6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b4:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <HAL_GPIO_Init+0x2d4>)
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x2d4>)
 80039ba:	2101      	movs	r1, #1
 80039bc:	430a      	orrs	r2, r1
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_GPIO_Init+0x2d4>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_GPIO_Init+0x2d8>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2203      	movs	r2, #3
 80039de:	4013      	ands	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	220f      	movs	r2, #15
 80039e4:	409a      	lsls	r2, r3
 80039e6:	0013      	movs	r3, r2
 80039e8:	43da      	mvns	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	2390      	movs	r3, #144	; 0x90
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x1ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_GPIO_Init+0x2dc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1ea>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a46      	ldr	r2, [pc, #280]	; (8003b20 <HAL_GPIO_Init+0x2e0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1e6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_GPIO_Init+0x2e4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1e2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a44      	ldr	r2, [pc, #272]	; (8003b28 <HAL_GPIO_Init+0x2e8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1de>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a1e:	2305      	movs	r3, #5
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	2103      	movs	r1, #3
 8003a34:	400a      	ands	r2, r1
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x2d8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	035b      	lsls	r3, r3, #13
 8003a66:	4013      	ands	r3, r2
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43da      	mvns	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	039b      	lsls	r3, r3, #14
 8003a90:	4013      	ands	r3, r2
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	4013      	ands	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	025b      	lsls	r3, r3, #9
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	40da      	lsrs	r2, r3
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	d000      	beq.n	8003b0a <HAL_GPIO_Init+0x2ca>
 8003b08:	e6a2      	b.n	8003850 <HAL_GPIO_Init+0x10>
  } 
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	48000400 	.word	0x48000400
 8003b20:	48000800 	.word	0x48000800
 8003b24:	48000c00 	.word	0x48000c00
 8003b28:	48001000 	.word	0x48001000
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	0008      	movs	r0, r1
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	1cbb      	adds	r3, r7, #2
 8003b3e:	1c02      	adds	r2, r0, #0
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	1c7b      	adds	r3, r7, #1
 8003b44:	1c0a      	adds	r2, r1, #0
 8003b46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b48:	1c7b      	adds	r3, r7, #1
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b50:	1cbb      	adds	r3, r7, #2
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b58:	e003      	b.n	8003b62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b5a:	1cbb      	adds	r3, r7, #2
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e082      	b.n	8003c84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	5c9b      	ldrb	r3, [r3, r2]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2240      	movs	r2, #64	; 0x40
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff fc5b 	bl	8003450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2241      	movs	r2, #65	; 0x41
 8003b9e:	2124      	movs	r1, #36	; 0x24
 8003ba0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	438a      	bics	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4934      	ldr	r1, [pc, #208]	; (8003c8c <HAL_I2C_Init+0x120>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4931      	ldr	r1, [pc, #196]	; (8003c90 <HAL_I2C_Init+0x124>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d108      	bne.n	8003bea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	0209      	lsls	r1, r1, #8
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	e007      	b.n	8003bfa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2184      	movs	r1, #132	; 0x84
 8003bf4:	0209      	lsls	r1, r1, #8
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d104      	bne.n	8003c0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	491f      	ldr	r1, [pc, #124]	; (8003c94 <HAL_I2C_Init+0x128>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	491a      	ldr	r1, [pc, #104]	; (8003c90 <HAL_I2C_Init+0x124>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69d9      	ldr	r1, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2241      	movs	r2, #65	; 0x41
 8003c70:	2120      	movs	r1, #32
 8003c72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2242      	movs	r2, #66	; 0x42
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	f0ffffff 	.word	0xf0ffffff
 8003c90:	ffff7fff 	.word	0xffff7fff
 8003c94:	02008000 	.word	0x02008000

08003c98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	000c      	movs	r4, r1
 8003ca2:	0010      	movs	r0, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	230a      	movs	r3, #10
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	1c22      	adds	r2, r4, #0
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	2308      	movs	r3, #8
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	1c02      	adds	r2, r0, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	1dbb      	adds	r3, r7, #6
 8003cb8:	1c0a      	adds	r2, r1, #0
 8003cba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2241      	movs	r2, #65	; 0x41
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d000      	beq.n	8003cca <HAL_I2C_Mem_Write+0x32>
 8003cc8:	e10c      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_I2C_Mem_Write+0x42>
 8003cd0:	232c      	movs	r3, #44	; 0x2c
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0ff      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2C_Mem_Write+0x5c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0f8      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cfc:	f7ff fce2 	bl	80036c4 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	0219      	lsls	r1, r3, #8
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	f000 fc25 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0e3      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	2121      	movs	r1, #33	; 0x21
 8003d24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2242      	movs	r2, #66	; 0x42
 8003d2a:	2140      	movs	r1, #64	; 0x40
 8003d2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	222c      	movs	r2, #44	; 0x2c
 8003d3e:	18ba      	adds	r2, r7, r2
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d4a:	1dbb      	adds	r3, r7, #6
 8003d4c:	881c      	ldrh	r4, [r3, #0]
 8003d4e:	2308      	movs	r3, #8
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	230a      	movs	r3, #10
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	8819      	ldrh	r1, [r3, #0]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	0023      	movs	r3, r4
 8003d66:	f000 fb13 	bl	8004390 <I2C_RequestMemoryWrite>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2240      	movs	r2, #64	; 0x40
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0b5      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2bff      	cmp	r3, #255	; 0xff
 8003d82:	d911      	bls.n	8003da8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	045c      	lsls	r4, r3, #17
 8003d94:	230a      	movs	r3, #10
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	8819      	ldrh	r1, [r3, #0]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	0023      	movs	r3, r4
 8003da2:	f000 fdb5 	bl	8004910 <I2C_TransferConfig>
 8003da6:	e012      	b.n	8003dce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	049c      	lsls	r4, r3, #18
 8003dbc:	230a      	movs	r3, #10
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	8819      	ldrh	r1, [r3, #0]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	0023      	movs	r3, r4
 8003dca:	f000 fda1 	bl	8004910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 fc11 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e081      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d03a      	beq.n	8003e92 <HAL_I2C_Mem_Write+0x1fa>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d136      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	0013      	movs	r3, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	f000 fb95 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	1e03      	subs	r3, r0, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e053      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2bff      	cmp	r3, #255	; 0xff
 8003e46:	d911      	bls.n	8003e6c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	045c      	lsls	r4, r3, #17
 8003e58:	230a      	movs	r3, #10
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	8819      	ldrh	r1, [r3, #0]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	0023      	movs	r3, r4
 8003e66:	f000 fd53 	bl	8004910 <I2C_TransferConfig>
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	049c      	lsls	r4, r3, #18
 8003e80:	230a      	movs	r3, #10
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	8819      	ldrh	r1, [r3, #0]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0023      	movs	r3, r4
 8003e8e:	f000 fd3f 	bl	8004910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d198      	bne.n	8003dce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fbf0 	bl	8004688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e01a      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	490b      	ldr	r1, [pc, #44]	; (8003ef0 <HAL_I2C_Mem_Write+0x258>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2241      	movs	r2, #65	; 0x41
 8003ecc:	2120      	movs	r1, #32
 8003ece:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2242      	movs	r2, #66	; 0x42
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2240      	movs	r2, #64	; 0x40
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b007      	add	sp, #28
 8003eec:	bd90      	pop	{r4, r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	fe00e800 	.word	0xfe00e800

08003ef4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	000c      	movs	r4, r1
 8003efe:	0010      	movs	r0, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	230a      	movs	r3, #10
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	1c22      	adds	r2, r4, #0
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	1c02      	adds	r2, r0, #0
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	1dbb      	adds	r3, r7, #6
 8003f14:	1c0a      	adds	r2, r1, #0
 8003f16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2241      	movs	r2, #65	; 0x41
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d000      	beq.n	8003f26 <HAL_I2C_Mem_Read+0x32>
 8003f24:	e110      	b.n	8004148 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <HAL_I2C_Mem_Read+0x42>
 8003f2c:	232c      	movs	r3, #44	; 0x2c
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2280      	movs	r2, #128	; 0x80
 8003f3a:	0092      	lsls	r2, r2, #2
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e103      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2240      	movs	r2, #64	; 0x40
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x5c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0fc      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f58:	f7ff fbb4 	bl	80036c4 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	0219      	lsls	r1, r3, #8
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2319      	movs	r3, #25
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f000 faf7 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0e7      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2241      	movs	r2, #65	; 0x41
 8003f7e:	2122      	movs	r1, #34	; 0x22
 8003f80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2242      	movs	r2, #66	; 0x42
 8003f86:	2140      	movs	r1, #64	; 0x40
 8003f88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	222c      	movs	r2, #44	; 0x2c
 8003f9a:	18ba      	adds	r2, r7, r2
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa6:	1dbb      	adds	r3, r7, #6
 8003fa8:	881c      	ldrh	r4, [r3, #0]
 8003faa:	2308      	movs	r3, #8
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	230a      	movs	r3, #10
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	8819      	ldrh	r1, [r3, #0]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	0023      	movs	r3, r4
 8003fc2:	f000 fa49 	bl	8004458 <I2C_RequestMemoryRead>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e0b9      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2bff      	cmp	r3, #255	; 0xff
 8003fde:	d911      	bls.n	8004004 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	22ff      	movs	r2, #255	; 0xff
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	045c      	lsls	r4, r3, #17
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	8819      	ldrh	r1, [r3, #0]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	4b56      	ldr	r3, [pc, #344]	; (8004154 <HAL_I2C_Mem_Read+0x260>)
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	0023      	movs	r3, r4
 8003ffe:	f000 fc87 	bl	8004910 <I2C_TransferConfig>
 8004002:	e012      	b.n	800402a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	b2da      	uxtb	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	049c      	lsls	r4, r3, #18
 8004018:	230a      	movs	r3, #10
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	8819      	ldrh	r1, [r3, #0]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	4b4c      	ldr	r3, [pc, #304]	; (8004154 <HAL_I2C_Mem_Read+0x260>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0023      	movs	r3, r4
 8004026:	f000 fc73 	bl	8004910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800402a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	0013      	movs	r3, r2
 8004034:	2200      	movs	r2, #0
 8004036:	2104      	movs	r1, #4
 8004038:	f000 fa92 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e082      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d03a      	beq.n	80040f6 <HAL_I2C_Mem_Read+0x202>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d136      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	0013      	movs	r3, r2
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	f000 fa63 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e053      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2bff      	cmp	r3, #255	; 0xff
 80040aa:	d911      	bls.n	80040d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	22ff      	movs	r2, #255	; 0xff
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	045c      	lsls	r4, r3, #17
 80040bc:	230a      	movs	r3, #10
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	8819      	ldrh	r1, [r3, #0]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	0023      	movs	r3, r4
 80040ca:	f000 fc21 	bl	8004910 <I2C_TransferConfig>
 80040ce:	e012      	b.n	80040f6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	049c      	lsls	r4, r3, #18
 80040e4:	230a      	movs	r3, #10
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	8819      	ldrh	r1, [r3, #0]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	0023      	movs	r3, r4
 80040f2:	f000 fc0d 	bl	8004910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d194      	bne.n	800402a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	0018      	movs	r0, r3
 8004108:	f000 fabe 	bl	8004688 <I2C_WaitOnSTOPFlagUntilTimeout>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e01a      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	490c      	ldr	r1, [pc, #48]	; (8004158 <HAL_I2C_Mem_Read+0x264>)
 8004128:	400a      	ands	r2, r1
 800412a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2241      	movs	r2, #65	; 0x41
 8004130:	2120      	movs	r1, #32
 8004132:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2242      	movs	r2, #66	; 0x42
 8004138:	2100      	movs	r1, #0
 800413a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	2100      	movs	r1, #0
 8004142:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b007      	add	sp, #28
 8004150:	bd90      	pop	{r4, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	80002400 	.word	0x80002400
 8004158:	fe00e800 	.word	0xfe00e800

0800415c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	230a      	movs	r3, #10
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	1c0a      	adds	r2, r1, #0
 800416e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2241      	movs	r2, #65	; 0x41
 8004178:	5c9b      	ldrb	r3, [r3, r2]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d000      	beq.n	8004182 <HAL_I2C_IsDeviceReady+0x26>
 8004180:	e0fd      	b.n	800437e <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	401a      	ands	r2, r3
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	429a      	cmp	r2, r3
 8004194:	d101      	bne.n	800419a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	e0f2      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_I2C_IsDeviceReady+0x4c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0eb      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	2101      	movs	r1, #1
 80041ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2241      	movs	r2, #65	; 0x41
 80041b4:	2124      	movs	r1, #36	; 0x24
 80041b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_I2C_IsDeviceReady+0x7a>
 80041c6:	230a      	movs	r3, #10
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	059b      	lsls	r3, r3, #22
 80041ce:	0d9b      	lsrs	r3, r3, #22
 80041d0:	4a6d      	ldr	r2, [pc, #436]	; (8004388 <HAL_I2C_IsDeviceReady+0x22c>)
 80041d2:	431a      	orrs	r2, r3
 80041d4:	e006      	b.n	80041e4 <HAL_I2C_IsDeviceReady+0x88>
 80041d6:	230a      	movs	r3, #10
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	059b      	lsls	r3, r3, #22
 80041de:	0d9b      	lsrs	r3, r3, #22
 80041e0:	4a6a      	ldr	r2, [pc, #424]	; (800438c <HAL_I2C_IsDeviceReady+0x230>)
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041ea:	f7ff fa6b 	bl	80036c4 <HAL_GetTick>
 80041ee:	0003      	movs	r3, r0
 80041f0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2220      	movs	r2, #32
 80041fa:	4013      	ands	r3, r2
 80041fc:	3b20      	subs	r3, #32
 80041fe:	425a      	negs	r2, r3
 8004200:	4153      	adcs	r3, r2
 8004202:	b2da      	uxtb	r2, r3
 8004204:	231f      	movs	r3, #31
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2210      	movs	r2, #16
 8004212:	4013      	ands	r3, r2
 8004214:	3b10      	subs	r3, #16
 8004216:	425a      	negs	r2, r3
 8004218:	4153      	adcs	r3, r2
 800421a:	b2da      	uxtb	r2, r3
 800421c:	231e      	movs	r3, #30
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004222:	e035      	b.n	8004290 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	d01a      	beq.n	8004260 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7ff fa4b 	bl	80036c4 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <HAL_I2C_IsDeviceReady+0xe4>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2241      	movs	r2, #65	; 0x41
 8004244:	2120      	movs	r1, #32
 8004246:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	2220      	movs	r2, #32
 800424e:	431a      	orrs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e08f      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2220      	movs	r2, #32
 8004268:	4013      	ands	r3, r2
 800426a:	3b20      	subs	r3, #32
 800426c:	425a      	negs	r2, r3
 800426e:	4153      	adcs	r3, r2
 8004270:	b2da      	uxtb	r2, r3
 8004272:	231f      	movs	r3, #31
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2210      	movs	r2, #16
 8004280:	4013      	ands	r3, r2
 8004282:	3b10      	subs	r3, #16
 8004284:	425a      	negs	r2, r3
 8004286:	4153      	adcs	r3, r2
 8004288:	b2da      	uxtb	r2, r3
 800428a:	231e      	movs	r3, #30
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004290:	231f      	movs	r3, #31
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_I2C_IsDeviceReady+0x148>
 800429a:	231e      	movs	r3, #30
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0bf      	beq.n	8004224 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2210      	movs	r2, #16
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d01a      	beq.n	80042e8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	0013      	movs	r3, r2
 80042bc:	2200      	movs	r2, #0
 80042be:	2120      	movs	r1, #32
 80042c0:	f000 f94e 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d001      	beq.n	80042cc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e059      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2241      	movs	r2, #65	; 0x41
 80042d8:	2120      	movs	r1, #32
 80042da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e04b      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	0013      	movs	r3, r2
 80042f2:	2200      	movs	r2, #0
 80042f4:	2120      	movs	r1, #32
 80042f6:	f000 f933 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e03e      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2210      	movs	r2, #16
 8004308:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2220      	movs	r2, #32
 8004310:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d119      	bne.n	800434e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	01c9      	lsls	r1, r1, #7
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	0013      	movs	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	2120      	movs	r1, #32
 800433a:	f000 f911 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e01c      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2220      	movs	r2, #32
 800434c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d900      	bls.n	800435e <HAL_I2C_IsDeviceReady+0x202>
 800435c:	e72f      	b.n	80041be <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2241      	movs	r2, #65	; 0x41
 8004362:	2120      	movs	r1, #32
 8004364:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2240      	movs	r2, #64	; 0x40
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b008      	add	sp, #32
 8004386:	bd80      	pop	{r7, pc}
 8004388:	02002000 	.word	0x02002000
 800438c:	02002800 	.word	0x02002800

08004390 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	000c      	movs	r4, r1
 800439a:	0010      	movs	r0, r2
 800439c:	0019      	movs	r1, r3
 800439e:	250a      	movs	r5, #10
 80043a0:	197b      	adds	r3, r7, r5
 80043a2:	1c22      	adds	r2, r4, #0
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	2308      	movs	r3, #8
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	1c02      	adds	r2, r0, #0
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	1dbb      	adds	r3, r7, #6
 80043b0:	1c0a      	adds	r2, r1, #0
 80043b2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043b4:	1dbb      	adds	r3, r7, #6
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	045c      	lsls	r4, r3, #17
 80043be:	197b      	adds	r3, r7, r5
 80043c0:	8819      	ldrh	r1, [r3, #0]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <I2C_RequestMemoryWrite+0xc4>)
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	0023      	movs	r3, r4
 80043ca:	f000 faa1 	bl	8004910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 f911 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e033      	b.n	800444a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e2:	1dbb      	adds	r3, r7, #6
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d107      	bne.n	80043fa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
 80043f8:	e019      	b.n	800442e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043fa:	2308      	movs	r3, #8
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	6a39      	ldr	r1, [r7, #32]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	0018      	movs	r0, r3
 8004414:	f000 f8f2 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e014      	b.n	800444a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004420:	2308      	movs	r3, #8
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	0013      	movs	r3, r2
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	f000 f890 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d001      	beq.n	8004448 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bdb0      	pop	{r4, r5, r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	80002000 	.word	0x80002000

08004458 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004458:	b5b0      	push	{r4, r5, r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	000c      	movs	r4, r1
 8004462:	0010      	movs	r0, r2
 8004464:	0019      	movs	r1, r3
 8004466:	250a      	movs	r5, #10
 8004468:	197b      	adds	r3, r7, r5
 800446a:	1c22      	adds	r2, r4, #0
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	2308      	movs	r3, #8
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	1c02      	adds	r2, r0, #0
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	1dbb      	adds	r3, r7, #6
 8004478:	1c0a      	adds	r2, r1, #0
 800447a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800447c:	1dbb      	adds	r3, r7, #6
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	197b      	adds	r3, r7, r5
 8004484:	8819      	ldrh	r1, [r3, #0]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	4b23      	ldr	r3, [pc, #140]	; (8004518 <I2C_RequestMemoryRead+0xc0>)
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	f000 fa3f 	bl	8004910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 f8af 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e033      	b.n	800450e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ae:	2308      	movs	r3, #8
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
 80044bc:	e019      	b.n	80044f2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044be:	2308      	movs	r3, #8
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f890 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d001      	beq.n	80044e4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e014      	b.n	800450e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	2308      	movs	r3, #8
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	0013      	movs	r3, r2
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	f000 f82e 	bl	8004560 <I2C_WaitOnFlagUntilTimeout>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d001      	beq.n	800450c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bdb0      	pop	{r4, r5, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	80002000 	.word	0x80002000

0800451c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2202      	movs	r2, #2
 800452c:	4013      	ands	r3, r2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d103      	bne.n	800453a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	2b01      	cmp	r3, #1
 8004546:	d007      	beq.n	8004558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
  }
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b002      	add	sp, #8
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004570:	e030      	b.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	d02d      	beq.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7ff f8a4 	bl	80036c4 <HAL_GetTick>
 800457c:	0002      	movs	r2, r0
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d122      	bne.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	425a      	negs	r2, r3
 800459e:	4153      	adcs	r3, r2
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	001a      	movs	r2, r3
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d113      	bne.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	2220      	movs	r2, #32
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2241      	movs	r2, #65	; 0x41
 80045bc:	2120      	movs	r1, #32
 80045be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2242      	movs	r2, #66	; 0x42
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e00f      	b.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	425a      	negs	r2, r3
 80045e4:	4153      	adcs	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	001a      	movs	r2, r3
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d0bf      	beq.n	8004572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004608:	e032      	b.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f87d 	bl	8004710 <I2C_IsErrorOccurred>
 8004616:	1e03      	subs	r3, r0, #0
 8004618:	d001      	beq.n	800461e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e030      	b.n	8004680 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	d025      	beq.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7ff f84e 	bl	80036c4 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11a      	bne.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2202      	movs	r2, #2
 8004642:	4013      	ands	r3, r2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d013      	beq.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	2220      	movs	r2, #32
 800464e:	431a      	orrs	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2241      	movs	r2, #65	; 0x41
 8004658:	2120      	movs	r1, #32
 800465a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2242      	movs	r2, #66	; 0x42
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e007      	b.n	8004680 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2202      	movs	r2, #2
 8004678:	4013      	ands	r3, r2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d1c5      	bne.n	800460a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b004      	add	sp, #16
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004694:	e02f      	b.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	0018      	movs	r0, r3
 800469e:	f000 f837 	bl	8004710 <I2C_IsErrorOccurred>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02d      	b.n	8004706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7ff f80b 	bl	80036c4 <HAL_GetTick>
 80046ae:	0002      	movs	r2, r0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d11a      	bne.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2220      	movs	r2, #32
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d013      	beq.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	2220      	movs	r2, #32
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2241      	movs	r2, #65	; 0x41
 80046de:	2120      	movs	r1, #32
 80046e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2242      	movs	r2, #66	; 0x42
 80046e6:	2100      	movs	r1, #0
 80046e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2220      	movs	r2, #32
 80046fe:	4013      	ands	r3, r2
 8004700:	2b20      	cmp	r3, #32
 8004702:	d1c8      	bne.n	8004696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2327      	movs	r3, #39	; 0x27
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2210      	movs	r2, #16
 8004738:	4013      	ands	r3, r2
 800473a:	d100      	bne.n	800473e <I2C_IsErrorOccurred+0x2e>
 800473c:	e082      	b.n	8004844 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2210      	movs	r2, #16
 8004744:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004746:	e060      	b.n	800480a <I2C_IsErrorOccurred+0xfa>
 8004748:	2427      	movs	r4, #39	; 0x27
 800474a:	193b      	adds	r3, r7, r4
 800474c:	193a      	adds	r2, r7, r4
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3301      	adds	r3, #1
 8004756:	d058      	beq.n	800480a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fe ffb4 	bl	80036c4 <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	d306      	bcc.n	8004776 <I2C_IsErrorOccurred+0x66>
 8004768:	193b      	adds	r3, r7, r4
 800476a:	193a      	adds	r2, r7, r4
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d149      	bne.n	800480a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	4013      	ands	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004784:	2013      	movs	r0, #19
 8004786:	183b      	adds	r3, r7, r0
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	2142      	movs	r1, #66	; 0x42
 800478c:	5c52      	ldrb	r2, [r2, r1]
 800478e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	401a      	ands	r2, r3
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d126      	bne.n	80047f2 <I2C_IsErrorOccurred+0xe2>
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	01db      	lsls	r3, r3, #7
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d021      	beq.n	80047f2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d01d      	beq.n	80047f2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2180      	movs	r1, #128	; 0x80
 80047c2:	01c9      	lsls	r1, r1, #7
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047c8:	f7fe ff7c 	bl	80036c4 <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d0:	e00f      	b.n	80047f2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047d2:	f7fe ff77 	bl	80036c4 <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b19      	cmp	r3, #25
 80047de:	d908      	bls.n	80047f2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2220      	movs	r2, #32
 80047e4:	4313      	orrs	r3, r2
 80047e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047e8:	2327      	movs	r3, #39	; 0x27
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]

              break;
 80047f0:	e00b      	b.n	800480a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2220      	movs	r2, #32
 80047fa:	4013      	ands	r3, r2
 80047fc:	2127      	movs	r1, #39	; 0x27
 80047fe:	187a      	adds	r2, r7, r1
 8004800:	1879      	adds	r1, r7, r1
 8004802:	7809      	ldrb	r1, [r1, #0]
 8004804:	7011      	strb	r1, [r2, #0]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d1e3      	bne.n	80047d2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2220      	movs	r2, #32
 8004812:	4013      	ands	r3, r2
 8004814:	2b20      	cmp	r3, #32
 8004816:	d004      	beq.n	8004822 <I2C_IsErrorOccurred+0x112>
 8004818:	2327      	movs	r3, #39	; 0x27
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d092      	beq.n	8004748 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004822:	2327      	movs	r3, #39	; 0x27
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	2204      	movs	r2, #4
 8004838:	4313      	orrs	r3, r2
 800483a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800483c:	2327      	movs	r3, #39	; 0x27
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	4013      	ands	r3, r2
 8004854:	d00c      	beq.n	8004870 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2201      	movs	r2, #1
 800485a:	4313      	orrs	r3, r2
 800485c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	0052      	lsls	r2, r2, #1
 8004866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004868:	2327      	movs	r3, #39	; 0x27
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4013      	ands	r3, r2
 8004878:	d00c      	beq.n	8004894 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2208      	movs	r2, #8
 800487e:	4313      	orrs	r3, r2
 8004880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	00d2      	lsls	r2, r2, #3
 800488a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800488c:	2327      	movs	r3, #39	; 0x27
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d00c      	beq.n	80048b8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2202      	movs	r2, #2
 80048a2:	4313      	orrs	r3, r2
 80048a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048b0:	2327      	movs	r3, #39	; 0x27
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80048b8:	2327      	movs	r3, #39	; 0x27
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01d      	beq.n	80048fe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe29 	bl	800451c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	490d      	ldr	r1, [pc, #52]	; (800490c <I2C_IsErrorOccurred+0x1fc>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2241      	movs	r2, #65	; 0x41
 80048ea:	2120      	movs	r1, #32
 80048ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2242      	movs	r2, #66	; 0x42
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2240      	movs	r2, #64	; 0x40
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80048fe:	2327      	movs	r3, #39	; 0x27
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b00b      	add	sp, #44	; 0x2c
 800490a:	bd90      	pop	{r4, r7, pc}
 800490c:	fe00e800 	.word	0xfe00e800

08004910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	0008      	movs	r0, r1
 800491a:	0011      	movs	r1, r2
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	240a      	movs	r4, #10
 8004920:	193b      	adds	r3, r7, r4
 8004922:	1c02      	adds	r2, r0, #0
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	2009      	movs	r0, #9
 8004928:	183b      	adds	r3, r7, r0
 800492a:	1c0a      	adds	r2, r1, #0
 800492c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800492e:	193b      	adds	r3, r7, r4
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	059b      	lsls	r3, r3, #22
 8004934:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004936:	183b      	adds	r3, r7, r0
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	0419      	lsls	r1, r3, #16
 800493c:	23ff      	movs	r3, #255	; 0xff
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004942:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	4313      	orrs	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495a:	0d51      	lsrs	r1, r2, #21
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	00d2      	lsls	r2, r2, #3
 8004960:	400a      	ands	r2, r1
 8004962:	4907      	ldr	r1, [pc, #28]	; (8004980 <I2C_TransferConfig+0x70>)
 8004964:	430a      	orrs	r2, r1
 8004966:	43d2      	mvns	r2, r2
 8004968:	401a      	ands	r2, r3
 800496a:	0011      	movs	r1, r2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b007      	add	sp, #28
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	03ff63ff 	.word	0x03ff63ff

08004984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2241      	movs	r2, #65	; 0x41
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d138      	bne.n	8004a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	5c9b      	ldrb	r3, [r3, r2]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e032      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	2101      	movs	r1, #1
 80049ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2241      	movs	r2, #65	; 0x41
 80049b4:	2124      	movs	r1, #36	; 0x24
 80049b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2241      	movs	r2, #65	; 0x41
 80049fc:	2120      	movs	r1, #32
 80049fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	ffffefff 	.word	0xffffefff

08004a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2241      	movs	r2, #65	; 0x41
 8004a2a:	5c9b      	ldrb	r3, [r3, r2]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d139      	bne.n	8004aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e033      	b.n	8004aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2240      	movs	r2, #64	; 0x40
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2241      	movs	r2, #65	; 0x41
 8004a4c:	2124      	movs	r1, #36	; 0x24
 8004a4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2241      	movs	r2, #65	; 0x41
 8004a96:	2120      	movs	r1, #32
 8004a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2240      	movs	r2, #64	; 0x40
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b004      	add	sp, #16
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fffff0ff 	.word	0xfffff0ff

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f000 fb76 	bl	80051b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x20>
 8004ad2:	e08e      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ad4:	4bc5      	ldr	r3, [pc, #788]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	220c      	movs	r2, #12
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d00e      	beq.n	8004afe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ae0:	4bc2      	ldr	r3, [pc, #776]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	220c      	movs	r2, #12
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d117      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
 8004aec:	4bbf      	ldr	r3, [pc, #764]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	401a      	ands	r2, r3
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10e      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afe:	4bbb      	ldr	r3, [pc, #748]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4013      	ands	r3, r2
 8004b08:	d100      	bne.n	8004b0c <HAL_RCC_OscConfig+0x58>
 8004b0a:	e071      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d000      	beq.n	8004b16 <HAL_RCC_OscConfig+0x62>
 8004b14:	e06c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f000 fb4c 	bl	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x80>
 8004b24:	4bb1      	ldr	r3, [pc, #708]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4bb0      	ldr	r3, [pc, #704]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0249      	lsls	r1, r1, #9
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e02f      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b3c:	4bab      	ldr	r3, [pc, #684]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4baa      	ldr	r3, [pc, #680]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b42:	49ab      	ldr	r1, [pc, #684]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	4ba8      	ldr	r3, [pc, #672]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4ba7      	ldr	r3, [pc, #668]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4e:	49a9      	ldr	r1, [pc, #676]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e01e      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10e      	bne.n	8004b7c <HAL_RCC_OscConfig+0xc8>
 8004b5e:	4ba3      	ldr	r3, [pc, #652]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	02c9      	lsls	r1, r1, #11
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	4b9f      	ldr	r3, [pc, #636]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0249      	lsls	r1, r1, #9
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b7c:	4b9b      	ldr	r3, [pc, #620]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b82:	499b      	ldr	r1, [pc, #620]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b97      	ldr	r3, [pc, #604]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8e:	4999      	ldr	r1, [pc, #612]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d014      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe fd92 	bl	80036c4 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba6:	f7fe fd8d 	bl	80036c4 <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	; 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e2fd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0xf2>
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fd7d 	bl	80036c4 <HAL_GetTick>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fe fd78 	bl	80036c4 <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e2e8      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	4013      	ands	r3, r2
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x11c>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <HAL_RCC_OscConfig+0x14a>
 8004bfc:	e06c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	220c      	movs	r2, #12
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c08:	4b78      	ldr	r3, [pc, #480]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11f      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	025b      	lsls	r3, r3, #9
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b71      	ldr	r3, [pc, #452]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e2bb      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22f8      	movs	r2, #248	; 0xf8
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00da      	lsls	r2, r3, #3
 8004c4c:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e041      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d024      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe fd2c 	bl	80036c4 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe fd27 	bl	80036c4 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e297      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d0f1      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22f8      	movs	r2, #248	; 0xf8
 8004c94:	4393      	bics	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cac:	2101      	movs	r1, #1
 8004cae:	438a      	bics	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fd07 	bl	80036c4 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fe fd02 	bl	80036c4 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e272      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d1f1      	bne.n	8004cbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe fce5 	bl	80036c4 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fe fce0 	bl	80036c4 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e250      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f1      	beq.n	8004d00 <HAL_RCC_OscConfig+0x24c>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d24:	2101      	movs	r1, #1
 8004d26:	438a      	bics	r2, r1
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fccb 	bl	80036c4 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fe fcc6 	bl	80036c4 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e236      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d1f1      	bne.n	8004d34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2204      	movs	r2, #4
 8004d56:	4013      	ands	r3, r2
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2a8>
 8004d5a:	e0b5      	b.n	8004ec8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5c:	201f      	movs	r0, #31
 8004d5e:	183b      	adds	r3, r7, r0
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	055b      	lsls	r3, r3, #21
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d110      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	0549      	lsls	r1, r1, #21
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	055b      	lsls	r3, r3, #21
 8004d86:	4013      	ands	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0049      	lsls	r1, r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dac:	f7fe fc8a 	bl	80036c4 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fe fc85 	bl	80036c4 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b64      	cmp	r3, #100	; 0x64
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1f5      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10f      	bne.n	8004dfc <HAL_RCC_OscConfig+0x348>
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e036      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000
 8004df0:	fffeffff 	.word	0xfffeffff
 8004df4:	fffbffff 	.word	0xfffbffff
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x36a>
 8004e04:	4bca      	ldr	r3, [pc, #808]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	4bc9      	ldr	r3, [pc, #804]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	621a      	str	r2, [r3, #32]
 8004e10:	4bc7      	ldr	r3, [pc, #796]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	4bc6      	ldr	r3, [pc, #792]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e16:	2104      	movs	r1, #4
 8004e18:	438a      	bics	r2, r1
 8004e1a:	621a      	str	r2, [r3, #32]
 8004e1c:	e01c      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x38c>
 8004e26:	4bc2      	ldr	r3, [pc, #776]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	4bc1      	ldr	r3, [pc, #772]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	4bbf      	ldr	r3, [pc, #764]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	4bbe      	ldr	r3, [pc, #760]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	621a      	str	r2, [r3, #32]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e40:	4bbb      	ldr	r3, [pc, #748]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	4bba      	ldr	r3, [pc, #744]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e46:	2101      	movs	r1, #1
 8004e48:	438a      	bics	r2, r1
 8004e4a:	621a      	str	r2, [r3, #32]
 8004e4c:	4bb8      	ldr	r3, [pc, #736]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	4bb7      	ldr	r3, [pc, #732]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d014      	beq.n	8004e8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e60:	f7fe fc30 	bl	80036c4 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e009      	b.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fe fc2b 	bl	80036c4 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4aaf      	ldr	r2, [pc, #700]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e19a      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	4bac      	ldr	r3, [pc, #688]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x3b6>
 8004e88:	e013      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fe fc1b 	bl	80036c4 <HAL_GetTick>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fe fc16 	bl	80036c4 <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	4aa5      	ldr	r2, [pc, #660]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e185      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea8:	4ba1      	ldr	r3, [pc, #644]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	2202      	movs	r2, #2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	4b9b      	ldr	r3, [pc, #620]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	499d      	ldr	r1, [pc, #628]	; (8005138 <HAL_RCC_OscConfig+0x684>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d12a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eda:	4b95      	ldr	r3, [pc, #596]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	4b94      	ldr	r3, [pc, #592]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004ee6:	4b92      	ldr	r3, [pc, #584]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	4b91      	ldr	r3, [pc, #580]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef2:	f7fe fbe7 	bl	80036c4 <HAL_GetTick>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004efc:	f7fe fbe2 	bl	80036c4 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e152      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f0e:	4b88      	ldr	r3, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	2202      	movs	r2, #2
 8004f14:	4013      	ands	r3, r2
 8004f16:	d0f1      	beq.n	8004efc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f18:	4b85      	ldr	r3, [pc, #532]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	22f8      	movs	r2, #248	; 0xf8
 8004f1e:	4393      	bics	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2e:	e034      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	3305      	adds	r3, #5
 8004f36:	d111      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f38:	4b7d      	ldr	r3, [pc, #500]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	2104      	movs	r1, #4
 8004f40:	438a      	bics	r2, r1
 8004f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f44:	4b7a      	ldr	r3, [pc, #488]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	22f8      	movs	r2, #248	; 0xf8
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	4b76      	ldr	r3, [pc, #472]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5a:	e01e      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f5c:	4b74      	ldr	r3, [pc, #464]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f60:	4b73      	ldr	r3, [pc, #460]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f62:	2104      	movs	r1, #4
 8004f64:	430a      	orrs	r2, r1
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f68:	4b71      	ldr	r3, [pc, #452]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fe fba6 	bl	80036c4 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7e:	f7fe fba1 	bl	80036c4 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e111      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f90:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d1f1      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d05c      	beq.n	800505e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	220c      	movs	r2, #12
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d00e      	beq.n	8004fce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	220c      	movs	r2, #12
 8004fb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d114      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fbc:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	23c0      	movs	r3, #192	; 0xc0
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	23c0      	movs	r3, #192	; 0xc0
 8004fc8:	025b      	lsls	r3, r3, #9
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fce:	4b58      	ldr	r3, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d040      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d03c      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0e6      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01b      	beq.n	8005026 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fee:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	0249      	lsls	r1, r1, #9
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fb62 	bl	80036c4 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005006:	f7fe fb5d 	bl	80036c4 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0cd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005018:	4b45      	ldr	r3, [pc, #276]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800501a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	029b      	lsls	r3, r3, #10
 8005020:	4013      	ands	r3, r2
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x552>
 8005024:	e01b      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800502c:	4943      	ldr	r1, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x688>)
 800502e:	400a      	ands	r2, r1
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fe fb47 	bl	80036c4 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800503c:	f7fe fb42 	bl	80036c4 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0b2      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	4013      	ands	r3, r2
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x588>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800505c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x5b4>
 8005066:	e0a4      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	220c      	movs	r2, #12
 800506e:	4013      	ands	r3, r2
 8005070:	2b08      	cmp	r3, #8
 8005072:	d100      	bne.n	8005076 <HAL_RCC_OscConfig+0x5c2>
 8005074:	e078      	b.n	8005168 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b02      	cmp	r3, #2
 800507c:	d14c      	bne.n	8005118 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005084:	492e      	ldr	r1, [pc, #184]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005086:	400a      	ands	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fe fb1b 	bl	80036c4 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fe fb16 	bl	80036c4 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e086      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	4b22      	ldr	r3, [pc, #136]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	049b      	lsls	r3, r3, #18
 80050ae:	4013      	ands	r3, r2
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b2:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	220f      	movs	r2, #15
 80050b8:	4393      	bics	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_RCC_OscConfig+0x690>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	431a      	orrs	r2, r3
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	0449      	lsls	r1, r1, #17
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fae9 	bl	80036c4 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fe fae4 	bl	80036c4 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e054      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	049b      	lsls	r3, r3, #18
 8005112:	4013      	ands	r3, r2
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x644>
 8005116:	e04c      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511e:	4908      	ldr	r1, [pc, #32]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fe face 	bl	80036c4 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x6a6>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	40021000 	.word	0x40021000
 8005134:	00001388 	.word	0x00001388
 8005138:	efffffff 	.word	0xefffffff
 800513c:	fffeffff 	.word	0xfffeffff
 8005140:	feffffff 	.word	0xfeffffff
 8005144:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005148:	f7fe fabc 	bl	80036c4 <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e02c      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	049b      	lsls	r3, r3, #18
 8005162:	4013      	ands	r3, r2
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x694>
 8005166:	e024      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e01f      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	429a      	cmp	r2, r3
 800518e:	d10e      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	220f      	movs	r2, #15
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d107      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	23f0      	movs	r3, #240	; 0xf0
 80051a2:	039b      	lsls	r3, r3, #14
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b008      	add	sp, #32
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0bf      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d911      	bls.n	8005206 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b5e      	ldr	r3, [pc, #376]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	4b5b      	ldr	r3, [pc, #364]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a6      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2202      	movs	r2, #2
 800520c:	4013      	ands	r3, r2
 800520e:	d015      	beq.n	800523c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2204      	movs	r2, #4
 8005216:	4013      	ands	r3, r2
 8005218:	d006      	beq.n	8005228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800521a:	4b51      	ldr	r3, [pc, #324]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005220:	21e0      	movs	r1, #224	; 0xe0
 8005222:	00c9      	lsls	r1, r1, #3
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	22f0      	movs	r2, #240	; 0xf0
 800522e:	4393      	bics	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d04c      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b44      	ldr	r3, [pc, #272]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	4013      	ands	r3, r2
 8005258:	d120      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07a      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d114      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e06e      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	4013      	ands	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e062      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e05b      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fe fa08 	bl	80036c4 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fe fa03 	bl	80036c4 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_RCC_ClockConfig+0x1a4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e042      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	220c      	movs	r2, #12
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ec      	bne.n	80052ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d211      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b18      	ldr	r3, [pc, #96]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	4013      	ands	r3, r2
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e020      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2204      	movs	r2, #4
 8005318:	4013      	ands	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_RCC_ClockConfig+0x1a8>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005330:	f000 f820 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005334:	0001      	movs	r1, r0
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	220f      	movs	r2, #15
 800533e:	4013      	ands	r3, r2
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_RCC_ClockConfig+0x1ac>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	000a      	movs	r2, r1
 8005346:	40da      	lsrs	r2, r3
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x1b0>)
 800534a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800534c:	2003      	movs	r0, #3
 800534e:	f7fe f973 	bl	8003638 <HAL_InitTick>
  
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b004      	add	sp, #16
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	00001388 	.word	0x00001388
 8005368:	fffff8ff 	.word	0xfffff8ff
 800536c:	0800651c 	.word	0x0800651c
 8005370:	20000000 	.word	0x20000000

08005374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800538e:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	220c      	movs	r2, #12
 8005398:	4013      	ands	r3, r2
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d046      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0xb8>
 800539e:	d848      	bhi.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d002      	beq.n	80053aa <HAL_RCC_GetSysClockFreq+0x36>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d003      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80053a8:	e043      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053aa:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053ac:	613b      	str	r3, [r7, #16]
      break;
 80053ae:	e043      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	0c9b      	lsrs	r3, r3, #18
 80053b4:	220f      	movs	r2, #15
 80053b6:	4013      	ands	r3, r2
 80053b8:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_RCC_GetSysClockFreq+0xd8>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	220f      	movs	r2, #15
 80053c4:	4013      	ands	r3, r2
 80053c6:	4a22      	ldr	r2, [pc, #136]	; (8005450 <HAL_RCC_GetSysClockFreq+0xdc>)
 80053c8:	5cd3      	ldrb	r3, [r2, r3]
 80053ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	025b      	lsls	r3, r3, #9
 80053d2:	401a      	ands	r2, r3
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	429a      	cmp	r2, r3
 80053da:	d109      	bne.n	80053f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	481a      	ldr	r0, [pc, #104]	; (8005448 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053e0:	f7fa fe90 	bl	8000104 <__udivsi3>
 80053e4:	0003      	movs	r3, r0
 80053e6:	001a      	movs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4353      	muls	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e01a      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	23c0      	movs	r3, #192	; 0xc0
 80053f4:	025b      	lsls	r3, r3, #9
 80053f6:	401a      	ands	r2, r3
 80053f8:	23c0      	movs	r3, #192	; 0xc0
 80053fa:	025b      	lsls	r3, r3, #9
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d109      	bne.n	8005414 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4814      	ldr	r0, [pc, #80]	; (8005454 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005404:	f7fa fe7e 	bl	8000104 <__udivsi3>
 8005408:	0003      	movs	r3, r0
 800540a:	001a      	movs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4353      	muls	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e008      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	480c      	ldr	r0, [pc, #48]	; (8005448 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005418:	f7fa fe74 	bl	8000104 <__udivsi3>
 800541c:	0003      	movs	r3, r0
 800541e:	001a      	movs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4353      	muls	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	613b      	str	r3, [r7, #16]
      break;
 800542a:	e005      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_GetSysClockFreq+0xe0>)
 800542e:	613b      	str	r3, [r7, #16]
      break;
 8005430:	e002      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005434:	613b      	str	r3, [r7, #16]
      break;
 8005436:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005438:	693b      	ldr	r3, [r7, #16]
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b006      	add	sp, #24
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	40021000 	.word	0x40021000
 8005448:	007a1200 	.word	0x007a1200
 800544c:	08006534 	.word	0x08006534
 8005450:	08006544 	.word	0x08006544
 8005454:	02dc6c00 	.word	0x02dc6c00

08005458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <HAL_RCC_GetHCLKFreq+0x10>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005470:	f7ff fff2 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8005474:	0001      	movs	r1, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	4a04      	ldr	r2, [pc, #16]	; (8005494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005482:	5cd3      	ldrb	r3, [r2, r3]
 8005484:	40d9      	lsrs	r1, r3
 8005486:	000b      	movs	r3, r1
}    
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	40021000 	.word	0x40021000
 8005494:	0800652c 	.word	0x0800652c

08005498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e044      	b.n	8005534 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2278      	movs	r2, #120	; 0x78
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fe f815 	bl	80034ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2101      	movs	r1, #1
 80054d4:	438a      	bics	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 f932 	bl	8005744 <UART_SetConfig>
 80054e0:	0003      	movs	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e024      	b.n	8005534 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 fb0d 	bl	8005b14 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	490d      	ldr	r1, [pc, #52]	; (800553c <HAL_UART_Init+0xa4>)
 8005506:	400a      	ands	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	212a      	movs	r1, #42	; 0x2a
 8005516:	438a      	bics	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	430a      	orrs	r2, r1
 8005528:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f000 fba5 	bl	8005c7c <UART_CheckIdleState>
 8005532:	0003      	movs	r3, r0
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}
 800553c:	ffffb7ff 	.word	0xffffb7ff

08005540 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	1dbb      	adds	r3, r7, #6
 800554e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005554:	2b20      	cmp	r3, #32
 8005556:	d000      	beq.n	800555a <HAL_UART_Transmit+0x1a>
 8005558:	e08d      	b.n	8005676 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_UART_Transmit+0x28>
 8005560:	1dbb      	adds	r3, r7, #6
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e085      	b.n	8005678 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	015b      	lsls	r3, r3, #5
 8005574:	429a      	cmp	r2, r3
 8005576:	d109      	bne.n	800558c <HAL_UART_Transmit+0x4c>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2201      	movs	r2, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d001      	beq.n	800558c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e075      	b.n	8005678 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2284      	movs	r2, #132	; 0x84
 8005590:	2100      	movs	r1, #0
 8005592:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2221      	movs	r2, #33	; 0x21
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559a:	f7fe f893 	bl	80036c4 <HAL_GetTick>
 800559e:	0003      	movs	r3, r0
 80055a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1dba      	adds	r2, r7, #6
 80055a6:	2150      	movs	r1, #80	; 0x50
 80055a8:	8812      	ldrh	r2, [r2, #0]
 80055aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1dba      	adds	r2, r7, #6
 80055b0:	2152      	movs	r1, #82	; 0x52
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	015b      	lsls	r3, r3, #5
 80055be:	429a      	cmp	r2, r3
 80055c0:	d108      	bne.n	80055d4 <HAL_UART_Transmit+0x94>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e003      	b.n	80055dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055dc:	e030      	b.n	8005640 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	0013      	movs	r3, r2
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	f000 fbee 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d004      	beq.n	80055fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e03c      	b.n	8005678 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	881a      	ldrh	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	05d2      	lsls	r2, r2, #23
 800560e:	0dd2      	lsrs	r2, r2, #23
 8005610:	b292      	uxth	r2, r2
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	3302      	adds	r3, #2
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	e008      	b.n	800562e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	781a      	ldrb	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	b292      	uxth	r2, r2
 8005626:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2252      	movs	r2, #82	; 0x52
 8005632:	5a9b      	ldrh	r3, [r3, r2]
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b299      	uxth	r1, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2252      	movs	r2, #82	; 0x52
 800563e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2252      	movs	r2, #82	; 0x52
 8005644:	5a9b      	ldrh	r3, [r3, r2]
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1c8      	bne.n	80055de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	0013      	movs	r3, r2
 8005656:	2200      	movs	r2, #0
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	f000 fbb7 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 800565e:	1e03      	subs	r3, r0, #0
 8005660:	d004      	beq.n	800566c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e005      	b.n	8005678 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
  }
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b008      	add	sp, #32
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	1dbb      	adds	r3, r7, #6
 800568c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2280      	movs	r2, #128	; 0x80
 8005692:	589b      	ldr	r3, [r3, r2]
 8005694:	2b20      	cmp	r3, #32
 8005696:	d145      	bne.n	8005724 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_Receive_IT+0x26>
 800569e:	1dbb      	adds	r3, r7, #6
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e03d      	b.n	8005726 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	015b      	lsls	r3, r3, #5
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d109      	bne.n	80056ca <HAL_UART_Receive_IT+0x4a>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d105      	bne.n	80056ca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	d001      	beq.n	80056ca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e02d      	b.n	8005726 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	4013      	ands	r3, r2
 80056dc:	d019      	beq.n	8005712 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	613b      	str	r3, [r7, #16]
  return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	04c9      	lsls	r1, r1, #19
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005712:	1dbb      	adds	r3, r7, #6
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fbc0 	bl	8005ea0 <UART_Start_Receive_IT>
 8005720:	0003      	movs	r3, r0
 8005722:	e000      	b.n	8005726 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	0018      	movs	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	b008      	add	sp, #32
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	000a      	movs	r2, r1
 8005738:	1cbb      	adds	r3, r7, #2
 800573a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800574c:	231e      	movs	r3, #30
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4abe      	ldr	r2, [pc, #760]	; (8005a6c <UART_SetConfig+0x328>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4ab9      	ldr	r2, [pc, #740]	; (8005a70 <UART_SetConfig+0x32c>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4ab0      	ldr	r2, [pc, #704]	; (8005a74 <UART_SetConfig+0x330>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4aac      	ldr	r2, [pc, #688]	; (8005a78 <UART_SetConfig+0x334>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d127      	bne.n	800581a <UART_SetConfig+0xd6>
 80057ca:	4bac      	ldr	r3, [pc, #688]	; (8005a7c <UART_SetConfig+0x338>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	2203      	movs	r2, #3
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d00d      	beq.n	80057f2 <UART_SetConfig+0xae>
 80057d6:	d81b      	bhi.n	8005810 <UART_SetConfig+0xcc>
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d014      	beq.n	8005806 <UART_SetConfig+0xc2>
 80057dc:	d818      	bhi.n	8005810 <UART_SetConfig+0xcc>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <UART_SetConfig+0xa4>
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d00a      	beq.n	80057fc <UART_SetConfig+0xb8>
 80057e6:	e013      	b.n	8005810 <UART_SetConfig+0xcc>
 80057e8:	231f      	movs	r3, #31
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e0bd      	b.n	800596e <UART_SetConfig+0x22a>
 80057f2:	231f      	movs	r3, #31
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e0b8      	b.n	800596e <UART_SetConfig+0x22a>
 80057fc:	231f      	movs	r3, #31
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2204      	movs	r2, #4
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e0b3      	b.n	800596e <UART_SetConfig+0x22a>
 8005806:	231f      	movs	r3, #31
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2208      	movs	r2, #8
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e0ae      	b.n	800596e <UART_SetConfig+0x22a>
 8005810:	231f      	movs	r3, #31
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	2210      	movs	r2, #16
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e0a9      	b.n	800596e <UART_SetConfig+0x22a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a98      	ldr	r2, [pc, #608]	; (8005a80 <UART_SetConfig+0x33c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d134      	bne.n	800588e <UART_SetConfig+0x14a>
 8005824:	4b95      	ldr	r3, [pc, #596]	; (8005a7c <UART_SetConfig+0x338>)
 8005826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005828:	23c0      	movs	r3, #192	; 0xc0
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	4013      	ands	r3, r2
 800582e:	22c0      	movs	r2, #192	; 0xc0
 8005830:	0292      	lsls	r2, r2, #10
 8005832:	4293      	cmp	r3, r2
 8005834:	d017      	beq.n	8005866 <UART_SetConfig+0x122>
 8005836:	22c0      	movs	r2, #192	; 0xc0
 8005838:	0292      	lsls	r2, r2, #10
 800583a:	4293      	cmp	r3, r2
 800583c:	d822      	bhi.n	8005884 <UART_SetConfig+0x140>
 800583e:	2280      	movs	r2, #128	; 0x80
 8005840:	0292      	lsls	r2, r2, #10
 8005842:	4293      	cmp	r3, r2
 8005844:	d019      	beq.n	800587a <UART_SetConfig+0x136>
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	0292      	lsls	r2, r2, #10
 800584a:	4293      	cmp	r3, r2
 800584c:	d81a      	bhi.n	8005884 <UART_SetConfig+0x140>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <UART_SetConfig+0x118>
 8005852:	2280      	movs	r2, #128	; 0x80
 8005854:	0252      	lsls	r2, r2, #9
 8005856:	4293      	cmp	r3, r2
 8005858:	d00a      	beq.n	8005870 <UART_SetConfig+0x12c>
 800585a:	e013      	b.n	8005884 <UART_SetConfig+0x140>
 800585c:	231f      	movs	r3, #31
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e083      	b.n	800596e <UART_SetConfig+0x22a>
 8005866:	231f      	movs	r3, #31
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2202      	movs	r2, #2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e07e      	b.n	800596e <UART_SetConfig+0x22a>
 8005870:	231f      	movs	r3, #31
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	2204      	movs	r2, #4
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e079      	b.n	800596e <UART_SetConfig+0x22a>
 800587a:	231f      	movs	r3, #31
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2208      	movs	r2, #8
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e074      	b.n	800596e <UART_SetConfig+0x22a>
 8005884:	231f      	movs	r3, #31
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2210      	movs	r2, #16
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e06f      	b.n	800596e <UART_SetConfig+0x22a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a7c      	ldr	r2, [pc, #496]	; (8005a84 <UART_SetConfig+0x340>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d134      	bne.n	8005902 <UART_SetConfig+0x1be>
 8005898:	4b78      	ldr	r3, [pc, #480]	; (8005a7c <UART_SetConfig+0x338>)
 800589a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800589c:	23c0      	movs	r3, #192	; 0xc0
 800589e:	031b      	lsls	r3, r3, #12
 80058a0:	4013      	ands	r3, r2
 80058a2:	22c0      	movs	r2, #192	; 0xc0
 80058a4:	0312      	lsls	r2, r2, #12
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <UART_SetConfig+0x196>
 80058aa:	22c0      	movs	r2, #192	; 0xc0
 80058ac:	0312      	lsls	r2, r2, #12
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d822      	bhi.n	80058f8 <UART_SetConfig+0x1b4>
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	0312      	lsls	r2, r2, #12
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d019      	beq.n	80058ee <UART_SetConfig+0x1aa>
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	0312      	lsls	r2, r2, #12
 80058be:	4293      	cmp	r3, r2
 80058c0:	d81a      	bhi.n	80058f8 <UART_SetConfig+0x1b4>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <UART_SetConfig+0x18c>
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	02d2      	lsls	r2, r2, #11
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00a      	beq.n	80058e4 <UART_SetConfig+0x1a0>
 80058ce:	e013      	b.n	80058f8 <UART_SetConfig+0x1b4>
 80058d0:	231f      	movs	r3, #31
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e049      	b.n	800596e <UART_SetConfig+0x22a>
 80058da:	231f      	movs	r3, #31
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e044      	b.n	800596e <UART_SetConfig+0x22a>
 80058e4:	231f      	movs	r3, #31
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2204      	movs	r2, #4
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e03f      	b.n	800596e <UART_SetConfig+0x22a>
 80058ee:	231f      	movs	r3, #31
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2208      	movs	r2, #8
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e03a      	b.n	800596e <UART_SetConfig+0x22a>
 80058f8:	231f      	movs	r3, #31
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2210      	movs	r2, #16
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e035      	b.n	800596e <UART_SetConfig+0x22a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a60      	ldr	r2, [pc, #384]	; (8005a88 <UART_SetConfig+0x344>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0x1d2>
 800590c:	231f      	movs	r3, #31
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e02b      	b.n	800596e <UART_SetConfig+0x22a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <UART_SetConfig+0x348>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d104      	bne.n	800592a <UART_SetConfig+0x1e6>
 8005920:	231f      	movs	r3, #31
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e021      	b.n	800596e <UART_SetConfig+0x22a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <UART_SetConfig+0x34c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d104      	bne.n	800593e <UART_SetConfig+0x1fa>
 8005934:	231f      	movs	r3, #31
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e017      	b.n	800596e <UART_SetConfig+0x22a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a54      	ldr	r2, [pc, #336]	; (8005a94 <UART_SetConfig+0x350>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d104      	bne.n	8005952 <UART_SetConfig+0x20e>
 8005948:	231f      	movs	r3, #31
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e00d      	b.n	800596e <UART_SetConfig+0x22a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a50      	ldr	r2, [pc, #320]	; (8005a98 <UART_SetConfig+0x354>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d104      	bne.n	8005966 <UART_SetConfig+0x222>
 800595c:	231f      	movs	r3, #31
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e003      	b.n	800596e <UART_SetConfig+0x22a>
 8005966:	231f      	movs	r3, #31
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2210      	movs	r2, #16
 800596c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	429a      	cmp	r2, r3
 8005978:	d15c      	bne.n	8005a34 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800597a:	231f      	movs	r3, #31
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d015      	beq.n	80059b0 <UART_SetConfig+0x26c>
 8005984:	dc18      	bgt.n	80059b8 <UART_SetConfig+0x274>
 8005986:	2b04      	cmp	r3, #4
 8005988:	d00d      	beq.n	80059a6 <UART_SetConfig+0x262>
 800598a:	dc15      	bgt.n	80059b8 <UART_SetConfig+0x274>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <UART_SetConfig+0x252>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0x25c>
 8005994:	e010      	b.n	80059b8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005996:	f7ff fd69 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800599a:	0003      	movs	r3, r0
 800599c:	61bb      	str	r3, [r7, #24]
        break;
 800599e:	e012      	b.n	80059c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <UART_SetConfig+0x358>)
 80059a2:	61bb      	str	r3, [r7, #24]
        break;
 80059a4:	e00f      	b.n	80059c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7ff fce5 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 80059aa:	0003      	movs	r3, r0
 80059ac:	61bb      	str	r3, [r7, #24]
        break;
 80059ae:	e00a      	b.n	80059c6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	61bb      	str	r3, [r7, #24]
        break;
 80059b6:	e006      	b.n	80059c6 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059bc:	231e      	movs	r3, #30
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
        break;
 80059c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <UART_SetConfig+0x28a>
 80059cc:	e095      	b.n	8005afa <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	005a      	lsls	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	18d2      	adds	r2, r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	0019      	movs	r1, r3
 80059e0:	0010      	movs	r0, r2
 80059e2:	f7fa fb8f 	bl	8000104 <__udivsi3>
 80059e6:	0003      	movs	r3, r0
 80059e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d91c      	bls.n	8005a2a <UART_SetConfig+0x2e6>
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	025b      	lsls	r3, r3, #9
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d217      	bcs.n	8005a2a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	200e      	movs	r0, #14
 8005a00:	183b      	adds	r3, r7, r0
 8005a02:	210f      	movs	r1, #15
 8005a04:	438a      	bics	r2, r1
 8005a06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2207      	movs	r2, #7
 8005a10:	4013      	ands	r3, r2
 8005a12:	b299      	uxth	r1, r3
 8005a14:	183b      	adds	r3, r7, r0
 8005a16:	183a      	adds	r2, r7, r0
 8005a18:	8812      	ldrh	r2, [r2, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	183a      	adds	r2, r7, r0
 8005a24:	8812      	ldrh	r2, [r2, #0]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e067      	b.n	8005afa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2a:	231e      	movs	r3, #30
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e062      	b.n	8005afa <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a34:	231f      	movs	r3, #31
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d030      	beq.n	8005aa0 <UART_SetConfig+0x35c>
 8005a3e:	dc33      	bgt.n	8005aa8 <UART_SetConfig+0x364>
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d00d      	beq.n	8005a60 <UART_SetConfig+0x31c>
 8005a44:	dc30      	bgt.n	8005aa8 <UART_SetConfig+0x364>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <UART_SetConfig+0x30c>
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d005      	beq.n	8005a5a <UART_SetConfig+0x316>
 8005a4e:	e02b      	b.n	8005aa8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7ff fd0c 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8005a54:	0003      	movs	r3, r0
 8005a56:	61bb      	str	r3, [r7, #24]
        break;
 8005a58:	e02d      	b.n	8005ab6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <UART_SetConfig+0x358>)
 8005a5c:	61bb      	str	r3, [r7, #24]
        break;
 8005a5e:	e02a      	b.n	8005ab6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a60:	f7ff fc88 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005a64:	0003      	movs	r3, r0
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e025      	b.n	8005ab6 <UART_SetConfig+0x372>
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	efff69f3 	.word	0xefff69f3
 8005a70:	ffffcfff 	.word	0xffffcfff
 8005a74:	fffff4ff 	.word	0xfffff4ff
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40004800 	.word	0x40004800
 8005a88:	40004c00 	.word	0x40004c00
 8005a8c:	40005000 	.word	0x40005000
 8005a90:	40011400 	.word	0x40011400
 8005a94:	40011800 	.word	0x40011800
 8005a98:	40011c00 	.word	0x40011c00
 8005a9c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	61bb      	str	r3, [r7, #24]
        break;
 8005aa6:	e006      	b.n	8005ab6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aac:	231e      	movs	r3, #30
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
        break;
 8005ab4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01e      	beq.n	8005afa <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	085a      	lsrs	r2, r3, #1
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	18d2      	adds	r2, r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	0019      	movs	r1, r3
 8005acc:	0010      	movs	r0, r2
 8005ace:	f7fa fb19 	bl	8000104 <__udivsi3>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d90a      	bls.n	8005af2 <UART_SetConfig+0x3ae>
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	025b      	lsls	r3, r3, #9
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d205      	bcs.n	8005af2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	e003      	b.n	8005afa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005af2:	231e      	movs	r3, #30
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b06:	231e      	movs	r3, #30
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b008      	add	sp, #32
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2201      	movs	r2, #1
 8005b22:	4013      	ands	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <UART_AdvFeatureConfig+0x144>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2202      	movs	r2, #2
 8005b44:	4013      	ands	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a43      	ldr	r2, [pc, #268]	; (8005c5c <UART_AdvFeatureConfig+0x148>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2204      	movs	r2, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <UART_AdvFeatureConfig+0x14c>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2208      	movs	r2, #8
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <UART_AdvFeatureConfig+0x150>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2210      	movs	r2, #16
 8005baa:	4013      	ands	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <UART_AdvFeatureConfig+0x154>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2220      	movs	r2, #32
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <UART_AdvFeatureConfig+0x158>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	0019      	movs	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2240      	movs	r2, #64	; 0x40
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <UART_AdvFeatureConfig+0x15c>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	035b      	lsls	r3, r3, #13
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d10b      	bne.n	8005c2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <UART_AdvFeatureConfig+0x160>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <UART_AdvFeatureConfig+0x164>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	fffdffff 	.word	0xfffdffff
 8005c5c:	fffeffff 	.word	0xfffeffff
 8005c60:	fffbffff 	.word	0xfffbffff
 8005c64:	ffff7fff 	.word	0xffff7fff
 8005c68:	ffffefff 	.word	0xffffefff
 8005c6c:	ffffdfff 	.word	0xffffdfff
 8005c70:	ffefffff 	.word	0xffefffff
 8005c74:	ff9fffff 	.word	0xff9fffff
 8005c78:	fff7ffff 	.word	0xfff7ffff

08005c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b092      	sub	sp, #72	; 0x48
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2284      	movs	r2, #132	; 0x84
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c8c:	f7fd fd1a 	bl	80036c4 <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d12c      	bne.n	8005cfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	0391      	lsls	r1, r2, #14
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4a46      	ldr	r2, [pc, #280]	; (8005dc4 <UART_CheckIdleState+0x148>)
 8005cac:	9200      	str	r2, [sp, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f88c 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d021      	beq.n	8005cfc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	438a      	bics	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	f383 8810 	msr	PRIMASK, r3
}
 8005ce8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2278      	movs	r2, #120	; 0x78
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e05f      	b.n	8005dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2204      	movs	r2, #4
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d146      	bne.n	8005d98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	03d1      	lsls	r1, r2, #15
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <UART_CheckIdleState+0x148>)
 8005d14:	9200      	str	r2, [sp, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f858 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	d03b      	beq.n	8005d98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d20:	f3ef 8310 	mrs	r3, PRIMASK
 8005d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4921      	ldr	r1, [pc, #132]	; (8005dc8 <UART_CheckIdleState+0x14c>)
 8005d42:	400a      	ands	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f383 8810 	msr	PRIMASK, r3
}
 8005d50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d52:	f3ef 8310 	mrs	r3, PRIMASK
 8005d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f383 8810 	msr	PRIMASK, r3
}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2101      	movs	r1, #1
 8005d74:	438a      	bics	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	f383 8810 	msr	PRIMASK, r3
}
 8005d82:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	2120      	movs	r1, #32
 8005d8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2278      	movs	r2, #120	; 0x78
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e011      	b.n	8005dbc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	2120      	movs	r1, #32
 8005da4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2278      	movs	r2, #120	; 0x78
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b010      	add	sp, #64	; 0x40
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	01ffffff 	.word	0x01ffffff
 8005dc8:	fffffedf 	.word	0xfffffedf

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	1dfb      	adds	r3, r7, #7
 8005dda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e04b      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3301      	adds	r3, #1
 8005de2:	d048      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de4:	f7fd fc6e 	bl	80036c4 <HAL_GetTick>
 8005de8:	0002      	movs	r2, r0
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e04b      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2204      	movs	r2, #4
 8005e06:	4013      	ands	r3, r2
 8005e08:	d035      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d111      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f906 	bl	8006034 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2284      	movs	r2, #132	; 0x84
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2278      	movs	r2, #120	; 0x78
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e02c      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	401a      	ands	r2, r3
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d112      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f8e9 	bl	8006034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2284      	movs	r2, #132	; 0x84
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2278      	movs	r2, #120	; 0x78
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e00f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	425a      	negs	r2, r3
 8005e86:	4153      	adcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d0a4      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b090      	sub	sp, #64	; 0x40
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	1dbb      	adds	r3, r7, #6
 8005eac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1dba      	adds	r2, r7, #6
 8005eb8:	2158      	movs	r1, #88	; 0x58
 8005eba:	8812      	ldrh	r2, [r2, #0]
 8005ebc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1dba      	adds	r2, r7, #6
 8005ec2:	215a      	movs	r1, #90	; 0x5a
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	015b      	lsls	r3, r3, #5
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d10d      	bne.n	8005ef6 <UART_Start_Receive_IT+0x56>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <UART_Start_Receive_IT+0x4c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	225c      	movs	r2, #92	; 0x5c
 8005ee6:	4950      	ldr	r1, [pc, #320]	; (8006028 <UART_Start_Receive_IT+0x188>)
 8005ee8:	5299      	strh	r1, [r3, r2]
 8005eea:	e02e      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	225c      	movs	r2, #92	; 0x5c
 8005ef0:	21ff      	movs	r1, #255	; 0xff
 8005ef2:	5299      	strh	r1, [r3, r2]
 8005ef4:	e029      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <UART_Start_Receive_IT+0x7a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <UART_Start_Receive_IT+0x70>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	225c      	movs	r2, #92	; 0x5c
 8005f0a:	21ff      	movs	r1, #255	; 0xff
 8005f0c:	5299      	strh	r1, [r3, r2]
 8005f0e:	e01c      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	225c      	movs	r2, #92	; 0x5c
 8005f14:	217f      	movs	r1, #127	; 0x7f
 8005f16:	5299      	strh	r1, [r3, r2]
 8005f18:	e017      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	055b      	lsls	r3, r3, #21
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d10d      	bne.n	8005f42 <UART_Start_Receive_IT+0xa2>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <UART_Start_Receive_IT+0x98>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	225c      	movs	r2, #92	; 0x5c
 8005f32:	217f      	movs	r1, #127	; 0x7f
 8005f34:	5299      	strh	r1, [r3, r2]
 8005f36:	e008      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	225c      	movs	r2, #92	; 0x5c
 8005f3c:	213f      	movs	r1, #63	; 0x3f
 8005f3e:	5299      	strh	r1, [r3, r2]
 8005f40:	e003      	b.n	8005f4a <UART_Start_Receive_IT+0xaa>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	225c      	movs	r2, #92	; 0x5c
 8005f46:	2100      	movs	r1, #0
 8005f48:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2284      	movs	r2, #132	; 0x84
 8005f4e:	2100      	movs	r1, #0
 8005f50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	2122      	movs	r1, #34	; 0x22
 8005f58:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f64:	2301      	movs	r3, #1
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	015b      	lsls	r3, r3, #5
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d107      	bne.n	8005fa8 <UART_Start_Receive_IT+0x108>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a22      	ldr	r2, [pc, #136]	; (800602c <UART_Start_Receive_IT+0x18c>)
 8005fa4:	669a      	str	r2, [r3, #104]	; 0x68
 8005fa6:	e002      	b.n	8005fae <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <UART_Start_Receive_IT+0x190>)
 8005fac:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fba:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2190      	movs	r1, #144	; 0x90
 8005fd8:	0049      	lsls	r1, r1, #1
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	e018      	b.n	800601c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fea:	f3ef 8310 	mrs	r3, PRIMASK
 8005fee:	613b      	str	r3, [r7, #16]
  return(result);
 8005ff0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2120      	movs	r1, #32
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f383 8810 	msr	PRIMASK, r3
}
 800601a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b010      	add	sp, #64	; 0x40
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	000001ff 	.word	0x000001ff
 800602c:	080062b5 	.word	0x080062b5
 8006030:	080060fd 	.word	0x080060fd

08006034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	; 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800603c:	f3ef 8310 	mrs	r3, PRIMASK
 8006040:	617b      	str	r3, [r7, #20]
  return(result);
 8006042:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	2301      	movs	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f383 8810 	msr	PRIMASK, r3
}
 8006050:	46c0      	nop			; (mov r8, r8)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4926      	ldr	r1, [pc, #152]	; (80060f8 <UART_EndRxTransfer+0xc4>)
 800605e:	400a      	ands	r2, r1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f383 8810 	msr	PRIMASK, r3
}
 800606c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606e:	f3ef 8310 	mrs	r3, PRIMASK
 8006072:	623b      	str	r3, [r7, #32]
  return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
 8006078:	2301      	movs	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	f383 8810 	msr	PRIMASK, r3
}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2101      	movs	r1, #1
 8006090:	438a      	bics	r2, r1
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d118      	bne.n	80060da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b2:	2301      	movs	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2110      	movs	r1, #16
 80060ca:	438a      	bics	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	2120      	movs	r1, #32
 80060e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b00e      	add	sp, #56	; 0x38
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	fffffedf 	.word	0xfffffedf

080060fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b094      	sub	sp, #80	; 0x50
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006104:	204e      	movs	r0, #78	; 0x4e
 8006106:	183b      	adds	r3, r7, r0
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	215c      	movs	r1, #92	; 0x5c
 800610c:	5a52      	ldrh	r2, [r2, r1]
 800610e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	589b      	ldr	r3, [r3, r2]
 8006116:	2b22      	cmp	r3, #34	; 0x22
 8006118:	d000      	beq.n	800611c <UART_RxISR_8BIT+0x20>
 800611a:	e0ba      	b.n	8006292 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	214c      	movs	r1, #76	; 0x4c
 8006122:	187b      	adds	r3, r7, r1
 8006124:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006126:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006128:	187b      	adds	r3, r7, r1
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	183b      	adds	r3, r7, r0
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b2d9      	uxtb	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	400a      	ands	r2, r1
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	225a      	movs	r2, #90	; 0x5a
 800614c:	5a9b      	ldrh	r3, [r3, r2]
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b299      	uxth	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	225a      	movs	r2, #90	; 0x5a
 8006158:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	225a      	movs	r2, #90	; 0x5a
 800615e:	5a9b      	ldrh	r3, [r3, r2]
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d000      	beq.n	8006168 <UART_RxISR_8BIT+0x6c>
 8006166:	e09c      	b.n	80062a2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006168:	f3ef 8310 	mrs	r3, PRIMASK
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
 8006172:	2301      	movs	r3, #1
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	f383 8810 	msr	PRIMASK, r3
}
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4948      	ldr	r1, [pc, #288]	; (80062ac <UART_RxISR_8BIT+0x1b0>)
 800618a:	400a      	ands	r2, r1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	f383 8810 	msr	PRIMASK, r3
}
 8006198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619a:	f3ef 8310 	mrs	r3, PRIMASK
 800619e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	647b      	str	r3, [r7, #68]	; 0x44
 80061a4:	2301      	movs	r3, #1
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2101      	movs	r1, #1
 80061bc:	438a      	bics	r2, r1
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2280      	movs	r2, #128	; 0x80
 80061d0:	2120      	movs	r1, #32
 80061d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	4013      	ands	r3, r2
 80061ec:	d018      	beq.n	8006220 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ee:	f3ef 8310 	mrs	r3, PRIMASK
 80061f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80061f4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
 80061f8:	2301      	movs	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4928      	ldr	r1, [pc, #160]	; (80062b0 <UART_RxISR_8BIT+0x1b4>)
 8006210:	400a      	ands	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006224:	2b01      	cmp	r3, #1
 8006226:	d12f      	bne.n	8006288 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622e:	f3ef 8310 	mrs	r3, PRIMASK
 8006232:	60fb      	str	r3, [r7, #12]
  return(result);
 8006234:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006238:	2301      	movs	r3, #1
 800623a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f383 8810 	msr	PRIMASK, r3
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2110      	movs	r1, #16
 8006250:	438a      	bics	r2, r1
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006256:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f383 8810 	msr	PRIMASK, r3
}
 800625e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	2210      	movs	r2, #16
 8006268:	4013      	ands	r3, r2
 800626a:	2b10      	cmp	r3, #16
 800626c:	d103      	bne.n	8006276 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2210      	movs	r2, #16
 8006274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2258      	movs	r2, #88	; 0x58
 800627a:	5a9a      	ldrh	r2, [r3, r2]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0011      	movs	r1, r2
 8006280:	0018      	movs	r0, r3
 8006282:	f7ff fa54 	bl	800572e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006286:	e00c      	b.n	80062a2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	0018      	movs	r0, r3
 800628c:	f7fd f882 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8006290:	e007      	b.n	80062a2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2108      	movs	r1, #8
 800629e:	430a      	orrs	r2, r1
 80062a0:	619a      	str	r2, [r3, #24]
}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b014      	add	sp, #80	; 0x50
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	fffffedf 	.word	0xfffffedf
 80062b0:	fbffffff 	.word	0xfbffffff

080062b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b094      	sub	sp, #80	; 0x50
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062bc:	204e      	movs	r0, #78	; 0x4e
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	215c      	movs	r1, #92	; 0x5c
 80062c4:	5a52      	ldrh	r2, [r2, r1]
 80062c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2280      	movs	r2, #128	; 0x80
 80062cc:	589b      	ldr	r3, [r3, r2]
 80062ce:	2b22      	cmp	r3, #34	; 0x22
 80062d0:	d000      	beq.n	80062d4 <UART_RxISR_16BIT+0x20>
 80062d2:	e0ba      	b.n	800644a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	214c      	movs	r1, #76	; 0x4c
 80062da:	187b      	adds	r3, r7, r1
 80062dc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80062de:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80062e6:	187b      	adds	r3, r7, r1
 80062e8:	183a      	adds	r2, r7, r0
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	8812      	ldrh	r2, [r2, #0]
 80062ee:	4013      	ands	r3, r2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	225a      	movs	r2, #90	; 0x5a
 8006304:	5a9b      	ldrh	r3, [r3, r2]
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b299      	uxth	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	225a      	movs	r2, #90	; 0x5a
 8006310:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	225a      	movs	r2, #90	; 0x5a
 8006316:	5a9b      	ldrh	r3, [r3, r2]
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d000      	beq.n	8006320 <UART_RxISR_16BIT+0x6c>
 800631e:	e09c      	b.n	800645a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006320:	f3ef 8310 	mrs	r3, PRIMASK
 8006324:	623b      	str	r3, [r7, #32]
  return(result);
 8006326:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
 800632a:	2301      	movs	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	f383 8810 	msr	PRIMASK, r3
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4948      	ldr	r1, [pc, #288]	; (8006464 <UART_RxISR_16BIT+0x1b0>)
 8006342:	400a      	ands	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	f383 8810 	msr	PRIMASK, r3
}
 8006350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006352:	f3ef 8310 	mrs	r3, PRIMASK
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	643b      	str	r3, [r7, #64]	; 0x40
 800635c:	2301      	movs	r3, #1
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2101      	movs	r1, #1
 8006374:	438a      	bics	r2, r1
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	f383 8810 	msr	PRIMASK, r3
}
 8006382:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2280      	movs	r2, #128	; 0x80
 8006388:	2120      	movs	r1, #32
 800638a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	4013      	ands	r3, r2
 80063a4:	d018      	beq.n	80063d8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a6:	f3ef 8310 	mrs	r3, PRIMASK
 80063aa:	617b      	str	r3, [r7, #20]
  return(result);
 80063ac:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b0:	2301      	movs	r3, #1
 80063b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f383 8810 	msr	PRIMASK, r3
}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4928      	ldr	r1, [pc, #160]	; (8006468 <UART_RxISR_16BIT+0x1b4>)
 80063c8:	400a      	ands	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f383 8810 	msr	PRIMASK, r3
}
 80063d6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d12f      	bne.n	8006440 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ec:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80063f0:	2301      	movs	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f383 8810 	msr	PRIMASK, r3
}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2110      	movs	r1, #16
 8006408:	438a      	bics	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f383 8810 	msr	PRIMASK, r3
}
 8006416:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	2210      	movs	r2, #16
 8006420:	4013      	ands	r3, r2
 8006422:	2b10      	cmp	r3, #16
 8006424:	d103      	bne.n	800642e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2258      	movs	r2, #88	; 0x58
 8006432:	5a9a      	ldrh	r2, [r3, r2]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0011      	movs	r1, r2
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff f978 	bl	800572e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800643e:	e00c      	b.n	800645a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f7fc ffa6 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8006448:	e007      	b.n	800645a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2108      	movs	r1, #8
 8006456:	430a      	orrs	r2, r1
 8006458:	619a      	str	r2, [r3, #24]
}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	46bd      	mov	sp, r7
 800645e:	b014      	add	sp, #80	; 0x50
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	fffffedf 	.word	0xfffffedf
 8006468:	fbffffff 	.word	0xfbffffff

0800646c <memset>:
 800646c:	0003      	movs	r3, r0
 800646e:	1882      	adds	r2, r0, r2
 8006470:	4293      	cmp	r3, r2
 8006472:	d100      	bne.n	8006476 <memset+0xa>
 8006474:	4770      	bx	lr
 8006476:	7019      	strb	r1, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	e7f9      	b.n	8006470 <memset+0x4>

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	2600      	movs	r6, #0
 8006480:	4c0c      	ldr	r4, [pc, #48]	; (80064b4 <__libc_init_array+0x38>)
 8006482:	4d0d      	ldr	r5, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	2600      	movs	r6, #0
 800648e:	f000 f819 	bl	80064c4 <_init>
 8006492:	4c0a      	ldr	r4, [pc, #40]	; (80064bc <__libc_init_array+0x40>)
 8006494:	4d0a      	ldr	r5, [pc, #40]	; (80064c0 <__libc_init_array+0x44>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	00b3      	lsls	r3, r6, #2
 80064a2:	58eb      	ldr	r3, [r5, r3]
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	00b3      	lsls	r3, r6, #2
 80064ac:	58eb      	ldr	r3, [r5, r3]
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	08006554 	.word	0x08006554
 80064b8:	08006554 	.word	0x08006554
 80064bc:	08006558 	.word	0x08006558
 80064c0:	08006554 	.word	0x08006554

080064c4 <_init>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr

080064d0 <_fini>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr
