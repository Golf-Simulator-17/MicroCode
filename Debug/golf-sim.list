
golf-sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d20  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e5c  08006e5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006e5c  08006e5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e5c  08006e5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08006e70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08006e70  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbbb  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e56  00000000  00000000  0002cc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b4  00000000  00000000  0002f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a4b  00000000  00000000  0002fc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1d8  00000000  00000000  0003165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1474  00000000  00000000  0003f837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024b0  00000000  00000000  000e0cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006dc4 	.word	0x08006dc4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006dc4 	.word	0x08006dc4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 f89f 	bl	800053c <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 f82b 	bl	8000464 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f891 	bl	800053c <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f887 	bl	800053c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f837 	bl	80004b0 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f82d 	bl	80004b0 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__eqsf2>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	0042      	lsls	r2, r0, #1
 8000468:	0245      	lsls	r5, r0, #9
 800046a:	024e      	lsls	r6, r1, #9
 800046c:	004c      	lsls	r4, r1, #1
 800046e:	0fc3      	lsrs	r3, r0, #31
 8000470:	0a6d      	lsrs	r5, r5, #9
 8000472:	2001      	movs	r0, #1
 8000474:	0e12      	lsrs	r2, r2, #24
 8000476:	0a76      	lsrs	r6, r6, #9
 8000478:	0e24      	lsrs	r4, r4, #24
 800047a:	0fc9      	lsrs	r1, r1, #31
 800047c:	2aff      	cmp	r2, #255	; 0xff
 800047e:	d006      	beq.n	800048e <__eqsf2+0x2a>
 8000480:	2cff      	cmp	r4, #255	; 0xff
 8000482:	d003      	beq.n	800048c <__eqsf2+0x28>
 8000484:	42a2      	cmp	r2, r4
 8000486:	d101      	bne.n	800048c <__eqsf2+0x28>
 8000488:	42b5      	cmp	r5, r6
 800048a:	d006      	beq.n	800049a <__eqsf2+0x36>
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	2d00      	cmp	r5, #0
 8000490:	d1fc      	bne.n	800048c <__eqsf2+0x28>
 8000492:	2cff      	cmp	r4, #255	; 0xff
 8000494:	d1fa      	bne.n	800048c <__eqsf2+0x28>
 8000496:	2e00      	cmp	r6, #0
 8000498:	d1f8      	bne.n	800048c <__eqsf2+0x28>
 800049a:	428b      	cmp	r3, r1
 800049c:	d006      	beq.n	80004ac <__eqsf2+0x48>
 800049e:	2001      	movs	r0, #1
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	d1f3      	bne.n	800048c <__eqsf2+0x28>
 80004a4:	0028      	movs	r0, r5
 80004a6:	1e43      	subs	r3, r0, #1
 80004a8:	4198      	sbcs	r0, r3
 80004aa:	e7ef      	b.n	800048c <__eqsf2+0x28>
 80004ac:	2000      	movs	r0, #0
 80004ae:	e7ed      	b.n	800048c <__eqsf2+0x28>

080004b0 <__gesf2>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	0042      	lsls	r2, r0, #1
 80004b4:	0245      	lsls	r5, r0, #9
 80004b6:	024e      	lsls	r6, r1, #9
 80004b8:	004c      	lsls	r4, r1, #1
 80004ba:	0fc3      	lsrs	r3, r0, #31
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e12      	lsrs	r2, r2, #24
 80004c0:	0a76      	lsrs	r6, r6, #9
 80004c2:	0e24      	lsrs	r4, r4, #24
 80004c4:	0fc8      	lsrs	r0, r1, #31
 80004c6:	2aff      	cmp	r2, #255	; 0xff
 80004c8:	d01b      	beq.n	8000502 <__gesf2+0x52>
 80004ca:	2cff      	cmp	r4, #255	; 0xff
 80004cc:	d00e      	beq.n	80004ec <__gesf2+0x3c>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d11b      	bne.n	800050a <__gesf2+0x5a>
 80004d2:	2c00      	cmp	r4, #0
 80004d4:	d101      	bne.n	80004da <__gesf2+0x2a>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d01c      	beq.n	8000514 <__gesf2+0x64>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d00c      	beq.n	80004f8 <__gesf2+0x48>
 80004de:	4283      	cmp	r3, r0
 80004e0:	d01c      	beq.n	800051c <__gesf2+0x6c>
 80004e2:	2102      	movs	r1, #2
 80004e4:	1e58      	subs	r0, r3, #1
 80004e6:	4008      	ands	r0, r1
 80004e8:	3801      	subs	r0, #1
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d122      	bne.n	8000536 <__gesf2+0x86>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d1f4      	bne.n	80004de <__gesf2+0x2e>
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1f2      	bne.n	80004de <__gesf2+0x2e>
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d1f6      	bne.n	80004ea <__gesf2+0x3a>
 80004fc:	2001      	movs	r0, #1
 80004fe:	4240      	negs	r0, r0
 8000500:	e7f3      	b.n	80004ea <__gesf2+0x3a>
 8000502:	2d00      	cmp	r5, #0
 8000504:	d117      	bne.n	8000536 <__gesf2+0x86>
 8000506:	2cff      	cmp	r4, #255	; 0xff
 8000508:	d0f0      	beq.n	80004ec <__gesf2+0x3c>
 800050a:	2c00      	cmp	r4, #0
 800050c:	d1e7      	bne.n	80004de <__gesf2+0x2e>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d1e5      	bne.n	80004de <__gesf2+0x2e>
 8000512:	e7e6      	b.n	80004e2 <__gesf2+0x32>
 8000514:	2000      	movs	r0, #0
 8000516:	2d00      	cmp	r5, #0
 8000518:	d0e7      	beq.n	80004ea <__gesf2+0x3a>
 800051a:	e7e2      	b.n	80004e2 <__gesf2+0x32>
 800051c:	42a2      	cmp	r2, r4
 800051e:	dc05      	bgt.n	800052c <__gesf2+0x7c>
 8000520:	dbea      	blt.n	80004f8 <__gesf2+0x48>
 8000522:	42b5      	cmp	r5, r6
 8000524:	d802      	bhi.n	800052c <__gesf2+0x7c>
 8000526:	d3e7      	bcc.n	80004f8 <__gesf2+0x48>
 8000528:	2000      	movs	r0, #0
 800052a:	e7de      	b.n	80004ea <__gesf2+0x3a>
 800052c:	4243      	negs	r3, r0
 800052e:	4158      	adcs	r0, r3
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	3801      	subs	r0, #1
 8000534:	e7d9      	b.n	80004ea <__gesf2+0x3a>
 8000536:	2002      	movs	r0, #2
 8000538:	4240      	negs	r0, r0
 800053a:	e7d6      	b.n	80004ea <__gesf2+0x3a>

0800053c <__lesf2>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	0042      	lsls	r2, r0, #1
 8000540:	0245      	lsls	r5, r0, #9
 8000542:	024e      	lsls	r6, r1, #9
 8000544:	004c      	lsls	r4, r1, #1
 8000546:	0fc3      	lsrs	r3, r0, #31
 8000548:	0a6d      	lsrs	r5, r5, #9
 800054a:	0e12      	lsrs	r2, r2, #24
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	0e24      	lsrs	r4, r4, #24
 8000550:	0fc8      	lsrs	r0, r1, #31
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d00b      	beq.n	800056e <__lesf2+0x32>
 8000556:	2cff      	cmp	r4, #255	; 0xff
 8000558:	d00d      	beq.n	8000576 <__lesf2+0x3a>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d11f      	bne.n	800059e <__lesf2+0x62>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d116      	bne.n	8000590 <__lesf2+0x54>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d114      	bne.n	8000590 <__lesf2+0x54>
 8000566:	2000      	movs	r0, #0
 8000568:	2d00      	cmp	r5, #0
 800056a:	d010      	beq.n	800058e <__lesf2+0x52>
 800056c:	e009      	b.n	8000582 <__lesf2+0x46>
 800056e:	2d00      	cmp	r5, #0
 8000570:	d10c      	bne.n	800058c <__lesf2+0x50>
 8000572:	2cff      	cmp	r4, #255	; 0xff
 8000574:	d113      	bne.n	800059e <__lesf2+0x62>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d108      	bne.n	800058c <__lesf2+0x50>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d008      	beq.n	8000590 <__lesf2+0x54>
 800057e:	4283      	cmp	r3, r0
 8000580:	d012      	beq.n	80005a8 <__lesf2+0x6c>
 8000582:	2102      	movs	r1, #2
 8000584:	1e58      	subs	r0, r3, #1
 8000586:	4008      	ands	r0, r1
 8000588:	3801      	subs	r0, #1
 800058a:	e000      	b.n	800058e <__lesf2+0x52>
 800058c:	2002      	movs	r0, #2
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	2d00      	cmp	r5, #0
 8000592:	d1f4      	bne.n	800057e <__lesf2+0x42>
 8000594:	2800      	cmp	r0, #0
 8000596:	d1fa      	bne.n	800058e <__lesf2+0x52>
 8000598:	2001      	movs	r0, #1
 800059a:	4240      	negs	r0, r0
 800059c:	e7f7      	b.n	800058e <__lesf2+0x52>
 800059e:	2c00      	cmp	r4, #0
 80005a0:	d1ed      	bne.n	800057e <__lesf2+0x42>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d1eb      	bne.n	800057e <__lesf2+0x42>
 80005a6:	e7ec      	b.n	8000582 <__lesf2+0x46>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc05      	bgt.n	80005b8 <__lesf2+0x7c>
 80005ac:	dbf2      	blt.n	8000594 <__lesf2+0x58>
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d802      	bhi.n	80005b8 <__lesf2+0x7c>
 80005b2:	d3ef      	bcc.n	8000594 <__lesf2+0x58>
 80005b4:	2000      	movs	r0, #0
 80005b6:	e7ea      	b.n	800058e <__lesf2+0x52>
 80005b8:	4243      	negs	r3, r0
 80005ba:	4158      	adcs	r0, r3
 80005bc:	0040      	lsls	r0, r0, #1
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e5      	b.n	800058e <__lesf2+0x52>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__aeabi_fsub>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	46c6      	mov	lr, r8
 80005c8:	0243      	lsls	r3, r0, #9
 80005ca:	0a5b      	lsrs	r3, r3, #9
 80005cc:	0045      	lsls	r5, r0, #1
 80005ce:	00da      	lsls	r2, r3, #3
 80005d0:	0fc4      	lsrs	r4, r0, #31
 80005d2:	0248      	lsls	r0, r1, #9
 80005d4:	004f      	lsls	r7, r1, #1
 80005d6:	4694      	mov	ip, r2
 80005d8:	0a42      	lsrs	r2, r0, #9
 80005da:	001e      	movs	r6, r3
 80005dc:	4690      	mov	r8, r2
 80005de:	b500      	push	{lr}
 80005e0:	0e2d      	lsrs	r5, r5, #24
 80005e2:	0e3f      	lsrs	r7, r7, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	0980      	lsrs	r0, r0, #6
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d059      	beq.n	80006a0 <__aeabi_fsub+0xdc>
 80005ec:	2201      	movs	r2, #1
 80005ee:	4051      	eors	r1, r2
 80005f0:	428c      	cmp	r4, r1
 80005f2:	d039      	beq.n	8000668 <__aeabi_fsub+0xa4>
 80005f4:	1bea      	subs	r2, r5, r7
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	dd58      	ble.n	80006ac <__aeabi_fsub+0xe8>
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d068      	beq.n	80006d0 <__aeabi_fsub+0x10c>
 80005fe:	2dff      	cmp	r5, #255	; 0xff
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x40>
 8000602:	e0d1      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	04db      	lsls	r3, r3, #19
 8000608:	4318      	orrs	r0, r3
 800060a:	2a1b      	cmp	r2, #27
 800060c:	dc00      	bgt.n	8000610 <__aeabi_fsub+0x4c>
 800060e:	e0e3      	b.n	80007d8 <__aeabi_fsub+0x214>
 8000610:	2301      	movs	r3, #1
 8000612:	4662      	mov	r2, ip
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	015a      	lsls	r2, r3, #5
 8000618:	d400      	bmi.n	800061c <__aeabi_fsub+0x58>
 800061a:	e0ac      	b.n	8000776 <__aeabi_fsub+0x1b2>
 800061c:	019b      	lsls	r3, r3, #6
 800061e:	099e      	lsrs	r6, r3, #6
 8000620:	0030      	movs	r0, r6
 8000622:	f001 fbf1 	bl	8001e08 <__clzsi2>
 8000626:	0033      	movs	r3, r6
 8000628:	3805      	subs	r0, #5
 800062a:	4083      	lsls	r3, r0
 800062c:	4285      	cmp	r5, r0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_fsub+0x6e>
 8000630:	e0c6      	b.n	80007c0 <__aeabi_fsub+0x1fc>
 8000632:	4ab2      	ldr	r2, [pc, #712]	; (80008fc <__aeabi_fsub+0x338>)
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	4013      	ands	r3, r2
 8000638:	075a      	lsls	r2, r3, #29
 800063a:	d004      	beq.n	8000646 <__aeabi_fsub+0x82>
 800063c:	220f      	movs	r2, #15
 800063e:	401a      	ands	r2, r3
 8000640:	2a04      	cmp	r2, #4
 8000642:	d000      	beq.n	8000646 <__aeabi_fsub+0x82>
 8000644:	3304      	adds	r3, #4
 8000646:	015a      	lsls	r2, r3, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fsub+0x88>
 800064a:	e097      	b.n	800077c <__aeabi_fsub+0x1b8>
 800064c:	1c6a      	adds	r2, r5, #1
 800064e:	2dfe      	cmp	r5, #254	; 0xfe
 8000650:	d100      	bne.n	8000654 <__aeabi_fsub+0x90>
 8000652:	e084      	b.n	800075e <__aeabi_fsub+0x19a>
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	0a5e      	lsrs	r6, r3, #9
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	05d0      	lsls	r0, r2, #23
 800065c:	4330      	orrs	r0, r6
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4320      	orrs	r0, r4
 8000662:	bc80      	pop	{r7}
 8000664:	46b8      	mov	r8, r7
 8000666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000668:	1bea      	subs	r2, r5, r7
 800066a:	2a00      	cmp	r2, #0
 800066c:	dd41      	ble.n	80006f2 <__aeabi_fsub+0x12e>
 800066e:	2f00      	cmp	r7, #0
 8000670:	d06b      	beq.n	800074a <__aeabi_fsub+0x186>
 8000672:	2dff      	cmp	r5, #255	; 0xff
 8000674:	d100      	bne.n	8000678 <__aeabi_fsub+0xb4>
 8000676:	e097      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	04db      	lsls	r3, r3, #19
 800067c:	4318      	orrs	r0, r3
 800067e:	2a1b      	cmp	r2, #27
 8000680:	dc00      	bgt.n	8000684 <__aeabi_fsub+0xc0>
 8000682:	e0cc      	b.n	800081e <__aeabi_fsub+0x25a>
 8000684:	2301      	movs	r3, #1
 8000686:	4463      	add	r3, ip
 8000688:	015a      	lsls	r2, r3, #5
 800068a:	d574      	bpl.n	8000776 <__aeabi_fsub+0x1b2>
 800068c:	3501      	adds	r5, #1
 800068e:	2dff      	cmp	r5, #255	; 0xff
 8000690:	d065      	beq.n	800075e <__aeabi_fsub+0x19a>
 8000692:	2201      	movs	r2, #1
 8000694:	499a      	ldr	r1, [pc, #616]	; (8000900 <__aeabi_fsub+0x33c>)
 8000696:	401a      	ands	r2, r3
 8000698:	085b      	lsrs	r3, r3, #1
 800069a:	400b      	ands	r3, r1
 800069c:	4313      	orrs	r3, r2
 800069e:	e7cb      	b.n	8000638 <__aeabi_fsub+0x74>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d01f      	beq.n	80006e4 <__aeabi_fsub+0x120>
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d022      	beq.n	80006ee <__aeabi_fsub+0x12a>
 80006a8:	002a      	movs	r2, r5
 80006aa:	3aff      	subs	r2, #255	; 0xff
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d035      	beq.n	800071c <__aeabi_fsub+0x158>
 80006b0:	1b7a      	subs	r2, r7, r5
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fsub+0xf4>
 80006b6:	e099      	b.n	80007ec <__aeabi_fsub+0x228>
 80006b8:	4663      	mov	r3, ip
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fsub+0xfc>
 80006be:	e0dd      	b.n	800087c <__aeabi_fsub+0x2b8>
 80006c0:	1e53      	subs	r3, r2, #1
 80006c2:	2a01      	cmp	r2, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fsub+0x104>
 80006c6:	e105      	b.n	80008d4 <__aeabi_fsub+0x310>
 80006c8:	2aff      	cmp	r2, #255	; 0xff
 80006ca:	d06b      	beq.n	80007a4 <__aeabi_fsub+0x1e0>
 80006cc:	001a      	movs	r2, r3
 80006ce:	e094      	b.n	80007fa <__aeabi_fsub+0x236>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d073      	beq.n	80007bc <__aeabi_fsub+0x1f8>
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	d100      	bne.n	80006dc <__aeabi_fsub+0x118>
 80006da:	e0df      	b.n	800089c <__aeabi_fsub+0x2d8>
 80006dc:	2aff      	cmp	r2, #255	; 0xff
 80006de:	d063      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 80006e0:	000a      	movs	r2, r1
 80006e2:	e792      	b.n	800060a <__aeabi_fsub+0x46>
 80006e4:	2201      	movs	r2, #1
 80006e6:	4051      	eors	r1, r2
 80006e8:	42a1      	cmp	r1, r4
 80006ea:	d000      	beq.n	80006ee <__aeabi_fsub+0x12a>
 80006ec:	e782      	b.n	80005f4 <__aeabi_fsub+0x30>
 80006ee:	002a      	movs	r2, r5
 80006f0:	3aff      	subs	r2, #255	; 0xff
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d036      	beq.n	8000764 <__aeabi_fsub+0x1a0>
 80006f6:	1b7a      	subs	r2, r7, r5
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fsub+0x13a>
 80006fc:	e0aa      	b.n	8000854 <__aeabi_fsub+0x290>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x140>
 8000702:	e0da      	b.n	80008ba <__aeabi_fsub+0x2f6>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	4661      	mov	r1, ip
 8000708:	04db      	lsls	r3, r3, #19
 800070a:	4319      	orrs	r1, r3
 800070c:	468c      	mov	ip, r1
 800070e:	2a1b      	cmp	r2, #27
 8000710:	dc00      	bgt.n	8000714 <__aeabi_fsub+0x150>
 8000712:	e0d4      	b.n	80008be <__aeabi_fsub+0x2fa>
 8000714:	2301      	movs	r3, #1
 8000716:	003d      	movs	r5, r7
 8000718:	181b      	adds	r3, r3, r0
 800071a:	e7b5      	b.n	8000688 <__aeabi_fsub+0xc4>
 800071c:	27fe      	movs	r7, #254	; 0xfe
 800071e:	1c6a      	adds	r2, r5, #1
 8000720:	4217      	tst	r7, r2
 8000722:	d171      	bne.n	8000808 <__aeabi_fsub+0x244>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fsub+0x166>
 8000728:	e09e      	b.n	8000868 <__aeabi_fsub+0x2a4>
 800072a:	4663      	mov	r3, ip
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fsub+0x16e>
 8000730:	e0d5      	b.n	80008de <__aeabi_fsub+0x31a>
 8000732:	2200      	movs	r2, #0
 8000734:	2800      	cmp	r0, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fsub+0x176>
 8000738:	e78f      	b.n	800065a <__aeabi_fsub+0x96>
 800073a:	1a1b      	subs	r3, r3, r0
 800073c:	015e      	lsls	r6, r3, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fsub+0x17e>
 8000740:	e0d6      	b.n	80008f0 <__aeabi_fsub+0x32c>
 8000742:	4663      	mov	r3, ip
 8000744:	000c      	movs	r4, r1
 8000746:	1ac3      	subs	r3, r0, r3
 8000748:	e776      	b.n	8000638 <__aeabi_fsub+0x74>
 800074a:	2800      	cmp	r0, #0
 800074c:	d036      	beq.n	80007bc <__aeabi_fsub+0x1f8>
 800074e:	1e51      	subs	r1, r2, #1
 8000750:	2a01      	cmp	r2, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x192>
 8000754:	e09a      	b.n	800088c <__aeabi_fsub+0x2c8>
 8000756:	2aff      	cmp	r2, #255	; 0xff
 8000758:	d026      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 800075a:	000a      	movs	r2, r1
 800075c:	e78f      	b.n	800067e <__aeabi_fsub+0xba>
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	2600      	movs	r6, #0
 8000762:	e77a      	b.n	800065a <__aeabi_fsub+0x96>
 8000764:	27fe      	movs	r7, #254	; 0xfe
 8000766:	1c6a      	adds	r2, r5, #1
 8000768:	4217      	tst	r7, r2
 800076a:	d062      	beq.n	8000832 <__aeabi_fsub+0x26e>
 800076c:	2aff      	cmp	r2, #255	; 0xff
 800076e:	d0f6      	beq.n	800075e <__aeabi_fsub+0x19a>
 8000770:	0015      	movs	r5, r2
 8000772:	4460      	add	r0, ip
 8000774:	0843      	lsrs	r3, r0, #1
 8000776:	075a      	lsls	r2, r3, #29
 8000778:	d000      	beq.n	800077c <__aeabi_fsub+0x1b8>
 800077a:	e75f      	b.n	800063c <__aeabi_fsub+0x78>
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	2dff      	cmp	r5, #255	; 0xff
 8000780:	d012      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	0a5e      	lsrs	r6, r3, #9
 8000786:	b2ea      	uxtb	r2, r5
 8000788:	e767      	b.n	800065a <__aeabi_fsub+0x96>
 800078a:	4662      	mov	r2, ip
 800078c:	2a00      	cmp	r2, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x1ce>
 8000790:	e093      	b.n	80008ba <__aeabi_fsub+0x2f6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d008      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	4213      	tst	r3, r2
 800079c:	d004      	beq.n	80007a8 <__aeabi_fsub+0x1e4>
 800079e:	4640      	mov	r0, r8
 80007a0:	4210      	tst	r0, r2
 80007a2:	d101      	bne.n	80007a8 <__aeabi_fsub+0x1e4>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0d8      	beq.n	800075e <__aeabi_fsub+0x19a>
 80007ac:	2680      	movs	r6, #128	; 0x80
 80007ae:	03f6      	lsls	r6, r6, #15
 80007b0:	431e      	orrs	r6, r3
 80007b2:	0276      	lsls	r6, r6, #9
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	0a76      	lsrs	r6, r6, #9
 80007b8:	e74f      	b.n	800065a <__aeabi_fsub+0x96>
 80007ba:	4643      	mov	r3, r8
 80007bc:	0015      	movs	r5, r2
 80007be:	e7de      	b.n	800077e <__aeabi_fsub+0x1ba>
 80007c0:	2220      	movs	r2, #32
 80007c2:	1b40      	subs	r0, r0, r5
 80007c4:	3001      	adds	r0, #1
 80007c6:	1a12      	subs	r2, r2, r0
 80007c8:	0019      	movs	r1, r3
 80007ca:	4093      	lsls	r3, r2
 80007cc:	40c1      	lsrs	r1, r0
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	4193      	sbcs	r3, r2
 80007d2:	2500      	movs	r5, #0
 80007d4:	430b      	orrs	r3, r1
 80007d6:	e72f      	b.n	8000638 <__aeabi_fsub+0x74>
 80007d8:	2320      	movs	r3, #32
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	0001      	movs	r1, r0
 80007de:	4098      	lsls	r0, r3
 80007e0:	0003      	movs	r3, r0
 80007e2:	40d1      	lsrs	r1, r2
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	4193      	sbcs	r3, r2
 80007e8:	430b      	orrs	r3, r1
 80007ea:	e712      	b.n	8000612 <__aeabi_fsub+0x4e>
 80007ec:	2fff      	cmp	r7, #255	; 0xff
 80007ee:	d0d9      	beq.n	80007a4 <__aeabi_fsub+0x1e0>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	4664      	mov	r4, ip
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431c      	orrs	r4, r3
 80007f8:	46a4      	mov	ip, r4
 80007fa:	2a1b      	cmp	r2, #27
 80007fc:	dd52      	ble.n	80008a4 <__aeabi_fsub+0x2e0>
 80007fe:	2301      	movs	r3, #1
 8000800:	000c      	movs	r4, r1
 8000802:	003d      	movs	r5, r7
 8000804:	1ac3      	subs	r3, r0, r3
 8000806:	e706      	b.n	8000616 <__aeabi_fsub+0x52>
 8000808:	4663      	mov	r3, ip
 800080a:	1a1e      	subs	r6, r3, r0
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d439      	bmi.n	8000884 <__aeabi_fsub+0x2c0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x252>
 8000814:	e704      	b.n	8000620 <__aeabi_fsub+0x5c>
 8000816:	2400      	movs	r4, #0
 8000818:	2200      	movs	r2, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e71d      	b.n	800065a <__aeabi_fsub+0x96>
 800081e:	2320      	movs	r3, #32
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	0001      	movs	r1, r0
 8000824:	4098      	lsls	r0, r3
 8000826:	0003      	movs	r3, r0
 8000828:	40d1      	lsrs	r1, r2
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	430b      	orrs	r3, r1
 8000830:	e729      	b.n	8000686 <__aeabi_fsub+0xc2>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d1a9      	bne.n	800078a <__aeabi_fsub+0x1c6>
 8000836:	4663      	mov	r3, ip
 8000838:	2b00      	cmp	r3, #0
 800083a:	d056      	beq.n	80008ea <__aeabi_fsub+0x326>
 800083c:	2200      	movs	r2, #0
 800083e:	2800      	cmp	r0, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x280>
 8000842:	e70a      	b.n	800065a <__aeabi_fsub+0x96>
 8000844:	0003      	movs	r3, r0
 8000846:	4463      	add	r3, ip
 8000848:	015a      	lsls	r2, r3, #5
 800084a:	d594      	bpl.n	8000776 <__aeabi_fsub+0x1b2>
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <__aeabi_fsub+0x338>)
 800084e:	3501      	adds	r5, #1
 8000850:	4013      	ands	r3, r2
 8000852:	e790      	b.n	8000776 <__aeabi_fsub+0x1b2>
 8000854:	4663      	mov	r3, ip
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0af      	beq.n	80007ba <__aeabi_fsub+0x1f6>
 800085a:	1e53      	subs	r3, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d015      	beq.n	800088c <__aeabi_fsub+0x2c8>
 8000860:	2aff      	cmp	r2, #255	; 0xff
 8000862:	d02a      	beq.n	80008ba <__aeabi_fsub+0x2f6>
 8000864:	001a      	movs	r2, r3
 8000866:	e752      	b.n	800070e <__aeabi_fsub+0x14a>
 8000868:	4662      	mov	r2, ip
 800086a:	2a00      	cmp	r2, #0
 800086c:	d191      	bne.n	8000792 <__aeabi_fsub+0x1ce>
 800086e:	2800      	cmp	r0, #0
 8000870:	d198      	bne.n	80007a4 <__aeabi_fsub+0x1e0>
 8000872:	2680      	movs	r6, #128	; 0x80
 8000874:	2400      	movs	r4, #0
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	03f6      	lsls	r6, r6, #15
 800087a:	e6ee      	b.n	800065a <__aeabi_fsub+0x96>
 800087c:	000c      	movs	r4, r1
 800087e:	4643      	mov	r3, r8
 8000880:	0015      	movs	r5, r2
 8000882:	e77c      	b.n	800077e <__aeabi_fsub+0x1ba>
 8000884:	4663      	mov	r3, ip
 8000886:	000c      	movs	r4, r1
 8000888:	1ac6      	subs	r6, r0, r3
 800088a:	e6c9      	b.n	8000620 <__aeabi_fsub+0x5c>
 800088c:	0003      	movs	r3, r0
 800088e:	4463      	add	r3, ip
 8000890:	2501      	movs	r5, #1
 8000892:	015a      	lsls	r2, r3, #5
 8000894:	d400      	bmi.n	8000898 <__aeabi_fsub+0x2d4>
 8000896:	e76e      	b.n	8000776 <__aeabi_fsub+0x1b2>
 8000898:	2502      	movs	r5, #2
 800089a:	e6fa      	b.n	8000692 <__aeabi_fsub+0xce>
 800089c:	4663      	mov	r3, ip
 800089e:	2501      	movs	r5, #1
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	e6b8      	b.n	8000616 <__aeabi_fsub+0x52>
 80008a4:	4664      	mov	r4, ip
 80008a6:	2320      	movs	r3, #32
 80008a8:	40d4      	lsrs	r4, r2
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	4662      	mov	r2, ip
 80008ae:	409a      	lsls	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	4193      	sbcs	r3, r2
 80008b6:	4323      	orrs	r3, r4
 80008b8:	e7a2      	b.n	8000800 <__aeabi_fsub+0x23c>
 80008ba:	4643      	mov	r3, r8
 80008bc:	e774      	b.n	80007a8 <__aeabi_fsub+0x1e4>
 80008be:	4661      	mov	r1, ip
 80008c0:	2320      	movs	r3, #32
 80008c2:	40d1      	lsrs	r1, r2
 80008c4:	1a9b      	subs	r3, r3, r2
 80008c6:	4662      	mov	r2, ip
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	4193      	sbcs	r3, r2
 80008d0:	430b      	orrs	r3, r1
 80008d2:	e720      	b.n	8000716 <__aeabi_fsub+0x152>
 80008d4:	4663      	mov	r3, ip
 80008d6:	000c      	movs	r4, r1
 80008d8:	2501      	movs	r5, #1
 80008da:	1ac3      	subs	r3, r0, r3
 80008dc:	e69b      	b.n	8000616 <__aeabi_fsub+0x52>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d099      	beq.n	8000816 <__aeabi_fsub+0x252>
 80008e2:	000c      	movs	r4, r1
 80008e4:	4646      	mov	r6, r8
 80008e6:	2200      	movs	r2, #0
 80008e8:	e6b7      	b.n	800065a <__aeabi_fsub+0x96>
 80008ea:	4646      	mov	r6, r8
 80008ec:	2200      	movs	r2, #0
 80008ee:	e6b4      	b.n	800065a <__aeabi_fsub+0x96>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0x332>
 80008f4:	e73f      	b.n	8000776 <__aeabi_fsub+0x1b2>
 80008f6:	2400      	movs	r4, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	e6ae      	b.n	800065a <__aeabi_fsub+0x96>
 80008fc:	fbffffff 	.word	0xfbffffff
 8000900:	7dffffff 	.word	0x7dffffff

08000904 <__aeabi_i2f>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2800      	cmp	r0, #0
 8000908:	d013      	beq.n	8000932 <__aeabi_i2f+0x2e>
 800090a:	17c3      	asrs	r3, r0, #31
 800090c:	18c5      	adds	r5, r0, r3
 800090e:	405d      	eors	r5, r3
 8000910:	0fc4      	lsrs	r4, r0, #31
 8000912:	0028      	movs	r0, r5
 8000914:	f001 fa78 	bl	8001e08 <__clzsi2>
 8000918:	239e      	movs	r3, #158	; 0x9e
 800091a:	0001      	movs	r1, r0
 800091c:	1a1b      	subs	r3, r3, r0
 800091e:	2b96      	cmp	r3, #150	; 0x96
 8000920:	dc0f      	bgt.n	8000942 <__aeabi_i2f+0x3e>
 8000922:	2808      	cmp	r0, #8
 8000924:	d031      	beq.n	800098a <__aeabi_i2f+0x86>
 8000926:	3908      	subs	r1, #8
 8000928:	408d      	lsls	r5, r1
 800092a:	026d      	lsls	r5, r5, #9
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e002      	b.n	8000938 <__aeabi_i2f+0x34>
 8000932:	2400      	movs	r4, #0
 8000934:	2000      	movs	r0, #0
 8000936:	2500      	movs	r5, #0
 8000938:	05c0      	lsls	r0, r0, #23
 800093a:	4328      	orrs	r0, r5
 800093c:	07e4      	lsls	r4, r4, #31
 800093e:	4320      	orrs	r0, r4
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	2b99      	cmp	r3, #153	; 0x99
 8000944:	dd0c      	ble.n	8000960 <__aeabi_i2f+0x5c>
 8000946:	2205      	movs	r2, #5
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	0028      	movs	r0, r5
 800094c:	40d0      	lsrs	r0, r2
 800094e:	0002      	movs	r2, r0
 8000950:	0008      	movs	r0, r1
 8000952:	301b      	adds	r0, #27
 8000954:	4085      	lsls	r5, r0
 8000956:	0028      	movs	r0, r5
 8000958:	1e45      	subs	r5, r0, #1
 800095a:	41a8      	sbcs	r0, r5
 800095c:	4302      	orrs	r2, r0
 800095e:	0015      	movs	r5, r2
 8000960:	2905      	cmp	r1, #5
 8000962:	dc16      	bgt.n	8000992 <__aeabi_i2f+0x8e>
 8000964:	002a      	movs	r2, r5
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <__aeabi_i2f+0xa0>)
 8000968:	4002      	ands	r2, r0
 800096a:	076e      	lsls	r6, r5, #29
 800096c:	d009      	beq.n	8000982 <__aeabi_i2f+0x7e>
 800096e:	260f      	movs	r6, #15
 8000970:	4035      	ands	r5, r6
 8000972:	2d04      	cmp	r5, #4
 8000974:	d005      	beq.n	8000982 <__aeabi_i2f+0x7e>
 8000976:	3204      	adds	r2, #4
 8000978:	0155      	lsls	r5, r2, #5
 800097a:	d502      	bpl.n	8000982 <__aeabi_i2f+0x7e>
 800097c:	239f      	movs	r3, #159	; 0x9f
 800097e:	4002      	ands	r2, r0
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	0192      	lsls	r2, r2, #6
 8000984:	0a55      	lsrs	r5, r2, #9
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	e7d6      	b.n	8000938 <__aeabi_i2f+0x34>
 800098a:	026d      	lsls	r5, r5, #9
 800098c:	2096      	movs	r0, #150	; 0x96
 800098e:	0a6d      	lsrs	r5, r5, #9
 8000990:	e7d2      	b.n	8000938 <__aeabi_i2f+0x34>
 8000992:	1f4a      	subs	r2, r1, #5
 8000994:	4095      	lsls	r5, r2
 8000996:	002a      	movs	r2, r5
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <__aeabi_i2f+0xa0>)
 800099a:	4002      	ands	r2, r0
 800099c:	076e      	lsls	r6, r5, #29
 800099e:	d0f0      	beq.n	8000982 <__aeabi_i2f+0x7e>
 80009a0:	e7e5      	b.n	800096e <__aeabi_i2f+0x6a>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	fbffffff 	.word	0xfbffffff

080009a8 <__aeabi_ddiv>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	4657      	mov	r7, sl
 80009ac:	464e      	mov	r6, r9
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	030c      	lsls	r4, r1, #12
 80009b6:	001f      	movs	r7, r3
 80009b8:	004b      	lsls	r3, r1, #1
 80009ba:	4681      	mov	r9, r0
 80009bc:	4692      	mov	sl, r2
 80009be:	0005      	movs	r5, r0
 80009c0:	b085      	sub	sp, #20
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	0d5b      	lsrs	r3, r3, #21
 80009c6:	0fce      	lsrs	r6, r1, #31
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_ddiv+0x26>
 80009cc:	e152      	b.n	8000c74 <__aeabi_ddiv+0x2cc>
 80009ce:	4ad2      	ldr	r2, [pc, #840]	; (8000d18 <__aeabi_ddiv+0x370>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <__aeabi_ddiv+0x2e>
 80009d4:	e16e      	b.n	8000cb4 <__aeabi_ddiv+0x30c>
 80009d6:	0f42      	lsrs	r2, r0, #29
 80009d8:	00e4      	lsls	r4, r4, #3
 80009da:	4314      	orrs	r4, r2
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	4322      	orrs	r2, r4
 80009e2:	4690      	mov	r8, r2
 80009e4:	4acd      	ldr	r2, [pc, #820]	; (8000d1c <__aeabi_ddiv+0x374>)
 80009e6:	00c5      	lsls	r5, r0, #3
 80009e8:	4693      	mov	fp, r2
 80009ea:	449b      	add	fp, r3
 80009ec:	2300      	movs	r3, #0
 80009ee:	4699      	mov	r9, r3
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	033c      	lsls	r4, r7, #12
 80009f4:	007b      	lsls	r3, r7, #1
 80009f6:	4650      	mov	r0, sl
 80009f8:	0b24      	lsrs	r4, r4, #12
 80009fa:	0d5b      	lsrs	r3, r3, #21
 80009fc:	0fff      	lsrs	r7, r7, #31
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x5c>
 8000a02:	e11a      	b.n	8000c3a <__aeabi_ddiv+0x292>
 8000a04:	4ac4      	ldr	r2, [pc, #784]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_ddiv+0x64>
 8000a0a:	e15e      	b.n	8000cca <__aeabi_ddiv+0x322>
 8000a0c:	0f42      	lsrs	r2, r0, #29
 8000a0e:	00e4      	lsls	r4, r4, #3
 8000a10:	4322      	orrs	r2, r4
 8000a12:	2480      	movs	r4, #128	; 0x80
 8000a14:	0424      	lsls	r4, r4, #16
 8000a16:	4314      	orrs	r4, r2
 8000a18:	4ac0      	ldr	r2, [pc, #768]	; (8000d1c <__aeabi_ddiv+0x374>)
 8000a1a:	00c1      	lsls	r1, r0, #3
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	465a      	mov	r2, fp
 8000a20:	4463      	add	r3, ip
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	469b      	mov	fp, r3
 8000a26:	2000      	movs	r0, #0
 8000a28:	0033      	movs	r3, r6
 8000a2a:	407b      	eors	r3, r7
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	464b      	mov	r3, r9
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d827      	bhi.n	8000a84 <__aeabi_ddiv+0xdc>
 8000a34:	4aba      	ldr	r2, [pc, #744]	; (8000d20 <__aeabi_ddiv+0x378>)
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	58d3      	ldr	r3, [r2, r3]
 8000a3a:	469f      	mov	pc, r3
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	9b00      	ldr	r3, [sp, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d016      	beq.n	8000a72 <__aeabi_ddiv+0xca>
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d100      	bne.n	8000a4a <__aeabi_ddiv+0xa2>
 8000a48:	e287      	b.n	8000f5a <__aeabi_ddiv+0x5b2>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_ddiv+0xa8>
 8000a4e:	e0d5      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2500      	movs	r5, #0
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	07d2      	lsls	r2, r2, #31
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	0028      	movs	r0, r5
 8000a62:	0019      	movs	r1, r3
 8000a64:	b005      	add	sp, #20
 8000a66:	bcf0      	pop	{r4, r5, r6, r7}
 8000a68:	46bb      	mov	fp, r7
 8000a6a:	46b2      	mov	sl, r6
 8000a6c:	46a9      	mov	r9, r5
 8000a6e:	46a0      	mov	r8, r4
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a72:	2200      	movs	r2, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	4ba8      	ldr	r3, [pc, #672]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a78:	e7ed      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000a7a:	46ba      	mov	sl, r7
 8000a7c:	46a0      	mov	r8, r4
 8000a7e:	000d      	movs	r5, r1
 8000a80:	9000      	str	r0, [sp, #0]
 8000a82:	e7dc      	b.n	8000a3e <__aeabi_ddiv+0x96>
 8000a84:	4544      	cmp	r4, r8
 8000a86:	d200      	bcs.n	8000a8a <__aeabi_ddiv+0xe2>
 8000a88:	e1c4      	b.n	8000e14 <__aeabi_ddiv+0x46c>
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_ddiv+0xe6>
 8000a8c:	e1bf      	b.n	8000e0e <__aeabi_ddiv+0x466>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	469c      	mov	ip, r3
 8000a94:	002e      	movs	r6, r5
 8000a96:	4640      	mov	r0, r8
 8000a98:	2500      	movs	r5, #0
 8000a9a:	44e3      	add	fp, ip
 8000a9c:	0223      	lsls	r3, r4, #8
 8000a9e:	0e0c      	lsrs	r4, r1, #24
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	0423      	lsls	r3, r4, #16
 8000aa8:	020a      	lsls	r2, r1, #8
 8000aaa:	0c1f      	lsrs	r7, r3, #16
 8000aac:	4649      	mov	r1, r9
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	9701      	str	r7, [sp, #4]
 8000ab2:	f7ff fbad 	bl	8000210 <__aeabi_uidivmod>
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	437a      	muls	r2, r7
 8000aba:	040b      	lsls	r3, r1, #16
 8000abc:	0c31      	lsrs	r1, r6, #16
 8000abe:	4680      	mov	r8, r0
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	d907      	bls.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	469c      	mov	ip, r3
 8000acc:	1909      	adds	r1, r1, r4
 8000ace:	44e0      	add	r8, ip
 8000ad0:	428c      	cmp	r4, r1
 8000ad2:	d800      	bhi.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ad4:	e201      	b.n	8000eda <__aeabi_ddiv+0x532>
 8000ad6:	1a88      	subs	r0, r1, r2
 8000ad8:	4649      	mov	r1, r9
 8000ada:	f7ff fb99 	bl	8000210 <__aeabi_uidivmod>
 8000ade:	9a01      	ldr	r2, [sp, #4]
 8000ae0:	0436      	lsls	r6, r6, #16
 8000ae2:	4342      	muls	r2, r0
 8000ae4:	0409      	lsls	r1, r1, #16
 8000ae6:	0c36      	lsrs	r6, r6, #16
 8000ae8:	0003      	movs	r3, r0
 8000aea:	430e      	orrs	r6, r1
 8000aec:	42b2      	cmp	r2, r6
 8000aee:	d904      	bls.n	8000afa <__aeabi_ddiv+0x152>
 8000af0:	1936      	adds	r6, r6, r4
 8000af2:	3b01      	subs	r3, #1
 8000af4:	42b4      	cmp	r4, r6
 8000af6:	d800      	bhi.n	8000afa <__aeabi_ddiv+0x152>
 8000af8:	e1e9      	b.n	8000ece <__aeabi_ddiv+0x526>
 8000afa:	1ab0      	subs	r0, r6, r2
 8000afc:	4642      	mov	r2, r8
 8000afe:	9e00      	ldr	r6, [sp, #0]
 8000b00:	0412      	lsls	r2, r2, #16
 8000b02:	431a      	orrs	r2, r3
 8000b04:	0c33      	lsrs	r3, r6, #16
 8000b06:	001f      	movs	r7, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	0413      	lsls	r3, r2, #16
 8000b10:	0432      	lsls	r2, r6, #16
 8000b12:	0c16      	lsrs	r6, r2, #16
 8000b14:	0032      	movs	r2, r6
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	435a      	muls	r2, r3
 8000b1a:	9603      	str	r6, [sp, #12]
 8000b1c:	437b      	muls	r3, r7
 8000b1e:	434e      	muls	r6, r1
 8000b20:	4379      	muls	r1, r7
 8000b22:	0c17      	lsrs	r7, r2, #16
 8000b24:	46bc      	mov	ip, r7
 8000b26:	199b      	adds	r3, r3, r6
 8000b28:	4463      	add	r3, ip
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	d903      	bls.n	8000b36 <__aeabi_ddiv+0x18e>
 8000b2e:	2680      	movs	r6, #128	; 0x80
 8000b30:	0276      	lsls	r6, r6, #9
 8000b32:	46b4      	mov	ip, r6
 8000b34:	4461      	add	r1, ip
 8000b36:	0c1e      	lsrs	r6, r3, #16
 8000b38:	1871      	adds	r1, r6, r1
 8000b3a:	0416      	lsls	r6, r2, #16
 8000b3c:	041b      	lsls	r3, r3, #16
 8000b3e:	0c36      	lsrs	r6, r6, #16
 8000b40:	199e      	adds	r6, r3, r6
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d302      	bcc.n	8000b4c <__aeabi_ddiv+0x1a4>
 8000b46:	d112      	bne.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d210      	bcs.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	9b00      	ldr	r3, [sp, #0]
 8000b52:	469c      	mov	ip, r3
 8000b54:	4465      	add	r5, ip
 8000b56:	001f      	movs	r7, r3
 8000b58:	429d      	cmp	r5, r3
 8000b5a:	419b      	sbcs	r3, r3
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	191b      	adds	r3, r3, r4
 8000b60:	18c0      	adds	r0, r0, r3
 8000b62:	4284      	cmp	r4, r0
 8000b64:	d200      	bcs.n	8000b68 <__aeabi_ddiv+0x1c0>
 8000b66:	e19e      	b.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000b6a:	e199      	b.n	8000ea0 <__aeabi_ddiv+0x4f8>
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	1bae      	subs	r6, r5, r6
 8000b70:	42b5      	cmp	r5, r6
 8000b72:	41ad      	sbcs	r5, r5
 8000b74:	1a40      	subs	r0, r0, r1
 8000b76:	426d      	negs	r5, r5
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	4284      	cmp	r4, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x1d8>
 8000b7e:	e1d2      	b.n	8000f26 <__aeabi_ddiv+0x57e>
 8000b80:	4649      	mov	r1, r9
 8000b82:	f7ff fb45 	bl	8000210 <__aeabi_uidivmod>
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	040b      	lsls	r3, r1, #16
 8000b8a:	4342      	muls	r2, r0
 8000b8c:	0c31      	lsrs	r1, r6, #16
 8000b8e:	0005      	movs	r5, r0
 8000b90:	4319      	orrs	r1, r3
 8000b92:	428a      	cmp	r2, r1
 8000b94:	d900      	bls.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000b96:	e16c      	b.n	8000e72 <__aeabi_ddiv+0x4ca>
 8000b98:	1a88      	subs	r0, r1, r2
 8000b9a:	4649      	mov	r1, r9
 8000b9c:	f7ff fb38 	bl	8000210 <__aeabi_uidivmod>
 8000ba0:	9a01      	ldr	r2, [sp, #4]
 8000ba2:	0436      	lsls	r6, r6, #16
 8000ba4:	4342      	muls	r2, r0
 8000ba6:	0409      	lsls	r1, r1, #16
 8000ba8:	0c36      	lsrs	r6, r6, #16
 8000baa:	0003      	movs	r3, r0
 8000bac:	430e      	orrs	r6, r1
 8000bae:	42b2      	cmp	r2, r6
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000bb2:	e153      	b.n	8000e5c <__aeabi_ddiv+0x4b4>
 8000bb4:	9803      	ldr	r0, [sp, #12]
 8000bb6:	1ab6      	subs	r6, r6, r2
 8000bb8:	0002      	movs	r2, r0
 8000bba:	042d      	lsls	r5, r5, #16
 8000bbc:	431d      	orrs	r5, r3
 8000bbe:	9f02      	ldr	r7, [sp, #8]
 8000bc0:	042b      	lsls	r3, r5, #16
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	435a      	muls	r2, r3
 8000bc6:	437b      	muls	r3, r7
 8000bc8:	469c      	mov	ip, r3
 8000bca:	0c29      	lsrs	r1, r5, #16
 8000bcc:	4348      	muls	r0, r1
 8000bce:	0c13      	lsrs	r3, r2, #16
 8000bd0:	4484      	add	ip, r0
 8000bd2:	4463      	add	r3, ip
 8000bd4:	4379      	muls	r1, r7
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d903      	bls.n	8000be2 <__aeabi_ddiv+0x23a>
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0240      	lsls	r0, r0, #9
 8000bde:	4684      	mov	ip, r0
 8000be0:	4461      	add	r1, ip
 8000be2:	0c18      	lsrs	r0, r3, #16
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	1840      	adds	r0, r0, r1
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	4286      	cmp	r6, r0
 8000bf0:	d200      	bcs.n	8000bf4 <__aeabi_ddiv+0x24c>
 8000bf2:	e100      	b.n	8000df6 <__aeabi_ddiv+0x44e>
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_ddiv+0x250>
 8000bf6:	e0fb      	b.n	8000df0 <__aeabi_ddiv+0x448>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	431d      	orrs	r5, r3
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <__aeabi_ddiv+0x37c>)
 8000bfe:	445b      	add	r3, fp
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_ddiv+0x25e>
 8000c04:	e0aa      	b.n	8000d5c <__aeabi_ddiv+0x3b4>
 8000c06:	076a      	lsls	r2, r5, #29
 8000c08:	d000      	beq.n	8000c0c <__aeabi_ddiv+0x264>
 8000c0a:	e13d      	b.n	8000e88 <__aeabi_ddiv+0x4e0>
 8000c0c:	08e9      	lsrs	r1, r5, #3
 8000c0e:	4642      	mov	r2, r8
 8000c10:	01d2      	lsls	r2, r2, #7
 8000c12:	d506      	bpl.n	8000c22 <__aeabi_ddiv+0x27a>
 8000c14:	4642      	mov	r2, r8
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <__aeabi_ddiv+0x380>)
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	445b      	add	r3, fp
 8000c22:	4a42      	ldr	r2, [pc, #264]	; (8000d2c <__aeabi_ddiv+0x384>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_ddiv+0x282>
 8000c28:	e723      	b.n	8000a72 <__aeabi_ddiv+0xca>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	055b      	lsls	r3, r3, #21
 8000c2e:	0755      	lsls	r5, r2, #29
 8000c30:	0252      	lsls	r2, r2, #9
 8000c32:	430d      	orrs	r5, r1
 8000c34:	0b12      	lsrs	r2, r2, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	e70d      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000c3a:	4651      	mov	r1, sl
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x29a>
 8000c40:	e07c      	b.n	8000d3c <__aeabi_ddiv+0x394>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_ddiv+0x2a0>
 8000c46:	e0fb      	b.n	8000e40 <__aeabi_ddiv+0x498>
 8000c48:	0020      	movs	r0, r4
 8000c4a:	f001 f8dd 	bl	8001e08 <__clzsi2>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	3a0b      	subs	r2, #11
 8000c52:	231d      	movs	r3, #29
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4652      	mov	r2, sl
 8000c58:	0001      	movs	r1, r0
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	3908      	subs	r1, #8
 8000c60:	408b      	lsls	r3, r1
 8000c62:	408c      	lsls	r4, r1
 8000c64:	0019      	movs	r1, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <__aeabi_ddiv+0x388>)
 8000c6a:	4458      	add	r0, fp
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	4483      	add	fp, r0
 8000c70:	2000      	movs	r0, #0
 8000c72:	e6d9      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000c74:	0003      	movs	r3, r0
 8000c76:	4323      	orrs	r3, r4
 8000c78:	4698      	mov	r8, r3
 8000c7a:	d044      	beq.n	8000d06 <__aeabi_ddiv+0x35e>
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0x2da>
 8000c80:	e0cf      	b.n	8000e22 <__aeabi_ddiv+0x47a>
 8000c82:	0020      	movs	r0, r4
 8000c84:	f001 f8c0 	bl	8001e08 <__clzsi2>
 8000c88:	0001      	movs	r1, r0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	390b      	subs	r1, #11
 8000c8e:	231d      	movs	r3, #29
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4649      	mov	r1, r9
 8000c94:	0010      	movs	r0, r2
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	3808      	subs	r0, #8
 8000c9a:	4084      	lsls	r4, r0
 8000c9c:	000b      	movs	r3, r1
 8000c9e:	464d      	mov	r5, r9
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	4085      	lsls	r5, r0
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <__aeabi_ddiv+0x38c>)
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	469b      	mov	fp, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	e69e      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4322      	orrs	r2, r4
 8000cb8:	4690      	mov	r8, r2
 8000cba:	d11d      	bne.n	8000cf8 <__aeabi_ddiv+0x350>
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	e693      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cca:	4651      	mov	r1, sl
 8000ccc:	4321      	orrs	r1, r4
 8000cce:	d109      	bne.n	8000ce4 <__aeabi_ddiv+0x33c>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cd8:	4691      	mov	r9, r2
 8000cda:	469c      	mov	ip, r3
 8000cdc:	2400      	movs	r4, #0
 8000cde:	2002      	movs	r0, #2
 8000ce0:	44e3      	add	fp, ip
 8000ce2:	e6a1      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cec:	4691      	mov	r9, r2
 8000cee:	469c      	mov	ip, r3
 8000cf0:	4651      	mov	r1, sl
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	e697      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	469b      	mov	fp, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	46a0      	mov	r8, r4
 8000d00:	4691      	mov	r9, r2
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e675      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d06:	2304      	movs	r3, #4
 8000d08:	4699      	mov	r9, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	469b      	mov	fp, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2500      	movs	r5, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	e66d      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	000007ff 	.word	0x000007ff
 8000d1c:	fffffc01 	.word	0xfffffc01
 8000d20:	08006de4 	.word	0x08006de4
 8000d24:	000003ff 	.word	0x000003ff
 8000d28:	feffffff 	.word	0xfeffffff
 8000d2c:	000007fe 	.word	0x000007fe
 8000d30:	000003f3 	.word	0x000003f3
 8000d34:	fffffc0d 	.word	0xfffffc0d
 8000d38:	fffff801 	.word	0xfffff801
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	2301      	movs	r3, #1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	4691      	mov	r9, r2
 8000d44:	2400      	movs	r4, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	e66e      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	469a      	mov	sl, r3
 8000d50:	2500      	movs	r5, #0
 8000d52:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000d54:	0312      	lsls	r2, r2, #12
 8000d56:	e67e      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000d58:	2501      	movs	r5, #1
 8000d5a:	426d      	negs	r5, r5
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	1ad2      	subs	r2, r2, r3
 8000d60:	2a38      	cmp	r2, #56	; 0x38
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_ddiv+0x3be>
 8000d64:	e674      	b.n	8000a50 <__aeabi_ddiv+0xa8>
 8000d66:	2a1f      	cmp	r2, #31
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_ddiv+0x3c4>
 8000d6a:	e0bd      	b.n	8000ee8 <__aeabi_ddiv+0x540>
 8000d6c:	211f      	movs	r1, #31
 8000d6e:	4249      	negs	r1, r1
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	4641      	mov	r1, r8
 8000d74:	40d9      	lsrs	r1, r3
 8000d76:	000b      	movs	r3, r1
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_ddiv+0x3de>
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4a7e      	ldr	r2, [pc, #504]	; (8000f78 <__aeabi_ddiv+0x5d0>)
 8000d80:	445a      	add	r2, fp
 8000d82:	4091      	lsls	r1, r2
 8000d84:	430d      	orrs	r5, r1
 8000d86:	0029      	movs	r1, r5
 8000d88:	1e4a      	subs	r2, r1, #1
 8000d8a:	4191      	sbcs	r1, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	2307      	movs	r3, #7
 8000d90:	001d      	movs	r5, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	400d      	ands	r5, r1
 8000d96:	420b      	tst	r3, r1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x3f4>
 8000d9a:	e0d0      	b.n	8000f3e <__aeabi_ddiv+0x596>
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	2300      	movs	r3, #0
 8000da0:	400a      	ands	r2, r1
 8000da2:	2a04      	cmp	r2, #4
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0x400>
 8000da6:	e0c7      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000da8:	1d0a      	adds	r2, r1, #4
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4249      	negs	r1, r1
 8000db0:	185b      	adds	r3, r3, r1
 8000db2:	0011      	movs	r1, r2
 8000db4:	021a      	lsls	r2, r3, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_ddiv+0x412>
 8000db8:	e0be      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e649      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	0312      	lsls	r2, r2, #12
 8000dc8:	4213      	tst	r3, r2
 8000dca:	d008      	beq.n	8000dde <__aeabi_ddiv+0x436>
 8000dcc:	4214      	tst	r4, r2
 8000dce:	d106      	bne.n	8000dde <__aeabi_ddiv+0x436>
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	0312      	lsls	r2, r2, #12
 8000dd4:	46ba      	mov	sl, r7
 8000dd6:	000d      	movs	r5, r1
 8000dd8:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dda:	0b12      	lsrs	r2, r2, #12
 8000ddc:	e63b      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	4643      	mov	r3, r8
 8000de2:	0312      	lsls	r2, r2, #12
 8000de4:	431a      	orrs	r2, r3
 8000de6:	0312      	lsls	r2, r2, #12
 8000de8:	46b2      	mov	sl, r6
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dec:	0b12      	lsrs	r2, r2, #12
 8000dee:	e632      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x44e>
 8000df4:	e702      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000df6:	19a6      	adds	r6, r4, r6
 8000df8:	1e6a      	subs	r2, r5, #1
 8000dfa:	42a6      	cmp	r6, r4
 8000dfc:	d200      	bcs.n	8000e00 <__aeabi_ddiv+0x458>
 8000dfe:	e089      	b.n	8000f14 <__aeabi_ddiv+0x56c>
 8000e00:	4286      	cmp	r6, r0
 8000e02:	d200      	bcs.n	8000e06 <__aeabi_ddiv+0x45e>
 8000e04:	e09f      	b.n	8000f46 <__aeabi_ddiv+0x59e>
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x462>
 8000e08:	e0af      	b.n	8000f6a <__aeabi_ddiv+0x5c2>
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	e6f4      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000e0e:	42a9      	cmp	r1, r5
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x46c>
 8000e12:	e63c      	b.n	8000a8e <__aeabi_ddiv+0xe6>
 8000e14:	4643      	mov	r3, r8
 8000e16:	07de      	lsls	r6, r3, #31
 8000e18:	0858      	lsrs	r0, r3, #1
 8000e1a:	086b      	lsrs	r3, r5, #1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	07ed      	lsls	r5, r5, #31
 8000e20:	e63c      	b.n	8000a9c <__aeabi_ddiv+0xf4>
 8000e22:	f000 fff1 	bl	8001e08 <__clzsi2>
 8000e26:	0001      	movs	r1, r0
 8000e28:	0002      	movs	r2, r0
 8000e2a:	3115      	adds	r1, #21
 8000e2c:	3220      	adds	r2, #32
 8000e2e:	291c      	cmp	r1, #28
 8000e30:	dc00      	bgt.n	8000e34 <__aeabi_ddiv+0x48c>
 8000e32:	e72c      	b.n	8000c8e <__aeabi_ddiv+0x2e6>
 8000e34:	464b      	mov	r3, r9
 8000e36:	3808      	subs	r0, #8
 8000e38:	4083      	lsls	r3, r0
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	e732      	b.n	8000ca6 <__aeabi_ddiv+0x2fe>
 8000e40:	f000 ffe2 	bl	8001e08 <__clzsi2>
 8000e44:	0003      	movs	r3, r0
 8000e46:	001a      	movs	r2, r3
 8000e48:	3215      	adds	r2, #21
 8000e4a:	3020      	adds	r0, #32
 8000e4c:	2a1c      	cmp	r2, #28
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x4aa>
 8000e50:	e6ff      	b.n	8000c52 <__aeabi_ddiv+0x2aa>
 8000e52:	4654      	mov	r4, sl
 8000e54:	3b08      	subs	r3, #8
 8000e56:	2100      	movs	r1, #0
 8000e58:	409c      	lsls	r4, r3
 8000e5a:	e705      	b.n	8000c68 <__aeabi_ddiv+0x2c0>
 8000e5c:	1936      	adds	r6, r6, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	42b4      	cmp	r4, r6
 8000e62:	d900      	bls.n	8000e66 <__aeabi_ddiv+0x4be>
 8000e64:	e6a6      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e66:	42b2      	cmp	r2, r6
 8000e68:	d800      	bhi.n	8000e6c <__aeabi_ddiv+0x4c4>
 8000e6a:	e6a3      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e6c:	1e83      	subs	r3, r0, #2
 8000e6e:	1936      	adds	r6, r6, r4
 8000e70:	e6a0      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e72:	1909      	adds	r1, r1, r4
 8000e74:	3d01      	subs	r5, #1
 8000e76:	428c      	cmp	r4, r1
 8000e78:	d900      	bls.n	8000e7c <__aeabi_ddiv+0x4d4>
 8000e7a:	e68d      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x4da>
 8000e80:	e68a      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e82:	1e85      	subs	r5, r0, #2
 8000e84:	1909      	adds	r1, r1, r4
 8000e86:	e687      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e88:	220f      	movs	r2, #15
 8000e8a:	402a      	ands	r2, r5
 8000e8c:	2a04      	cmp	r2, #4
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0x4ea>
 8000e90:	e6bc      	b.n	8000c0c <__aeabi_ddiv+0x264>
 8000e92:	1d29      	adds	r1, r5, #4
 8000e94:	42a9      	cmp	r1, r5
 8000e96:	41ad      	sbcs	r5, r5
 8000e98:	426d      	negs	r5, r5
 8000e9a:	08c9      	lsrs	r1, r1, #3
 8000e9c:	44a8      	add	r8, r5
 8000e9e:	e6b6      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000ea0:	42af      	cmp	r7, r5
 8000ea2:	d900      	bls.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000ea4:	e662      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000ea6:	4281      	cmp	r1, r0
 8000ea8:	d804      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eaa:	d000      	beq.n	8000eae <__aeabi_ddiv+0x506>
 8000eac:	e65e      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eae:	42ae      	cmp	r6, r5
 8000eb0:	d800      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eb2:	e65b      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	469c      	mov	ip, r3
 8000eba:	9b00      	ldr	r3, [sp, #0]
 8000ebc:	44e0      	add	r8, ip
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	4465      	add	r5, ip
 8000ec2:	429d      	cmp	r5, r3
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	191b      	adds	r3, r3, r4
 8000eca:	18c0      	adds	r0, r0, r3
 8000ecc:	e64f      	b.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000ece:	42b2      	cmp	r2, r6
 8000ed0:	d800      	bhi.n	8000ed4 <__aeabi_ddiv+0x52c>
 8000ed2:	e612      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000ed4:	1e83      	subs	r3, r0, #2
 8000ed6:	1936      	adds	r6, r6, r4
 8000ed8:	e60f      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d800      	bhi.n	8000ee0 <__aeabi_ddiv+0x538>
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee0:	1e83      	subs	r3, r0, #2
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	1909      	adds	r1, r1, r4
 8000ee6:	e5f6      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <__aeabi_ddiv+0x5d4>)
 8000eea:	0028      	movs	r0, r5
 8000eec:	445b      	add	r3, fp
 8000eee:	4641      	mov	r1, r8
 8000ef0:	409d      	lsls	r5, r3
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	40d0      	lsrs	r0, r2
 8000ef6:	1e6b      	subs	r3, r5, #1
 8000ef8:	419d      	sbcs	r5, r3
 8000efa:	4643      	mov	r3, r8
 8000efc:	4301      	orrs	r1, r0
 8000efe:	4329      	orrs	r1, r5
 8000f00:	40d3      	lsrs	r3, r2
 8000f02:	074a      	lsls	r2, r1, #29
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x560>
 8000f06:	e755      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f08:	220f      	movs	r2, #15
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	2a04      	cmp	r2, #4
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_ddiv+0x56a>
 8000f10:	e74a      	b.n	8000da8 <__aeabi_ddiv+0x400>
 8000f12:	e74f      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f14:	0015      	movs	r5, r2
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_ddiv+0x574>
 8000f1a:	e66d      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f1c:	9a00      	ldr	r2, [sp, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0x57c>
 8000f22:	e669      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f24:	e66a      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <__aeabi_ddiv+0x5d8>)
 8000f28:	445b      	add	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_ddiv+0x588>
 8000f2e:	e713      	b.n	8000d58 <__aeabi_ddiv+0x3b0>
 8000f30:	2501      	movs	r5, #1
 8000f32:	2100      	movs	r1, #0
 8000f34:	44a8      	add	r8, r5
 8000f36:	e66a      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000f38:	075d      	lsls	r5, r3, #29
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	0b1a      	lsrs	r2, r3, #12
 8000f3e:	08c9      	lsrs	r1, r1, #3
 8000f40:	2300      	movs	r3, #0
 8000f42:	430d      	orrs	r5, r1
 8000f44:	e587      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	3d02      	subs	r5, #2
 8000f4a:	004a      	lsls	r2, r1, #1
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	41bf      	sbcs	r7, r7
 8000f50:	427f      	negs	r7, r7
 8000f52:	193f      	adds	r7, r7, r4
 8000f54:	19f6      	adds	r6, r6, r7
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	e7dd      	b.n	8000f16 <__aeabi_ddiv+0x56e>
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0312      	lsls	r2, r2, #12
 8000f60:	431a      	orrs	r2, r3
 8000f62:	0312      	lsls	r2, r2, #12
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000f66:	0b12      	lsrs	r2, r2, #12
 8000f68:	e575      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f6a:	9900      	ldr	r1, [sp, #0]
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d3ea      	bcc.n	8000f46 <__aeabi_ddiv+0x59e>
 8000f70:	0015      	movs	r5, r2
 8000f72:	e7d3      	b.n	8000f1c <__aeabi_ddiv+0x574>
 8000f74:	000007ff 	.word	0x000007ff
 8000f78:	0000043e 	.word	0x0000043e
 8000f7c:	0000041e 	.word	0x0000041e
 8000f80:	000003ff 	.word	0x000003ff

08000f84 <__aeabi_dmul>:
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	4645      	mov	r5, r8
 8000f88:	46de      	mov	lr, fp
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	b5e0      	push	{r5, r6, r7, lr}
 8000f90:	001f      	movs	r7, r3
 8000f92:	030b      	lsls	r3, r1, #12
 8000f94:	0b1b      	lsrs	r3, r3, #12
 8000f96:	469b      	mov	fp, r3
 8000f98:	004d      	lsls	r5, r1, #1
 8000f9a:	0fcb      	lsrs	r3, r1, #31
 8000f9c:	0004      	movs	r4, r0
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	0d6d      	lsrs	r5, r5, #21
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dmul+0x26>
 8000fa8:	e1cd      	b.n	8001346 <__aeabi_dmul+0x3c2>
 8000faa:	4bce      	ldr	r3, [pc, #824]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fac:	429d      	cmp	r5, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dmul+0x2e>
 8000fb0:	e1e9      	b.n	8001386 <__aeabi_dmul+0x402>
 8000fb2:	465a      	mov	r2, fp
 8000fb4:	0f43      	lsrs	r3, r0, #29
 8000fb6:	00d2      	lsls	r2, r2, #3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	00c3      	lsls	r3, r0, #3
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	4bc8      	ldr	r3, [pc, #800]	; (80012e8 <__aeabi_dmul+0x364>)
 8000fc6:	4693      	mov	fp, r2
 8000fc8:	469c      	mov	ip, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2600      	movs	r6, #0
 8000fce:	4465      	add	r5, ip
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	033c      	lsls	r4, r7, #12
 8000fd4:	007b      	lsls	r3, r7, #1
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	0d5b      	lsrs	r3, r3, #21
 8000fdc:	0fff      	lsrs	r7, r7, #31
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dmul+0x60>
 8000fe2:	e189      	b.n	80012f8 <__aeabi_dmul+0x374>
 8000fe4:	4abf      	ldr	r2, [pc, #764]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <__aeabi_dmul+0x9a>
 8000fea:	0f42      	lsrs	r2, r0, #29
 8000fec:	00e4      	lsls	r4, r4, #3
 8000fee:	4322      	orrs	r2, r4
 8000ff0:	2480      	movs	r4, #128	; 0x80
 8000ff2:	0424      	lsls	r4, r4, #16
 8000ff4:	4314      	orrs	r4, r2
 8000ff6:	4abc      	ldr	r2, [pc, #752]	; (80012e8 <__aeabi_dmul+0x364>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4463      	add	r3, ip
 8001000:	195b      	adds	r3, r3, r5
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	407a      	eors	r2, r7
 8001008:	3301      	adds	r3, #1
 800100a:	00c0      	lsls	r0, r0, #3
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2e0a      	cmp	r6, #10
 8001012:	dd1c      	ble.n	800104e <__aeabi_dmul+0xca>
 8001014:	003a      	movs	r2, r7
 8001016:	2e0b      	cmp	r6, #11
 8001018:	d05e      	beq.n	80010d8 <__aeabi_dmul+0x154>
 800101a:	4647      	mov	r7, r8
 800101c:	e056      	b.n	80010cc <__aeabi_dmul+0x148>
 800101e:	4649      	mov	r1, r9
 8001020:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <__aeabi_dmul+0x360>)
 8001022:	4321      	orrs	r1, r4
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2900      	cmp	r1, #0
 800102a:	d12a      	bne.n	8001082 <__aeabi_dmul+0xfe>
 800102c:	2080      	movs	r0, #128	; 0x80
 800102e:	2202      	movs	r2, #2
 8001030:	0100      	lsls	r0, r0, #4
 8001032:	002b      	movs	r3, r5
 8001034:	4684      	mov	ip, r0
 8001036:	4316      	orrs	r6, r2
 8001038:	4642      	mov	r2, r8
 800103a:	4463      	add	r3, ip
 800103c:	407a      	eors	r2, r7
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2e0a      	cmp	r6, #10
 8001044:	dd00      	ble.n	8001048 <__aeabi_dmul+0xc4>
 8001046:	e231      	b.n	80014ac <__aeabi_dmul+0x528>
 8001048:	2000      	movs	r0, #0
 800104a:	2400      	movs	r4, #0
 800104c:	2102      	movs	r1, #2
 800104e:	2e02      	cmp	r6, #2
 8001050:	dc26      	bgt.n	80010a0 <__aeabi_dmul+0x11c>
 8001052:	3e01      	subs	r6, #1
 8001054:	2e01      	cmp	r6, #1
 8001056:	d852      	bhi.n	80010fe <__aeabi_dmul+0x17a>
 8001058:	2902      	cmp	r1, #2
 800105a:	d04c      	beq.n	80010f6 <__aeabi_dmul+0x172>
 800105c:	2901      	cmp	r1, #1
 800105e:	d000      	beq.n	8001062 <__aeabi_dmul+0xde>
 8001060:	e118      	b.n	8001294 <__aeabi_dmul+0x310>
 8001062:	2300      	movs	r3, #0
 8001064:	2400      	movs	r4, #0
 8001066:	2500      	movs	r5, #0
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	4323      	orrs	r3, r4
 800106c:	07d2      	lsls	r2, r2, #31
 800106e:	4313      	orrs	r3, r2
 8001070:	0028      	movs	r0, r5
 8001072:	0019      	movs	r1, r3
 8001074:	b007      	add	sp, #28
 8001076:	bcf0      	pop	{r4, r5, r6, r7}
 8001078:	46bb      	mov	fp, r7
 800107a:	46b2      	mov	sl, r6
 800107c:	46a9      	mov	r9, r5
 800107e:	46a0      	mov	r8, r4
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	2203      	movs	r2, #3
 8001086:	0109      	lsls	r1, r1, #4
 8001088:	002b      	movs	r3, r5
 800108a:	468c      	mov	ip, r1
 800108c:	4316      	orrs	r6, r2
 800108e:	4642      	mov	r2, r8
 8001090:	4463      	add	r3, ip
 8001092:	407a      	eors	r2, r7
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2e0a      	cmp	r6, #10
 800109a:	dd00      	ble.n	800109e <__aeabi_dmul+0x11a>
 800109c:	e228      	b.n	80014f0 <__aeabi_dmul+0x56c>
 800109e:	2103      	movs	r1, #3
 80010a0:	2501      	movs	r5, #1
 80010a2:	40b5      	lsls	r5, r6
 80010a4:	46ac      	mov	ip, r5
 80010a6:	26a6      	movs	r6, #166	; 0xa6
 80010a8:	4663      	mov	r3, ip
 80010aa:	00f6      	lsls	r6, r6, #3
 80010ac:	4035      	ands	r5, r6
 80010ae:	4233      	tst	r3, r6
 80010b0:	d10b      	bne.n	80010ca <__aeabi_dmul+0x146>
 80010b2:	2690      	movs	r6, #144	; 0x90
 80010b4:	00b6      	lsls	r6, r6, #2
 80010b6:	4233      	tst	r3, r6
 80010b8:	d118      	bne.n	80010ec <__aeabi_dmul+0x168>
 80010ba:	3eb9      	subs	r6, #185	; 0xb9
 80010bc:	3eff      	subs	r6, #255	; 0xff
 80010be:	421e      	tst	r6, r3
 80010c0:	d01d      	beq.n	80010fe <__aeabi_dmul+0x17a>
 80010c2:	46a3      	mov	fp, r4
 80010c4:	4682      	mov	sl, r0
 80010c6:	9100      	str	r1, [sp, #0]
 80010c8:	e000      	b.n	80010cc <__aeabi_dmul+0x148>
 80010ca:	0017      	movs	r7, r2
 80010cc:	9900      	ldr	r1, [sp, #0]
 80010ce:	003a      	movs	r2, r7
 80010d0:	2902      	cmp	r1, #2
 80010d2:	d010      	beq.n	80010f6 <__aeabi_dmul+0x172>
 80010d4:	465c      	mov	r4, fp
 80010d6:	4650      	mov	r0, sl
 80010d8:	2903      	cmp	r1, #3
 80010da:	d1bf      	bne.n	800105c <__aeabi_dmul+0xd8>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	031b      	lsls	r3, r3, #12
 80010e0:	431c      	orrs	r4, r3
 80010e2:	0324      	lsls	r4, r4, #12
 80010e4:	0005      	movs	r5, r0
 80010e6:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <__aeabi_dmul+0x360>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e7bd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010ec:	2480      	movs	r4, #128	; 0x80
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <__aeabi_dmul+0x360>)
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e7b8      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010f6:	2400      	movs	r4, #0
 80010f8:	2500      	movs	r5, #0
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <__aeabi_dmul+0x360>)
 80010fc:	e7b4      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010fe:	4653      	mov	r3, sl
 8001100:	041e      	lsls	r6, r3, #16
 8001102:	0c36      	lsrs	r6, r6, #16
 8001104:	0c1f      	lsrs	r7, r3, #16
 8001106:	0033      	movs	r3, r6
 8001108:	0c01      	lsrs	r1, r0, #16
 800110a:	0400      	lsls	r0, r0, #16
 800110c:	0c00      	lsrs	r0, r0, #16
 800110e:	4343      	muls	r3, r0
 8001110:	4698      	mov	r8, r3
 8001112:	0003      	movs	r3, r0
 8001114:	437b      	muls	r3, r7
 8001116:	4699      	mov	r9, r3
 8001118:	0033      	movs	r3, r6
 800111a:	434b      	muls	r3, r1
 800111c:	469c      	mov	ip, r3
 800111e:	4643      	mov	r3, r8
 8001120:	000d      	movs	r5, r1
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	469a      	mov	sl, r3
 8001126:	437d      	muls	r5, r7
 8001128:	44cc      	add	ip, r9
 800112a:	44d4      	add	ip, sl
 800112c:	9500      	str	r5, [sp, #0]
 800112e:	45e1      	cmp	r9, ip
 8001130:	d904      	bls.n	800113c <__aeabi_dmul+0x1b8>
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	4699      	mov	r9, r3
 8001138:	444d      	add	r5, r9
 800113a:	9500      	str	r5, [sp, #0]
 800113c:	4663      	mov	r3, ip
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	001d      	movs	r5, r3
 8001142:	4663      	mov	r3, ip
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	469c      	mov	ip, r3
 8001148:	4643      	mov	r3, r8
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	4698      	mov	r8, r3
 8001150:	4663      	mov	r3, ip
 8001152:	4443      	add	r3, r8
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	4698      	mov	r8, r3
 800115a:	0033      	movs	r3, r6
 800115c:	0424      	lsls	r4, r4, #16
 800115e:	0c24      	lsrs	r4, r4, #16
 8001160:	4363      	muls	r3, r4
 8001162:	469c      	mov	ip, r3
 8001164:	0023      	movs	r3, r4
 8001166:	437b      	muls	r3, r7
 8001168:	4699      	mov	r9, r3
 800116a:	4643      	mov	r3, r8
 800116c:	435e      	muls	r6, r3
 800116e:	435f      	muls	r7, r3
 8001170:	444e      	add	r6, r9
 8001172:	4663      	mov	r3, ip
 8001174:	46b2      	mov	sl, r6
 8001176:	0c1e      	lsrs	r6, r3, #16
 8001178:	4456      	add	r6, sl
 800117a:	45b1      	cmp	r9, r6
 800117c:	d903      	bls.n	8001186 <__aeabi_dmul+0x202>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	4699      	mov	r9, r3
 8001184:	444f      	add	r7, r9
 8001186:	0c33      	lsrs	r3, r6, #16
 8001188:	4699      	mov	r9, r3
 800118a:	003b      	movs	r3, r7
 800118c:	444b      	add	r3, r9
 800118e:	9305      	str	r3, [sp, #20]
 8001190:	4663      	mov	r3, ip
 8001192:	46ac      	mov	ip, r5
 8001194:	041f      	lsls	r7, r3, #16
 8001196:	0c3f      	lsrs	r7, r7, #16
 8001198:	0436      	lsls	r6, r6, #16
 800119a:	19f6      	adds	r6, r6, r7
 800119c:	44b4      	add	ip, r6
 800119e:	4663      	mov	r3, ip
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	465b      	mov	r3, fp
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	469c      	mov	ip, r3
 80011a8:	465b      	mov	r3, fp
 80011aa:	041f      	lsls	r7, r3, #16
 80011ac:	0c3f      	lsrs	r7, r7, #16
 80011ae:	003b      	movs	r3, r7
 80011b0:	4343      	muls	r3, r0
 80011b2:	4699      	mov	r9, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	4343      	muls	r3, r0
 80011b8:	469a      	mov	sl, r3
 80011ba:	464b      	mov	r3, r9
 80011bc:	4660      	mov	r0, ip
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	469b      	mov	fp, r3
 80011c2:	4348      	muls	r0, r1
 80011c4:	4379      	muls	r1, r7
 80011c6:	4451      	add	r1, sl
 80011c8:	4459      	add	r1, fp
 80011ca:	458a      	cmp	sl, r1
 80011cc:	d903      	bls.n	80011d6 <__aeabi_dmul+0x252>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	469a      	mov	sl, r3
 80011d4:	4450      	add	r0, sl
 80011d6:	0c0b      	lsrs	r3, r1, #16
 80011d8:	469a      	mov	sl, r3
 80011da:	464b      	mov	r3, r9
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	4699      	mov	r9, r3
 80011e2:	003b      	movs	r3, r7
 80011e4:	4363      	muls	r3, r4
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	4645      	mov	r5, r8
 80011ea:	4449      	add	r1, r9
 80011ec:	4699      	mov	r9, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	435c      	muls	r4, r3
 80011f2:	436b      	muls	r3, r5
 80011f4:	469c      	mov	ip, r3
 80011f6:	464b      	mov	r3, r9
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	4698      	mov	r8, r3
 80011fc:	436f      	muls	r7, r5
 80011fe:	193f      	adds	r7, r7, r4
 8001200:	4447      	add	r7, r8
 8001202:	4450      	add	r0, sl
 8001204:	42bc      	cmp	r4, r7
 8001206:	d903      	bls.n	8001210 <__aeabi_dmul+0x28c>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	4698      	mov	r8, r3
 800120e:	44c4      	add	ip, r8
 8001210:	9b04      	ldr	r3, [sp, #16]
 8001212:	9d00      	ldr	r5, [sp, #0]
 8001214:	4698      	mov	r8, r3
 8001216:	4445      	add	r5, r8
 8001218:	42b5      	cmp	r5, r6
 800121a:	41b6      	sbcs	r6, r6
 800121c:	4273      	negs	r3, r6
 800121e:	4698      	mov	r8, r3
 8001220:	464b      	mov	r3, r9
 8001222:	041e      	lsls	r6, r3, #16
 8001224:	9b05      	ldr	r3, [sp, #20]
 8001226:	043c      	lsls	r4, r7, #16
 8001228:	4699      	mov	r9, r3
 800122a:	0c36      	lsrs	r6, r6, #16
 800122c:	19a4      	adds	r4, r4, r6
 800122e:	444c      	add	r4, r9
 8001230:	46a1      	mov	r9, r4
 8001232:	4683      	mov	fp, r0
 8001234:	186e      	adds	r6, r5, r1
 8001236:	44c1      	add	r9, r8
 8001238:	428e      	cmp	r6, r1
 800123a:	4189      	sbcs	r1, r1
 800123c:	44cb      	add	fp, r9
 800123e:	465d      	mov	r5, fp
 8001240:	4249      	negs	r1, r1
 8001242:	186d      	adds	r5, r5, r1
 8001244:	429c      	cmp	r4, r3
 8001246:	41a4      	sbcs	r4, r4
 8001248:	45c1      	cmp	r9, r8
 800124a:	419b      	sbcs	r3, r3
 800124c:	4583      	cmp	fp, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	428d      	cmp	r5, r1
 8001252:	4189      	sbcs	r1, r1
 8001254:	425b      	negs	r3, r3
 8001256:	4264      	negs	r4, r4
 8001258:	431c      	orrs	r4, r3
 800125a:	4240      	negs	r0, r0
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	4249      	negs	r1, r1
 8001260:	4301      	orrs	r1, r0
 8001262:	0270      	lsls	r0, r6, #9
 8001264:	0c3f      	lsrs	r7, r7, #16
 8001266:	4318      	orrs	r0, r3
 8001268:	19e4      	adds	r4, r4, r7
 800126a:	1e47      	subs	r7, r0, #1
 800126c:	41b8      	sbcs	r0, r7
 800126e:	1864      	adds	r4, r4, r1
 8001270:	4464      	add	r4, ip
 8001272:	0df6      	lsrs	r6, r6, #23
 8001274:	0261      	lsls	r1, r4, #9
 8001276:	4330      	orrs	r0, r6
 8001278:	0dec      	lsrs	r4, r5, #23
 800127a:	026e      	lsls	r6, r5, #9
 800127c:	430c      	orrs	r4, r1
 800127e:	4330      	orrs	r0, r6
 8001280:	01c9      	lsls	r1, r1, #7
 8001282:	d400      	bmi.n	8001286 <__aeabi_dmul+0x302>
 8001284:	e0f1      	b.n	800146a <__aeabi_dmul+0x4e6>
 8001286:	2101      	movs	r1, #1
 8001288:	0843      	lsrs	r3, r0, #1
 800128a:	4001      	ands	r1, r0
 800128c:	430b      	orrs	r3, r1
 800128e:	07e0      	lsls	r0, r4, #31
 8001290:	4318      	orrs	r0, r3
 8001292:	0864      	lsrs	r4, r4, #1
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <__aeabi_dmul+0x368>)
 8001296:	9b02      	ldr	r3, [sp, #8]
 8001298:	468c      	mov	ip, r1
 800129a:	4463      	add	r3, ip
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_dmul+0x31e>
 80012a0:	e097      	b.n	80013d2 <__aeabi_dmul+0x44e>
 80012a2:	0741      	lsls	r1, r0, #29
 80012a4:	d009      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012a6:	210f      	movs	r1, #15
 80012a8:	4001      	ands	r1, r0
 80012aa:	2904      	cmp	r1, #4
 80012ac:	d005      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012ae:	1d01      	adds	r1, r0, #4
 80012b0:	4281      	cmp	r1, r0
 80012b2:	4180      	sbcs	r0, r0
 80012b4:	4240      	negs	r0, r0
 80012b6:	1824      	adds	r4, r4, r0
 80012b8:	0008      	movs	r0, r1
 80012ba:	01e1      	lsls	r1, r4, #7
 80012bc:	d506      	bpl.n	80012cc <__aeabi_dmul+0x348>
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	00c9      	lsls	r1, r1, #3
 80012c2:	468c      	mov	ip, r1
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <__aeabi_dmul+0x36c>)
 80012c6:	401c      	ands	r4, r3
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	4463      	add	r3, ip
 80012cc:	4909      	ldr	r1, [pc, #36]	; (80012f4 <__aeabi_dmul+0x370>)
 80012ce:	428b      	cmp	r3, r1
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_dmul+0x350>
 80012d2:	e710      	b.n	80010f6 <__aeabi_dmul+0x172>
 80012d4:	0761      	lsls	r1, r4, #29
 80012d6:	08c5      	lsrs	r5, r0, #3
 80012d8:	0264      	lsls	r4, r4, #9
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	430d      	orrs	r5, r1
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	e6c1      	b.n	8001068 <__aeabi_dmul+0xe4>
 80012e4:	000007ff 	.word	0x000007ff
 80012e8:	fffffc01 	.word	0xfffffc01
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	464b      	mov	r3, r9
 80012fa:	4323      	orrs	r3, r4
 80012fc:	d059      	beq.n	80013b2 <__aeabi_dmul+0x42e>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dmul+0x380>
 8001302:	e0a3      	b.n	800144c <__aeabi_dmul+0x4c8>
 8001304:	0020      	movs	r0, r4
 8001306:	f000 fd7f 	bl	8001e08 <__clzsi2>
 800130a:	0001      	movs	r1, r0
 800130c:	0003      	movs	r3, r0
 800130e:	390b      	subs	r1, #11
 8001310:	221d      	movs	r2, #29
 8001312:	1a52      	subs	r2, r2, r1
 8001314:	4649      	mov	r1, r9
 8001316:	0018      	movs	r0, r3
 8001318:	40d1      	lsrs	r1, r2
 800131a:	464a      	mov	r2, r9
 800131c:	3808      	subs	r0, #8
 800131e:	4082      	lsls	r2, r0
 8001320:	4084      	lsls	r4, r0
 8001322:	0010      	movs	r0, r2
 8001324:	430c      	orrs	r4, r1
 8001326:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <__aeabi_dmul+0x574>)
 8001328:	1aeb      	subs	r3, r5, r3
 800132a:	4694      	mov	ip, r2
 800132c:	4642      	mov	r2, r8
 800132e:	4463      	add	r3, ip
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	407a      	eors	r2, r7
 8001336:	3301      	adds	r3, #1
 8001338:	2100      	movs	r1, #0
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2e0a      	cmp	r6, #10
 8001340:	dd00      	ble.n	8001344 <__aeabi_dmul+0x3c0>
 8001342:	e667      	b.n	8001014 <__aeabi_dmul+0x90>
 8001344:	e683      	b.n	800104e <__aeabi_dmul+0xca>
 8001346:	465b      	mov	r3, fp
 8001348:	4303      	orrs	r3, r0
 800134a:	469a      	mov	sl, r3
 800134c:	d02a      	beq.n	80013a4 <__aeabi_dmul+0x420>
 800134e:	465b      	mov	r3, fp
 8001350:	2b00      	cmp	r3, #0
 8001352:	d06d      	beq.n	8001430 <__aeabi_dmul+0x4ac>
 8001354:	4658      	mov	r0, fp
 8001356:	f000 fd57 	bl	8001e08 <__clzsi2>
 800135a:	0001      	movs	r1, r0
 800135c:	0003      	movs	r3, r0
 800135e:	390b      	subs	r1, #11
 8001360:	221d      	movs	r2, #29
 8001362:	1a52      	subs	r2, r2, r1
 8001364:	0021      	movs	r1, r4
 8001366:	0018      	movs	r0, r3
 8001368:	465d      	mov	r5, fp
 800136a:	40d1      	lsrs	r1, r2
 800136c:	3808      	subs	r0, #8
 800136e:	4085      	lsls	r5, r0
 8001370:	000a      	movs	r2, r1
 8001372:	4084      	lsls	r4, r0
 8001374:	432a      	orrs	r2, r5
 8001376:	4693      	mov	fp, r2
 8001378:	46a2      	mov	sl, r4
 800137a:	4d5f      	ldr	r5, [pc, #380]	; (80014f8 <__aeabi_dmul+0x574>)
 800137c:	2600      	movs	r6, #0
 800137e:	1aed      	subs	r5, r5, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	e625      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 8001386:	465b      	mov	r3, fp
 8001388:	4303      	orrs	r3, r0
 800138a:	469a      	mov	sl, r3
 800138c:	d105      	bne.n	800139a <__aeabi_dmul+0x416>
 800138e:	2300      	movs	r3, #0
 8001390:	469b      	mov	fp, r3
 8001392:	3302      	adds	r3, #2
 8001394:	2608      	movs	r6, #8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	e61b      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 800139a:	2303      	movs	r3, #3
 800139c:	4682      	mov	sl, r0
 800139e:	260c      	movs	r6, #12
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	e616      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013a4:	2300      	movs	r3, #0
 80013a6:	469b      	mov	fp, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	2604      	movs	r6, #4
 80013ac:	2500      	movs	r5, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	e60f      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013b2:	4642      	mov	r2, r8
 80013b4:	3301      	adds	r3, #1
 80013b6:	9501      	str	r5, [sp, #4]
 80013b8:	431e      	orrs	r6, r3
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	407a      	eors	r2, r7
 80013be:	3301      	adds	r3, #1
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2e0a      	cmp	r6, #10
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dmul+0x44c>
 80013ce:	e621      	b.n	8001014 <__aeabi_dmul+0x90>
 80013d0:	e63d      	b.n	800104e <__aeabi_dmul+0xca>
 80013d2:	2101      	movs	r1, #1
 80013d4:	1ac9      	subs	r1, r1, r3
 80013d6:	2938      	cmp	r1, #56	; 0x38
 80013d8:	dd00      	ble.n	80013dc <__aeabi_dmul+0x458>
 80013da:	e642      	b.n	8001062 <__aeabi_dmul+0xde>
 80013dc:	291f      	cmp	r1, #31
 80013de:	dd47      	ble.n	8001470 <__aeabi_dmul+0x4ec>
 80013e0:	261f      	movs	r6, #31
 80013e2:	0025      	movs	r5, r4
 80013e4:	4276      	negs	r6, r6
 80013e6:	1af3      	subs	r3, r6, r3
 80013e8:	40dd      	lsrs	r5, r3
 80013ea:	002b      	movs	r3, r5
 80013ec:	2920      	cmp	r1, #32
 80013ee:	d005      	beq.n	80013fc <__aeabi_dmul+0x478>
 80013f0:	4942      	ldr	r1, [pc, #264]	; (80014fc <__aeabi_dmul+0x578>)
 80013f2:	9d02      	ldr	r5, [sp, #8]
 80013f4:	468c      	mov	ip, r1
 80013f6:	4465      	add	r5, ip
 80013f8:	40ac      	lsls	r4, r5
 80013fa:	4320      	orrs	r0, r4
 80013fc:	1e41      	subs	r1, r0, #1
 80013fe:	4188      	sbcs	r0, r1
 8001400:	4318      	orrs	r0, r3
 8001402:	2307      	movs	r3, #7
 8001404:	001d      	movs	r5, r3
 8001406:	2400      	movs	r4, #0
 8001408:	4005      	ands	r5, r0
 800140a:	4203      	tst	r3, r0
 800140c:	d04a      	beq.n	80014a4 <__aeabi_dmul+0x520>
 800140e:	230f      	movs	r3, #15
 8001410:	2400      	movs	r4, #0
 8001412:	4003      	ands	r3, r0
 8001414:	2b04      	cmp	r3, #4
 8001416:	d042      	beq.n	800149e <__aeabi_dmul+0x51a>
 8001418:	1d03      	adds	r3, r0, #4
 800141a:	4283      	cmp	r3, r0
 800141c:	4180      	sbcs	r0, r0
 800141e:	4240      	negs	r0, r0
 8001420:	1824      	adds	r4, r4, r0
 8001422:	0018      	movs	r0, r3
 8001424:	0223      	lsls	r3, r4, #8
 8001426:	d53a      	bpl.n	800149e <__aeabi_dmul+0x51a>
 8001428:	2301      	movs	r3, #1
 800142a:	2400      	movs	r4, #0
 800142c:	2500      	movs	r5, #0
 800142e:	e61b      	b.n	8001068 <__aeabi_dmul+0xe4>
 8001430:	f000 fcea 	bl	8001e08 <__clzsi2>
 8001434:	0001      	movs	r1, r0
 8001436:	0003      	movs	r3, r0
 8001438:	3115      	adds	r1, #21
 800143a:	3320      	adds	r3, #32
 800143c:	291c      	cmp	r1, #28
 800143e:	dd8f      	ble.n	8001360 <__aeabi_dmul+0x3dc>
 8001440:	3808      	subs	r0, #8
 8001442:	2200      	movs	r2, #0
 8001444:	4084      	lsls	r4, r0
 8001446:	4692      	mov	sl, r2
 8001448:	46a3      	mov	fp, r4
 800144a:	e796      	b.n	800137a <__aeabi_dmul+0x3f6>
 800144c:	f000 fcdc 	bl	8001e08 <__clzsi2>
 8001450:	0001      	movs	r1, r0
 8001452:	0003      	movs	r3, r0
 8001454:	3115      	adds	r1, #21
 8001456:	3320      	adds	r3, #32
 8001458:	291c      	cmp	r1, #28
 800145a:	dc00      	bgt.n	800145e <__aeabi_dmul+0x4da>
 800145c:	e758      	b.n	8001310 <__aeabi_dmul+0x38c>
 800145e:	0002      	movs	r2, r0
 8001460:	464c      	mov	r4, r9
 8001462:	3a08      	subs	r2, #8
 8001464:	2000      	movs	r0, #0
 8001466:	4094      	lsls	r4, r2
 8001468:	e75d      	b.n	8001326 <__aeabi_dmul+0x3a2>
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	e711      	b.n	8001294 <__aeabi_dmul+0x310>
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <__aeabi_dmul+0x57c>)
 8001472:	0026      	movs	r6, r4
 8001474:	469c      	mov	ip, r3
 8001476:	0003      	movs	r3, r0
 8001478:	9d02      	ldr	r5, [sp, #8]
 800147a:	40cb      	lsrs	r3, r1
 800147c:	4465      	add	r5, ip
 800147e:	40ae      	lsls	r6, r5
 8001480:	431e      	orrs	r6, r3
 8001482:	0003      	movs	r3, r0
 8001484:	40ab      	lsls	r3, r5
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	4183      	sbcs	r3, r0
 800148a:	0030      	movs	r0, r6
 800148c:	4318      	orrs	r0, r3
 800148e:	40cc      	lsrs	r4, r1
 8001490:	0743      	lsls	r3, r0, #29
 8001492:	d0c7      	beq.n	8001424 <__aeabi_dmul+0x4a0>
 8001494:	230f      	movs	r3, #15
 8001496:	4003      	ands	r3, r0
 8001498:	2b04      	cmp	r3, #4
 800149a:	d1bd      	bne.n	8001418 <__aeabi_dmul+0x494>
 800149c:	e7c2      	b.n	8001424 <__aeabi_dmul+0x4a0>
 800149e:	0765      	lsls	r5, r4, #29
 80014a0:	0264      	lsls	r4, r4, #9
 80014a2:	0b24      	lsrs	r4, r4, #12
 80014a4:	08c0      	lsrs	r0, r0, #3
 80014a6:	2300      	movs	r3, #0
 80014a8:	4305      	orrs	r5, r0
 80014aa:	e5dd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ac:	2500      	movs	r5, #0
 80014ae:	2302      	movs	r3, #2
 80014b0:	2e0f      	cmp	r6, #15
 80014b2:	d10c      	bne.n	80014ce <__aeabi_dmul+0x54a>
 80014b4:	2480      	movs	r4, #128	; 0x80
 80014b6:	465b      	mov	r3, fp
 80014b8:	0324      	lsls	r4, r4, #12
 80014ba:	4223      	tst	r3, r4
 80014bc:	d00e      	beq.n	80014dc <__aeabi_dmul+0x558>
 80014be:	4221      	tst	r1, r4
 80014c0:	d10c      	bne.n	80014dc <__aeabi_dmul+0x558>
 80014c2:	430c      	orrs	r4, r1
 80014c4:	0324      	lsls	r4, r4, #12
 80014c6:	003a      	movs	r2, r7
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <__aeabi_dmul+0x580>)
 80014ca:	0b24      	lsrs	r4, r4, #12
 80014cc:	e5cc      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0x550>
 80014d2:	e5a2      	b.n	800101a <__aeabi_dmul+0x96>
 80014d4:	468b      	mov	fp, r1
 80014d6:	46aa      	mov	sl, r5
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	e5f7      	b.n	80010cc <__aeabi_dmul+0x148>
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	465b      	mov	r3, fp
 80014e0:	0324      	lsls	r4, r4, #12
 80014e2:	431c      	orrs	r4, r3
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	4642      	mov	r2, r8
 80014e8:	4655      	mov	r5, sl
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__aeabi_dmul+0x580>)
 80014ec:	0b24      	lsrs	r4, r4, #12
 80014ee:	e5bb      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014f0:	464d      	mov	r5, r9
 80014f2:	0021      	movs	r1, r4
 80014f4:	2303      	movs	r3, #3
 80014f6:	e7db      	b.n	80014b0 <__aeabi_dmul+0x52c>
 80014f8:	fffffc0d 	.word	0xfffffc0d
 80014fc:	0000043e 	.word	0x0000043e
 8001500:	0000041e 	.word	0x0000041e
 8001504:	000007ff 	.word	0x000007ff

08001508 <__aeabi_dsub>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	464e      	mov	r6, r9
 800150e:	4645      	mov	r5, r8
 8001510:	46de      	mov	lr, fp
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	000d      	movs	r5, r1
 8001516:	0004      	movs	r4, r0
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	032b      	lsls	r3, r5, #12
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	0f62      	lsrs	r2, r4, #29
 8001522:	431a      	orrs	r2, r3
 8001524:	00e3      	lsls	r3, r4, #3
 8001526:	030c      	lsls	r4, r1, #12
 8001528:	0a64      	lsrs	r4, r4, #9
 800152a:	0f47      	lsrs	r7, r0, #29
 800152c:	4327      	orrs	r7, r4
 800152e:	4cd0      	ldr	r4, [pc, #832]	; (8001870 <__aeabi_dsub+0x368>)
 8001530:	006e      	lsls	r6, r5, #1
 8001532:	4691      	mov	r9, r2
 8001534:	b083      	sub	sp, #12
 8001536:	004a      	lsls	r2, r1, #1
 8001538:	00c0      	lsls	r0, r0, #3
 800153a:	4698      	mov	r8, r3
 800153c:	46a2      	mov	sl, r4
 800153e:	0d76      	lsrs	r6, r6, #21
 8001540:	0fed      	lsrs	r5, r5, #31
 8001542:	0d52      	lsrs	r2, r2, #21
 8001544:	0fc9      	lsrs	r1, r1, #31
 8001546:	9001      	str	r0, [sp, #4]
 8001548:	42a2      	cmp	r2, r4
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x46>
 800154c:	e0b9      	b.n	80016c2 <__aeabi_dsub+0x1ba>
 800154e:	2401      	movs	r4, #1
 8001550:	4061      	eors	r1, r4
 8001552:	468b      	mov	fp, r1
 8001554:	428d      	cmp	r5, r1
 8001556:	d100      	bne.n	800155a <__aeabi_dsub+0x52>
 8001558:	e08d      	b.n	8001676 <__aeabi_dsub+0x16e>
 800155a:	1ab4      	subs	r4, r6, r2
 800155c:	46a4      	mov	ip, r4
 800155e:	2c00      	cmp	r4, #0
 8001560:	dc00      	bgt.n	8001564 <__aeabi_dsub+0x5c>
 8001562:	e0b7      	b.n	80016d4 <__aeabi_dsub+0x1cc>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dsub+0x62>
 8001568:	e0cb      	b.n	8001702 <__aeabi_dsub+0x1fa>
 800156a:	4ac1      	ldr	r2, [pc, #772]	; (8001870 <__aeabi_dsub+0x368>)
 800156c:	4296      	cmp	r6, r2
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x6a>
 8001570:	e186      	b.n	8001880 <__aeabi_dsub+0x378>
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0412      	lsls	r2, r2, #16
 8001576:	4317      	orrs	r7, r2
 8001578:	4662      	mov	r2, ip
 800157a:	2a38      	cmp	r2, #56	; 0x38
 800157c:	dd00      	ble.n	8001580 <__aeabi_dsub+0x78>
 800157e:	e1a4      	b.n	80018ca <__aeabi_dsub+0x3c2>
 8001580:	2a1f      	cmp	r2, #31
 8001582:	dd00      	ble.n	8001586 <__aeabi_dsub+0x7e>
 8001584:	e21d      	b.n	80019c2 <__aeabi_dsub+0x4ba>
 8001586:	4661      	mov	r1, ip
 8001588:	2220      	movs	r2, #32
 800158a:	003c      	movs	r4, r7
 800158c:	1a52      	subs	r2, r2, r1
 800158e:	0001      	movs	r1, r0
 8001590:	4090      	lsls	r0, r2
 8001592:	4094      	lsls	r4, r2
 8001594:	1e42      	subs	r2, r0, #1
 8001596:	4190      	sbcs	r0, r2
 8001598:	4662      	mov	r2, ip
 800159a:	46a0      	mov	r8, r4
 800159c:	4664      	mov	r4, ip
 800159e:	40d7      	lsrs	r7, r2
 80015a0:	464a      	mov	r2, r9
 80015a2:	40e1      	lsrs	r1, r4
 80015a4:	4644      	mov	r4, r8
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	4691      	mov	r9, r2
 80015aa:	430c      	orrs	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	1b1c      	subs	r4, r3, r4
 80015b0:	42a3      	cmp	r3, r4
 80015b2:	4192      	sbcs	r2, r2
 80015b4:	464b      	mov	r3, r9
 80015b6:	4252      	negs	r2, r2
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	469a      	mov	sl, r3
 80015bc:	4653      	mov	r3, sl
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_dsub+0xbc>
 80015c2:	e12b      	b.n	800181c <__aeabi_dsub+0x314>
 80015c4:	4653      	mov	r3, sl
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	0a53      	lsrs	r3, r2, #9
 80015ca:	469a      	mov	sl, r3
 80015cc:	4653      	mov	r3, sl
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0xcc>
 80015d2:	e166      	b.n	80018a2 <__aeabi_dsub+0x39a>
 80015d4:	4650      	mov	r0, sl
 80015d6:	f000 fc17 	bl	8001e08 <__clzsi2>
 80015da:	0003      	movs	r3, r0
 80015dc:	3b08      	subs	r3, #8
 80015de:	2220      	movs	r2, #32
 80015e0:	0020      	movs	r0, r4
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4651      	mov	r1, sl
 80015e6:	40d0      	lsrs	r0, r2
 80015e8:	4099      	lsls	r1, r3
 80015ea:	0002      	movs	r2, r0
 80015ec:	409c      	lsls	r4, r3
 80015ee:	430a      	orrs	r2, r1
 80015f0:	429e      	cmp	r6, r3
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dsub+0xee>
 80015f4:	e164      	b.n	80018c0 <__aeabi_dsub+0x3b8>
 80015f6:	1b9b      	subs	r3, r3, r6
 80015f8:	1c59      	adds	r1, r3, #1
 80015fa:	291f      	cmp	r1, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dsub+0xf8>
 80015fe:	e0fe      	b.n	80017fe <__aeabi_dsub+0x2f6>
 8001600:	2320      	movs	r3, #32
 8001602:	0010      	movs	r0, r2
 8001604:	0026      	movs	r6, r4
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	409c      	lsls	r4, r3
 800160a:	4098      	lsls	r0, r3
 800160c:	40ce      	lsrs	r6, r1
 800160e:	40ca      	lsrs	r2, r1
 8001610:	1e63      	subs	r3, r4, #1
 8001612:	419c      	sbcs	r4, r3
 8001614:	4330      	orrs	r0, r6
 8001616:	4692      	mov	sl, r2
 8001618:	2600      	movs	r6, #0
 800161a:	4304      	orrs	r4, r0
 800161c:	0763      	lsls	r3, r4, #29
 800161e:	d009      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001620:	230f      	movs	r3, #15
 8001622:	4023      	ands	r3, r4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d005      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001628:	1d23      	adds	r3, r4, #4
 800162a:	42a3      	cmp	r3, r4
 800162c:	41a4      	sbcs	r4, r4
 800162e:	4264      	negs	r4, r4
 8001630:	44a2      	add	sl, r4
 8001632:	001c      	movs	r4, r3
 8001634:	4653      	mov	r3, sl
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_dsub+0x134>
 800163a:	e0f2      	b.n	8001822 <__aeabi_dsub+0x31a>
 800163c:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <__aeabi_dsub+0x368>)
 800163e:	3601      	adds	r6, #1
 8001640:	429e      	cmp	r6, r3
 8001642:	d100      	bne.n	8001646 <__aeabi_dsub+0x13e>
 8001644:	e10f      	b.n	8001866 <__aeabi_dsub+0x35e>
 8001646:	4653      	mov	r3, sl
 8001648:	498a      	ldr	r1, [pc, #552]	; (8001874 <__aeabi_dsub+0x36c>)
 800164a:	08e4      	lsrs	r4, r4, #3
 800164c:	400b      	ands	r3, r1
 800164e:	0019      	movs	r1, r3
 8001650:	075b      	lsls	r3, r3, #29
 8001652:	4323      	orrs	r3, r4
 8001654:	0572      	lsls	r2, r6, #21
 8001656:	024c      	lsls	r4, r1, #9
 8001658:	0b24      	lsrs	r4, r4, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	0512      	lsls	r2, r2, #20
 800165e:	4322      	orrs	r2, r4
 8001660:	07ed      	lsls	r5, r5, #31
 8001662:	432a      	orrs	r2, r5
 8001664:	0018      	movs	r0, r3
 8001666:	0011      	movs	r1, r2
 8001668:	b003      	add	sp, #12
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	1ab4      	subs	r4, r6, r2
 8001678:	46a4      	mov	ip, r4
 800167a:	2c00      	cmp	r4, #0
 800167c:	dd59      	ble.n	8001732 <__aeabi_dsub+0x22a>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x17c>
 8001682:	e0b0      	b.n	80017e6 <__aeabi_dsub+0x2de>
 8001684:	4556      	cmp	r6, sl
 8001686:	d100      	bne.n	800168a <__aeabi_dsub+0x182>
 8001688:	e0fa      	b.n	8001880 <__aeabi_dsub+0x378>
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0412      	lsls	r2, r2, #16
 800168e:	4317      	orrs	r7, r2
 8001690:	4662      	mov	r2, ip
 8001692:	2a38      	cmp	r2, #56	; 0x38
 8001694:	dd00      	ble.n	8001698 <__aeabi_dsub+0x190>
 8001696:	e0d4      	b.n	8001842 <__aeabi_dsub+0x33a>
 8001698:	2a1f      	cmp	r2, #31
 800169a:	dc00      	bgt.n	800169e <__aeabi_dsub+0x196>
 800169c:	e1c0      	b.n	8001a20 <__aeabi_dsub+0x518>
 800169e:	0039      	movs	r1, r7
 80016a0:	3a20      	subs	r2, #32
 80016a2:	40d1      	lsrs	r1, r2
 80016a4:	4662      	mov	r2, ip
 80016a6:	2a20      	cmp	r2, #32
 80016a8:	d006      	beq.n	80016b8 <__aeabi_dsub+0x1b0>
 80016aa:	4664      	mov	r4, ip
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	1b12      	subs	r2, r2, r4
 80016b0:	003c      	movs	r4, r7
 80016b2:	4094      	lsls	r4, r2
 80016b4:	4304      	orrs	r4, r0
 80016b6:	9401      	str	r4, [sp, #4]
 80016b8:	9c01      	ldr	r4, [sp, #4]
 80016ba:	1e62      	subs	r2, r4, #1
 80016bc:	4194      	sbcs	r4, r2
 80016be:	430c      	orrs	r4, r1
 80016c0:	e0c3      	b.n	800184a <__aeabi_dsub+0x342>
 80016c2:	003c      	movs	r4, r7
 80016c4:	4304      	orrs	r4, r0
 80016c6:	d02b      	beq.n	8001720 <__aeabi_dsub+0x218>
 80016c8:	468b      	mov	fp, r1
 80016ca:	428d      	cmp	r5, r1
 80016cc:	d02e      	beq.n	800172c <__aeabi_dsub+0x224>
 80016ce:	4c6a      	ldr	r4, [pc, #424]	; (8001878 <__aeabi_dsub+0x370>)
 80016d0:	46a4      	mov	ip, r4
 80016d2:	44b4      	add	ip, r6
 80016d4:	4664      	mov	r4, ip
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d05f      	beq.n	800179a <__aeabi_dsub+0x292>
 80016da:	1b94      	subs	r4, r2, r6
 80016dc:	46a4      	mov	ip, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dsub+0x1dc>
 80016e2:	e120      	b.n	8001926 <__aeabi_dsub+0x41e>
 80016e4:	464c      	mov	r4, r9
 80016e6:	431c      	orrs	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x1e4>
 80016ea:	e1c7      	b.n	8001a7c <__aeabi_dsub+0x574>
 80016ec:	4661      	mov	r1, ip
 80016ee:	1e4c      	subs	r4, r1, #1
 80016f0:	2901      	cmp	r1, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dsub+0x1ee>
 80016f4:	e223      	b.n	8001b3e <__aeabi_dsub+0x636>
 80016f6:	4d5e      	ldr	r5, [pc, #376]	; (8001870 <__aeabi_dsub+0x368>)
 80016f8:	45ac      	cmp	ip, r5
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x1f6>
 80016fc:	e1d8      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 80016fe:	46a4      	mov	ip, r4
 8001700:	e11a      	b.n	8001938 <__aeabi_dsub+0x430>
 8001702:	003a      	movs	r2, r7
 8001704:	4302      	orrs	r2, r0
 8001706:	d100      	bne.n	800170a <__aeabi_dsub+0x202>
 8001708:	e0e4      	b.n	80018d4 <__aeabi_dsub+0x3cc>
 800170a:	0022      	movs	r2, r4
 800170c:	3a01      	subs	r2, #1
 800170e:	2c01      	cmp	r4, #1
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x20c>
 8001712:	e1c3      	b.n	8001a9c <__aeabi_dsub+0x594>
 8001714:	4956      	ldr	r1, [pc, #344]	; (8001870 <__aeabi_dsub+0x368>)
 8001716:	428c      	cmp	r4, r1
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0x214>
 800171a:	e0b1      	b.n	8001880 <__aeabi_dsub+0x378>
 800171c:	4694      	mov	ip, r2
 800171e:	e72b      	b.n	8001578 <__aeabi_dsub+0x70>
 8001720:	2401      	movs	r4, #1
 8001722:	4061      	eors	r1, r4
 8001724:	468b      	mov	fp, r1
 8001726:	428d      	cmp	r5, r1
 8001728:	d000      	beq.n	800172c <__aeabi_dsub+0x224>
 800172a:	e716      	b.n	800155a <__aeabi_dsub+0x52>
 800172c:	4952      	ldr	r1, [pc, #328]	; (8001878 <__aeabi_dsub+0x370>)
 800172e:	468c      	mov	ip, r1
 8001730:	44b4      	add	ip, r6
 8001732:	4664      	mov	r4, ip
 8001734:	2c00      	cmp	r4, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dsub+0x232>
 8001738:	e0d3      	b.n	80018e2 <__aeabi_dsub+0x3da>
 800173a:	1b91      	subs	r1, r2, r6
 800173c:	468c      	mov	ip, r1
 800173e:	2e00      	cmp	r6, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x23c>
 8001742:	e15e      	b.n	8001a02 <__aeabi_dsub+0x4fa>
 8001744:	494a      	ldr	r1, [pc, #296]	; (8001870 <__aeabi_dsub+0x368>)
 8001746:	428a      	cmp	r2, r1
 8001748:	d100      	bne.n	800174c <__aeabi_dsub+0x244>
 800174a:	e1be      	b.n	8001aca <__aeabi_dsub+0x5c2>
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	464c      	mov	r4, r9
 8001750:	0409      	lsls	r1, r1, #16
 8001752:	430c      	orrs	r4, r1
 8001754:	46a1      	mov	r9, r4
 8001756:	4661      	mov	r1, ip
 8001758:	2938      	cmp	r1, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dsub+0x256>
 800175c:	e1ba      	b.n	8001ad4 <__aeabi_dsub+0x5cc>
 800175e:	291f      	cmp	r1, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dsub+0x25c>
 8001762:	e227      	b.n	8001bb4 <__aeabi_dsub+0x6ac>
 8001764:	2420      	movs	r4, #32
 8001766:	1a64      	subs	r4, r4, r1
 8001768:	4649      	mov	r1, r9
 800176a:	40a1      	lsls	r1, r4
 800176c:	001e      	movs	r6, r3
 800176e:	4688      	mov	r8, r1
 8001770:	4661      	mov	r1, ip
 8001772:	40a3      	lsls	r3, r4
 8001774:	40ce      	lsrs	r6, r1
 8001776:	4641      	mov	r1, r8
 8001778:	1e5c      	subs	r4, r3, #1
 800177a:	41a3      	sbcs	r3, r4
 800177c:	4331      	orrs	r1, r6
 800177e:	4319      	orrs	r1, r3
 8001780:	000c      	movs	r4, r1
 8001782:	4663      	mov	r3, ip
 8001784:	4649      	mov	r1, r9
 8001786:	40d9      	lsrs	r1, r3
 8001788:	187f      	adds	r7, r7, r1
 800178a:	1824      	adds	r4, r4, r0
 800178c:	4284      	cmp	r4, r0
 800178e:	419b      	sbcs	r3, r3
 8001790:	425b      	negs	r3, r3
 8001792:	469a      	mov	sl, r3
 8001794:	0016      	movs	r6, r2
 8001796:	44ba      	add	sl, r7
 8001798:	e05d      	b.n	8001856 <__aeabi_dsub+0x34e>
 800179a:	4c38      	ldr	r4, [pc, #224]	; (800187c <__aeabi_dsub+0x374>)
 800179c:	1c72      	adds	r2, r6, #1
 800179e:	4222      	tst	r2, r4
 80017a0:	d000      	beq.n	80017a4 <__aeabi_dsub+0x29c>
 80017a2:	e0df      	b.n	8001964 <__aeabi_dsub+0x45c>
 80017a4:	464a      	mov	r2, r9
 80017a6:	431a      	orrs	r2, r3
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	d000      	beq.n	80017ae <__aeabi_dsub+0x2a6>
 80017ac:	e15c      	b.n	8001a68 <__aeabi_dsub+0x560>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dsub+0x2ac>
 80017b2:	e1cf      	b.n	8001b54 <__aeabi_dsub+0x64c>
 80017b4:	003a      	movs	r2, r7
 80017b6:	4302      	orrs	r2, r0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dsub+0x2b4>
 80017ba:	e17f      	b.n	8001abc <__aeabi_dsub+0x5b4>
 80017bc:	1a1c      	subs	r4, r3, r0
 80017be:	464a      	mov	r2, r9
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	1bd2      	subs	r2, r2, r7
 80017c6:	4249      	negs	r1, r1
 80017c8:	1a52      	subs	r2, r2, r1
 80017ca:	4692      	mov	sl, r2
 80017cc:	0212      	lsls	r2, r2, #8
 80017ce:	d400      	bmi.n	80017d2 <__aeabi_dsub+0x2ca>
 80017d0:	e20a      	b.n	8001be8 <__aeabi_dsub+0x6e0>
 80017d2:	1ac4      	subs	r4, r0, r3
 80017d4:	42a0      	cmp	r0, r4
 80017d6:	4180      	sbcs	r0, r0
 80017d8:	464b      	mov	r3, r9
 80017da:	4240      	negs	r0, r0
 80017dc:	1aff      	subs	r7, r7, r3
 80017de:	1a3b      	subs	r3, r7, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	465d      	mov	r5, fp
 80017e4:	e71a      	b.n	800161c <__aeabi_dsub+0x114>
 80017e6:	003a      	movs	r2, r7
 80017e8:	4302      	orrs	r2, r0
 80017ea:	d073      	beq.n	80018d4 <__aeabi_dsub+0x3cc>
 80017ec:	0022      	movs	r2, r4
 80017ee:	3a01      	subs	r2, #1
 80017f0:	2c01      	cmp	r4, #1
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x2ee>
 80017f4:	e0cb      	b.n	800198e <__aeabi_dsub+0x486>
 80017f6:	4554      	cmp	r4, sl
 80017f8:	d042      	beq.n	8001880 <__aeabi_dsub+0x378>
 80017fa:	4694      	mov	ip, r2
 80017fc:	e748      	b.n	8001690 <__aeabi_dsub+0x188>
 80017fe:	0010      	movs	r0, r2
 8001800:	3b1f      	subs	r3, #31
 8001802:	40d8      	lsrs	r0, r3
 8001804:	2920      	cmp	r1, #32
 8001806:	d003      	beq.n	8001810 <__aeabi_dsub+0x308>
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	1a5b      	subs	r3, r3, r1
 800180c:	409a      	lsls	r2, r3
 800180e:	4314      	orrs	r4, r2
 8001810:	1e63      	subs	r3, r4, #1
 8001812:	419c      	sbcs	r4, r3
 8001814:	2300      	movs	r3, #0
 8001816:	2600      	movs	r6, #0
 8001818:	469a      	mov	sl, r3
 800181a:	4304      	orrs	r4, r0
 800181c:	0763      	lsls	r3, r4, #29
 800181e:	d000      	beq.n	8001822 <__aeabi_dsub+0x31a>
 8001820:	e6fe      	b.n	8001620 <__aeabi_dsub+0x118>
 8001822:	4652      	mov	r2, sl
 8001824:	08e3      	lsrs	r3, r4, #3
 8001826:	0752      	lsls	r2, r2, #29
 8001828:	4313      	orrs	r3, r2
 800182a:	4652      	mov	r2, sl
 800182c:	46b4      	mov	ip, r6
 800182e:	08d2      	lsrs	r2, r2, #3
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <__aeabi_dsub+0x368>)
 8001832:	458c      	cmp	ip, r1
 8001834:	d02a      	beq.n	800188c <__aeabi_dsub+0x384>
 8001836:	0312      	lsls	r2, r2, #12
 8001838:	0b14      	lsrs	r4, r2, #12
 800183a:	4662      	mov	r2, ip
 800183c:	0552      	lsls	r2, r2, #21
 800183e:	0d52      	lsrs	r2, r2, #21
 8001840:	e70c      	b.n	800165c <__aeabi_dsub+0x154>
 8001842:	003c      	movs	r4, r7
 8001844:	4304      	orrs	r4, r0
 8001846:	1e62      	subs	r2, r4, #1
 8001848:	4194      	sbcs	r4, r2
 800184a:	18e4      	adds	r4, r4, r3
 800184c:	429c      	cmp	r4, r3
 800184e:	4192      	sbcs	r2, r2
 8001850:	4252      	negs	r2, r2
 8001852:	444a      	add	r2, r9
 8001854:	4692      	mov	sl, r2
 8001856:	4653      	mov	r3, sl
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	d5df      	bpl.n	800181c <__aeabi_dsub+0x314>
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__aeabi_dsub+0x368>)
 800185e:	3601      	adds	r6, #1
 8001860:	429e      	cmp	r6, r3
 8001862:	d000      	beq.n	8001866 <__aeabi_dsub+0x35e>
 8001864:	e0a0      	b.n	80019a8 <__aeabi_dsub+0x4a0>
 8001866:	0032      	movs	r2, r6
 8001868:	2400      	movs	r4, #0
 800186a:	2300      	movs	r3, #0
 800186c:	e6f6      	b.n	800165c <__aeabi_dsub+0x154>
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	000007ff 	.word	0x000007ff
 8001874:	ff7fffff 	.word	0xff7fffff
 8001878:	fffff801 	.word	0xfffff801
 800187c:	000007fe 	.word	0x000007fe
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	464a      	mov	r2, r9
 8001884:	0752      	lsls	r2, r2, #29
 8001886:	4313      	orrs	r3, r2
 8001888:	464a      	mov	r2, r9
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	0019      	movs	r1, r3
 800188e:	4311      	orrs	r1, r2
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x38c>
 8001892:	e1b5      	b.n	8001c00 <__aeabi_dsub+0x6f8>
 8001894:	2480      	movs	r4, #128	; 0x80
 8001896:	0324      	lsls	r4, r4, #12
 8001898:	4314      	orrs	r4, r2
 800189a:	0324      	lsls	r4, r4, #12
 800189c:	4ad5      	ldr	r2, [pc, #852]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	e6dc      	b.n	800165c <__aeabi_dsub+0x154>
 80018a2:	0020      	movs	r0, r4
 80018a4:	f000 fab0 	bl	8001e08 <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	3318      	adds	r3, #24
 80018ac:	2b1f      	cmp	r3, #31
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_dsub+0x3aa>
 80018b0:	e695      	b.n	80015de <__aeabi_dsub+0xd6>
 80018b2:	0022      	movs	r2, r4
 80018b4:	3808      	subs	r0, #8
 80018b6:	4082      	lsls	r2, r0
 80018b8:	2400      	movs	r4, #0
 80018ba:	429e      	cmp	r6, r3
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dsub+0x3b8>
 80018be:	e69a      	b.n	80015f6 <__aeabi_dsub+0xee>
 80018c0:	1af6      	subs	r6, r6, r3
 80018c2:	4bcd      	ldr	r3, [pc, #820]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80018c4:	401a      	ands	r2, r3
 80018c6:	4692      	mov	sl, r2
 80018c8:	e6a8      	b.n	800161c <__aeabi_dsub+0x114>
 80018ca:	003c      	movs	r4, r7
 80018cc:	4304      	orrs	r4, r0
 80018ce:	1e62      	subs	r2, r4, #1
 80018d0:	4194      	sbcs	r4, r2
 80018d2:	e66c      	b.n	80015ae <__aeabi_dsub+0xa6>
 80018d4:	464a      	mov	r2, r9
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	0752      	lsls	r2, r2, #29
 80018da:	4313      	orrs	r3, r2
 80018dc:	464a      	mov	r2, r9
 80018de:	08d2      	lsrs	r2, r2, #3
 80018e0:	e7a6      	b.n	8001830 <__aeabi_dsub+0x328>
 80018e2:	4cc6      	ldr	r4, [pc, #792]	; (8001bfc <__aeabi_dsub+0x6f4>)
 80018e4:	1c72      	adds	r2, r6, #1
 80018e6:	4222      	tst	r2, r4
 80018e8:	d000      	beq.n	80018ec <__aeabi_dsub+0x3e4>
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dsub+0x53e>
 80018ec:	464a      	mov	r2, r9
 80018ee:	431a      	orrs	r2, r3
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x3ee>
 80018f4:	e105      	b.n	8001b02 <__aeabi_dsub+0x5fa>
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x3f4>
 80018fa:	e156      	b.n	8001baa <__aeabi_dsub+0x6a2>
 80018fc:	003a      	movs	r2, r7
 80018fe:	4302      	orrs	r2, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x3fc>
 8001902:	e0db      	b.n	8001abc <__aeabi_dsub+0x5b4>
 8001904:	181c      	adds	r4, r3, r0
 8001906:	429c      	cmp	r4, r3
 8001908:	419b      	sbcs	r3, r3
 800190a:	444f      	add	r7, r9
 800190c:	46ba      	mov	sl, r7
 800190e:	425b      	negs	r3, r3
 8001910:	449a      	add	sl, r3
 8001912:	4653      	mov	r3, sl
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	d400      	bmi.n	800191a <__aeabi_dsub+0x412>
 8001918:	e780      	b.n	800181c <__aeabi_dsub+0x314>
 800191a:	4652      	mov	r2, sl
 800191c:	4bb6      	ldr	r3, [pc, #728]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 800191e:	2601      	movs	r6, #1
 8001920:	401a      	ands	r2, r3
 8001922:	4692      	mov	sl, r2
 8001924:	e77a      	b.n	800181c <__aeabi_dsub+0x314>
 8001926:	4cb3      	ldr	r4, [pc, #716]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001928:	42a2      	cmp	r2, r4
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x426>
 800192c:	e0c0      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 800192e:	2480      	movs	r4, #128	; 0x80
 8001930:	464d      	mov	r5, r9
 8001932:	0424      	lsls	r4, r4, #16
 8001934:	4325      	orrs	r5, r4
 8001936:	46a9      	mov	r9, r5
 8001938:	4664      	mov	r4, ip
 800193a:	2c38      	cmp	r4, #56	; 0x38
 800193c:	dc53      	bgt.n	80019e6 <__aeabi_dsub+0x4de>
 800193e:	4661      	mov	r1, ip
 8001940:	2c1f      	cmp	r4, #31
 8001942:	dd00      	ble.n	8001946 <__aeabi_dsub+0x43e>
 8001944:	e0cd      	b.n	8001ae2 <__aeabi_dsub+0x5da>
 8001946:	2520      	movs	r5, #32
 8001948:	001e      	movs	r6, r3
 800194a:	1b2d      	subs	r5, r5, r4
 800194c:	464c      	mov	r4, r9
 800194e:	40ab      	lsls	r3, r5
 8001950:	40ac      	lsls	r4, r5
 8001952:	40ce      	lsrs	r6, r1
 8001954:	1e5d      	subs	r5, r3, #1
 8001956:	41ab      	sbcs	r3, r5
 8001958:	4334      	orrs	r4, r6
 800195a:	4323      	orrs	r3, r4
 800195c:	464c      	mov	r4, r9
 800195e:	40cc      	lsrs	r4, r1
 8001960:	1b3f      	subs	r7, r7, r4
 8001962:	e045      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001964:	464a      	mov	r2, r9
 8001966:	1a1c      	subs	r4, r3, r0
 8001968:	1bd1      	subs	r1, r2, r7
 800196a:	42a3      	cmp	r3, r4
 800196c:	4192      	sbcs	r2, r2
 800196e:	4252      	negs	r2, r2
 8001970:	4692      	mov	sl, r2
 8001972:	000a      	movs	r2, r1
 8001974:	4651      	mov	r1, sl
 8001976:	1a52      	subs	r2, r2, r1
 8001978:	4692      	mov	sl, r2
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	d500      	bpl.n	8001980 <__aeabi_dsub+0x478>
 800197e:	e083      	b.n	8001a88 <__aeabi_dsub+0x580>
 8001980:	4653      	mov	r3, sl
 8001982:	4323      	orrs	r3, r4
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x480>
 8001986:	e621      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001988:	2200      	movs	r2, #0
 800198a:	2500      	movs	r5, #0
 800198c:	e753      	b.n	8001836 <__aeabi_dsub+0x32e>
 800198e:	181c      	adds	r4, r3, r0
 8001990:	429c      	cmp	r4, r3
 8001992:	419b      	sbcs	r3, r3
 8001994:	444f      	add	r7, r9
 8001996:	46ba      	mov	sl, r7
 8001998:	425b      	negs	r3, r3
 800199a:	449a      	add	sl, r3
 800199c:	4653      	mov	r3, sl
 800199e:	2601      	movs	r6, #1
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x49e>
 80019a4:	e73a      	b.n	800181c <__aeabi_dsub+0x314>
 80019a6:	2602      	movs	r6, #2
 80019a8:	4652      	mov	r2, sl
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	4021      	ands	r1, r4
 80019b4:	0862      	lsrs	r2, r4, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	07dc      	lsls	r4, r3, #31
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	469a      	mov	sl, r3
 80019be:	4314      	orrs	r4, r2
 80019c0:	e62c      	b.n	800161c <__aeabi_dsub+0x114>
 80019c2:	0039      	movs	r1, r7
 80019c4:	3a20      	subs	r2, #32
 80019c6:	40d1      	lsrs	r1, r2
 80019c8:	4662      	mov	r2, ip
 80019ca:	2a20      	cmp	r2, #32
 80019cc:	d006      	beq.n	80019dc <__aeabi_dsub+0x4d4>
 80019ce:	4664      	mov	r4, ip
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	1b12      	subs	r2, r2, r4
 80019d4:	003c      	movs	r4, r7
 80019d6:	4094      	lsls	r4, r2
 80019d8:	4304      	orrs	r4, r0
 80019da:	9401      	str	r4, [sp, #4]
 80019dc:	9c01      	ldr	r4, [sp, #4]
 80019de:	1e62      	subs	r2, r4, #1
 80019e0:	4194      	sbcs	r4, r2
 80019e2:	430c      	orrs	r4, r1
 80019e4:	e5e3      	b.n	80015ae <__aeabi_dsub+0xa6>
 80019e6:	4649      	mov	r1, r9
 80019e8:	4319      	orrs	r1, r3
 80019ea:	000b      	movs	r3, r1
 80019ec:	1e5c      	subs	r4, r3, #1
 80019ee:	41a3      	sbcs	r3, r4
 80019f0:	1ac4      	subs	r4, r0, r3
 80019f2:	42a0      	cmp	r0, r4
 80019f4:	419b      	sbcs	r3, r3
 80019f6:	425b      	negs	r3, r3
 80019f8:	1afb      	subs	r3, r7, r3
 80019fa:	469a      	mov	sl, r3
 80019fc:	465d      	mov	r5, fp
 80019fe:	0016      	movs	r6, r2
 8001a00:	e5dc      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001a02:	4649      	mov	r1, r9
 8001a04:	4319      	orrs	r1, r3
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x502>
 8001a08:	e0ae      	b.n	8001b68 <__aeabi_dsub+0x660>
 8001a0a:	4661      	mov	r1, ip
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	3901      	subs	r1, #1
 8001a10:	2c01      	cmp	r4, #1
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x50e>
 8001a14:	e0e0      	b.n	8001bd8 <__aeabi_dsub+0x6d0>
 8001a16:	4c77      	ldr	r4, [pc, #476]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a18:	45a4      	cmp	ip, r4
 8001a1a:	d056      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	e69a      	b.n	8001756 <__aeabi_dsub+0x24e>
 8001a20:	4661      	mov	r1, ip
 8001a22:	2220      	movs	r2, #32
 8001a24:	003c      	movs	r4, r7
 8001a26:	1a52      	subs	r2, r2, r1
 8001a28:	4094      	lsls	r4, r2
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	4090      	lsls	r0, r2
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	4664      	mov	r4, ip
 8001a32:	1e42      	subs	r2, r0, #1
 8001a34:	4190      	sbcs	r0, r2
 8001a36:	4662      	mov	r2, ip
 8001a38:	40e1      	lsrs	r1, r4
 8001a3a:	4644      	mov	r4, r8
 8001a3c:	40d7      	lsrs	r7, r2
 8001a3e:	430c      	orrs	r4, r1
 8001a40:	4304      	orrs	r4, r0
 8001a42:	44b9      	add	r9, r7
 8001a44:	e701      	b.n	800184a <__aeabi_dsub+0x342>
 8001a46:	496b      	ldr	r1, [pc, #428]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x546>
 8001a4c:	e70c      	b.n	8001868 <__aeabi_dsub+0x360>
 8001a4e:	1818      	adds	r0, r3, r0
 8001a50:	4298      	cmp	r0, r3
 8001a52:	419b      	sbcs	r3, r3
 8001a54:	444f      	add	r7, r9
 8001a56:	425b      	negs	r3, r3
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	07dc      	lsls	r4, r3, #31
 8001a5c:	0840      	lsrs	r0, r0, #1
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	469a      	mov	sl, r3
 8001a62:	0016      	movs	r6, r2
 8001a64:	4304      	orrs	r4, r0
 8001a66:	e6d9      	b.n	800181c <__aeabi_dsub+0x314>
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x566>
 8001a6c:	e081      	b.n	8001b72 <__aeabi_dsub+0x66a>
 8001a6e:	003b      	movs	r3, r7
 8001a70:	4303      	orrs	r3, r0
 8001a72:	d11d      	bne.n	8001ab0 <__aeabi_dsub+0x5a8>
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	2500      	movs	r5, #0
 8001a78:	0312      	lsls	r2, r2, #12
 8001a7a:	e70b      	b.n	8001894 <__aeabi_dsub+0x38c>
 8001a7c:	08c0      	lsrs	r0, r0, #3
 8001a7e:	077b      	lsls	r3, r7, #29
 8001a80:	465d      	mov	r5, fp
 8001a82:	4303      	orrs	r3, r0
 8001a84:	08fa      	lsrs	r2, r7, #3
 8001a86:	e6d3      	b.n	8001830 <__aeabi_dsub+0x328>
 8001a88:	1ac4      	subs	r4, r0, r3
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	464b      	mov	r3, r9
 8001a90:	4240      	negs	r0, r0
 8001a92:	1aff      	subs	r7, r7, r3
 8001a94:	1a3b      	subs	r3, r7, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	465d      	mov	r5, fp
 8001a9a:	e597      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001a9c:	1a1c      	subs	r4, r3, r0
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	419b      	sbcs	r3, r3
 8001aa4:	1bd7      	subs	r7, r2, r7
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	1afb      	subs	r3, r7, r3
 8001aaa:	469a      	mov	sl, r3
 8001aac:	2601      	movs	r6, #1
 8001aae:	e585      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001ab0:	08c0      	lsrs	r0, r0, #3
 8001ab2:	077b      	lsls	r3, r7, #29
 8001ab4:	465d      	mov	r5, fp
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	08fa      	lsrs	r2, r7, #3
 8001aba:	e6e7      	b.n	800188c <__aeabi_dsub+0x384>
 8001abc:	464a      	mov	r2, r9
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	0752      	lsls	r2, r2, #29
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	08d2      	lsrs	r2, r2, #3
 8001ac8:	e6b5      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001aca:	08c0      	lsrs	r0, r0, #3
 8001acc:	077b      	lsls	r3, r7, #29
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	08fa      	lsrs	r2, r7, #3
 8001ad2:	e6db      	b.n	800188c <__aeabi_dsub+0x384>
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	1e59      	subs	r1, r3, #1
 8001adc:	418b      	sbcs	r3, r1
 8001ade:	001c      	movs	r4, r3
 8001ae0:	e653      	b.n	800178a <__aeabi_dsub+0x282>
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	3c20      	subs	r4, #32
 8001ae6:	40e5      	lsrs	r5, r4
 8001ae8:	2920      	cmp	r1, #32
 8001aea:	d005      	beq.n	8001af8 <__aeabi_dsub+0x5f0>
 8001aec:	2440      	movs	r4, #64	; 0x40
 8001aee:	1a64      	subs	r4, r4, r1
 8001af0:	4649      	mov	r1, r9
 8001af2:	40a1      	lsls	r1, r4
 8001af4:	430b      	orrs	r3, r1
 8001af6:	4698      	mov	r8, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	1e5c      	subs	r4, r3, #1
 8001afc:	41a3      	sbcs	r3, r4
 8001afe:	432b      	orrs	r3, r5
 8001b00:	e776      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d0e1      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001b06:	003a      	movs	r2, r7
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x608>
 8001b0e:	e6b8      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b10:	464a      	mov	r2, r9
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	2480      	movs	r4, #128	; 0x80
 8001b16:	4313      	orrs	r3, r2
 8001b18:	464a      	mov	r2, r9
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	08d2      	lsrs	r2, r2, #3
 8001b1e:	4222      	tst	r2, r4
 8001b20:	d007      	beq.n	8001b32 <__aeabi_dsub+0x62a>
 8001b22:	08fe      	lsrs	r6, r7, #3
 8001b24:	4226      	tst	r6, r4
 8001b26:	d104      	bne.n	8001b32 <__aeabi_dsub+0x62a>
 8001b28:	465d      	mov	r5, fp
 8001b2a:	0032      	movs	r2, r6
 8001b2c:	08c3      	lsrs	r3, r0, #3
 8001b2e:	077f      	lsls	r7, r7, #29
 8001b30:	433b      	orrs	r3, r7
 8001b32:	0f59      	lsrs	r1, r3, #29
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	0749      	lsls	r1, r1, #29
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	e6a6      	b.n	800188c <__aeabi_dsub+0x384>
 8001b3e:	1ac4      	subs	r4, r0, r3
 8001b40:	42a0      	cmp	r0, r4
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	464b      	mov	r3, r9
 8001b46:	4240      	negs	r0, r0
 8001b48:	1aff      	subs	r7, r7, r3
 8001b4a:	1a3b      	subs	r3, r7, r0
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	465d      	mov	r5, fp
 8001b50:	2601      	movs	r6, #1
 8001b52:	e533      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001b54:	003b      	movs	r3, r7
 8001b56:	4303      	orrs	r3, r0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x654>
 8001b5a:	e715      	b.n	8001988 <__aeabi_dsub+0x480>
 8001b5c:	08c0      	lsrs	r0, r0, #3
 8001b5e:	077b      	lsls	r3, r7, #29
 8001b60:	465d      	mov	r5, fp
 8001b62:	4303      	orrs	r3, r0
 8001b64:	08fa      	lsrs	r2, r7, #3
 8001b66:	e666      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001b68:	08c0      	lsrs	r0, r0, #3
 8001b6a:	077b      	lsls	r3, r7, #29
 8001b6c:	4303      	orrs	r3, r0
 8001b6e:	08fa      	lsrs	r2, r7, #3
 8001b70:	e65e      	b.n	8001830 <__aeabi_dsub+0x328>
 8001b72:	003a      	movs	r2, r7
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	4302      	orrs	r2, r0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x674>
 8001b7a:	e682      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	0752      	lsls	r2, r2, #29
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	4313      	orrs	r3, r2
 8001b84:	464a      	mov	r2, r9
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	08d2      	lsrs	r2, r2, #3
 8001b8a:	4222      	tst	r2, r4
 8001b8c:	d007      	beq.n	8001b9e <__aeabi_dsub+0x696>
 8001b8e:	08fe      	lsrs	r6, r7, #3
 8001b90:	4226      	tst	r6, r4
 8001b92:	d104      	bne.n	8001b9e <__aeabi_dsub+0x696>
 8001b94:	465d      	mov	r5, fp
 8001b96:	0032      	movs	r2, r6
 8001b98:	08c3      	lsrs	r3, r0, #3
 8001b9a:	077f      	lsls	r7, r7, #29
 8001b9c:	433b      	orrs	r3, r7
 8001b9e:	0f59      	lsrs	r1, r3, #29
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	0749      	lsls	r1, r1, #29
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	e670      	b.n	800188c <__aeabi_dsub+0x384>
 8001baa:	08c0      	lsrs	r0, r0, #3
 8001bac:	077b      	lsls	r3, r7, #29
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	08fa      	lsrs	r2, r7, #3
 8001bb2:	e640      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001bb4:	464c      	mov	r4, r9
 8001bb6:	3920      	subs	r1, #32
 8001bb8:	40cc      	lsrs	r4, r1
 8001bba:	4661      	mov	r1, ip
 8001bbc:	2920      	cmp	r1, #32
 8001bbe:	d006      	beq.n	8001bce <__aeabi_dsub+0x6c6>
 8001bc0:	4666      	mov	r6, ip
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	1b89      	subs	r1, r1, r6
 8001bc6:	464e      	mov	r6, r9
 8001bc8:	408e      	lsls	r6, r1
 8001bca:	4333      	orrs	r3, r6
 8001bcc:	4698      	mov	r8, r3
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	418b      	sbcs	r3, r1
 8001bd4:	431c      	orrs	r4, r3
 8001bd6:	e5d8      	b.n	800178a <__aeabi_dsub+0x282>
 8001bd8:	181c      	adds	r4, r3, r0
 8001bda:	4284      	cmp	r4, r0
 8001bdc:	4180      	sbcs	r0, r0
 8001bde:	444f      	add	r7, r9
 8001be0:	46ba      	mov	sl, r7
 8001be2:	4240      	negs	r0, r0
 8001be4:	4482      	add	sl, r0
 8001be6:	e6d9      	b.n	800199c <__aeabi_dsub+0x494>
 8001be8:	4653      	mov	r3, sl
 8001bea:	4323      	orrs	r3, r4
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x6e8>
 8001bee:	e6cb      	b.n	8001988 <__aeabi_dsub+0x480>
 8001bf0:	e614      	b.n	800181c <__aeabi_dsub+0x314>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000007ff 	.word	0x000007ff
 8001bf8:	ff7fffff 	.word	0xff7fffff
 8001bfc:	000007fe 	.word	0x000007fe
 8001c00:	2300      	movs	r3, #0
 8001c02:	4a01      	ldr	r2, [pc, #4]	; (8001c08 <__aeabi_dsub+0x700>)
 8001c04:	001c      	movs	r4, r3
 8001c06:	e529      	b.n	800165c <__aeabi_dsub+0x154>
 8001c08:	000007ff 	.word	0x000007ff

08001c0c <__aeabi_i2d>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d016      	beq.n	8001c40 <__aeabi_i2d+0x34>
 8001c12:	17c3      	asrs	r3, r0, #31
 8001c14:	18c5      	adds	r5, r0, r3
 8001c16:	405d      	eors	r5, r3
 8001c18:	0fc4      	lsrs	r4, r0, #31
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	f000 f8f4 	bl	8001e08 <__clzsi2>
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <__aeabi_i2d+0x5c>)
 8001c22:	1a1b      	subs	r3, r3, r0
 8001c24:	280a      	cmp	r0, #10
 8001c26:	dc16      	bgt.n	8001c56 <__aeabi_i2d+0x4a>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	002e      	movs	r6, r5
 8001c2c:	3215      	adds	r2, #21
 8001c2e:	4096      	lsls	r6, r2
 8001c30:	220b      	movs	r2, #11
 8001c32:	1a12      	subs	r2, r2, r0
 8001c34:	40d5      	lsrs	r5, r2
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	032d      	lsls	r5, r5, #12
 8001c3a:	0b2d      	lsrs	r5, r5, #12
 8001c3c:	0d5b      	lsrs	r3, r3, #21
 8001c3e:	e003      	b.n	8001c48 <__aeabi_i2d+0x3c>
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	2500      	movs	r5, #0
 8001c46:	2600      	movs	r6, #0
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	432b      	orrs	r3, r5
 8001c4c:	07e4      	lsls	r4, r4, #31
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	0030      	movs	r0, r6
 8001c52:	0019      	movs	r1, r3
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
 8001c56:	380b      	subs	r0, #11
 8001c58:	4085      	lsls	r5, r0
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	032d      	lsls	r5, r5, #12
 8001c5e:	2600      	movs	r6, #0
 8001c60:	0b2d      	lsrs	r5, r5, #12
 8001c62:	0d5b      	lsrs	r3, r3, #21
 8001c64:	e7f0      	b.n	8001c48 <__aeabi_i2d+0x3c>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	0000041e 	.word	0x0000041e

08001c6c <__aeabi_f2d>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	0242      	lsls	r2, r0, #9
 8001c70:	0043      	lsls	r3, r0, #1
 8001c72:	0fc4      	lsrs	r4, r0, #31
 8001c74:	20fe      	movs	r0, #254	; 0xfe
 8001c76:	0e1b      	lsrs	r3, r3, #24
 8001c78:	1c59      	adds	r1, r3, #1
 8001c7a:	0a55      	lsrs	r5, r2, #9
 8001c7c:	4208      	tst	r0, r1
 8001c7e:	d00c      	beq.n	8001c9a <__aeabi_f2d+0x2e>
 8001c80:	21e0      	movs	r1, #224	; 0xe0
 8001c82:	0089      	lsls	r1, r1, #2
 8001c84:	468c      	mov	ip, r1
 8001c86:	076d      	lsls	r5, r5, #29
 8001c88:	0b12      	lsrs	r2, r2, #12
 8001c8a:	4463      	add	r3, ip
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	07e4      	lsls	r4, r4, #31
 8001c92:	4323      	orrs	r3, r4
 8001c94:	0028      	movs	r0, r5
 8001c96:	0019      	movs	r1, r3
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d114      	bne.n	8001cc8 <__aeabi_f2d+0x5c>
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	d01b      	beq.n	8001cda <__aeabi_f2d+0x6e>
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	f000 f8b0 	bl	8001e08 <__clzsi2>
 8001ca8:	280a      	cmp	r0, #10
 8001caa:	dc1c      	bgt.n	8001ce6 <__aeabi_f2d+0x7a>
 8001cac:	230b      	movs	r3, #11
 8001cae:	002a      	movs	r2, r5
 8001cb0:	1a1b      	subs	r3, r3, r0
 8001cb2:	40da      	lsrs	r2, r3
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	3315      	adds	r3, #21
 8001cb8:	409d      	lsls	r5, r3
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <__aeabi_f2d+0x88>)
 8001cbc:	0312      	lsls	r2, r2, #12
 8001cbe:	1a1b      	subs	r3, r3, r0
 8001cc0:	055b      	lsls	r3, r3, #21
 8001cc2:	0b12      	lsrs	r2, r2, #12
 8001cc4:	0d5b      	lsrs	r3, r3, #21
 8001cc6:	e7e1      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	d009      	beq.n	8001ce0 <__aeabi_f2d+0x74>
 8001ccc:	0b13      	lsrs	r3, r2, #12
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	0312      	lsls	r2, r2, #12
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	076d      	lsls	r5, r5, #29
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001cd8:	e7d8      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	e7d5      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001ce4:	e7d2      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	002a      	movs	r2, r5
 8001cea:	3b0b      	subs	r3, #11
 8001cec:	409a      	lsls	r2, r3
 8001cee:	2500      	movs	r5, #0
 8001cf0:	e7e3      	b.n	8001cba <__aeabi_f2d+0x4e>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	00000389 	.word	0x00000389
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <__aeabi_d2f>:
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d00:	004b      	lsls	r3, r1, #1
 8001d02:	030d      	lsls	r5, r1, #12
 8001d04:	0f40      	lsrs	r0, r0, #29
 8001d06:	0d5b      	lsrs	r3, r3, #21
 8001d08:	0fcc      	lsrs	r4, r1, #31
 8001d0a:	0a6d      	lsrs	r5, r5, #9
 8001d0c:	493a      	ldr	r1, [pc, #232]	; (8001df8 <__aeabi_d2f+0xfc>)
 8001d0e:	4305      	orrs	r5, r0
 8001d10:	1c58      	adds	r0, r3, #1
 8001d12:	00d7      	lsls	r7, r2, #3
 8001d14:	4208      	tst	r0, r1
 8001d16:	d00a      	beq.n	8001d2e <__aeabi_d2f+0x32>
 8001d18:	4938      	ldr	r1, [pc, #224]	; (8001dfc <__aeabi_d2f+0x100>)
 8001d1a:	1859      	adds	r1, r3, r1
 8001d1c:	29fe      	cmp	r1, #254	; 0xfe
 8001d1e:	dd16      	ble.n	8001d4e <__aeabi_d2f+0x52>
 8001d20:	20ff      	movs	r0, #255	; 0xff
 8001d22:	2200      	movs	r2, #0
 8001d24:	05c0      	lsls	r0, r0, #23
 8001d26:	4310      	orrs	r0, r2
 8001d28:	07e4      	lsls	r4, r4, #31
 8001d2a:	4320      	orrs	r0, r4
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <__aeabi_d2f+0x44>
 8001d32:	433d      	orrs	r5, r7
 8001d34:	d026      	beq.n	8001d84 <__aeabi_d2f+0x88>
 8001d36:	2205      	movs	r2, #5
 8001d38:	0192      	lsls	r2, r2, #6
 8001d3a:	0a52      	lsrs	r2, r2, #9
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	e7f1      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d40:	432f      	orrs	r7, r5
 8001d42:	d0ed      	beq.n	8001d20 <__aeabi_d2f+0x24>
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	03d2      	lsls	r2, r2, #15
 8001d48:	20ff      	movs	r0, #255	; 0xff
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	e7ea      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	dd1b      	ble.n	8001d8a <__aeabi_d2f+0x8e>
 8001d52:	0192      	lsls	r2, r2, #6
 8001d54:	1e50      	subs	r0, r2, #1
 8001d56:	4182      	sbcs	r2, r0
 8001d58:	00ed      	lsls	r5, r5, #3
 8001d5a:	0f7f      	lsrs	r7, r7, #29
 8001d5c:	432a      	orrs	r2, r5
 8001d5e:	433a      	orrs	r2, r7
 8001d60:	0753      	lsls	r3, r2, #29
 8001d62:	d047      	beq.n	8001df4 <__aeabi_d2f+0xf8>
 8001d64:	230f      	movs	r3, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_d2f+0x72>
 8001d6c:	3204      	adds	r2, #4
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	04db      	lsls	r3, r3, #19
 8001d72:	4013      	ands	r3, r2
 8001d74:	d03e      	beq.n	8001df4 <__aeabi_d2f+0xf8>
 8001d76:	1c48      	adds	r0, r1, #1
 8001d78:	29fe      	cmp	r1, #254	; 0xfe
 8001d7a:	d0d1      	beq.n	8001d20 <__aeabi_d2f+0x24>
 8001d7c:	0192      	lsls	r2, r2, #6
 8001d7e:	0a52      	lsrs	r2, r2, #9
 8001d80:	b2c0      	uxtb	r0, r0
 8001d82:	e7cf      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d84:	2000      	movs	r0, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	e7cc      	b.n	8001d24 <__aeabi_d2f+0x28>
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	3217      	adds	r2, #23
 8001d8e:	db2f      	blt.n	8001df0 <__aeabi_d2f+0xf4>
 8001d90:	2680      	movs	r6, #128	; 0x80
 8001d92:	0436      	lsls	r6, r6, #16
 8001d94:	432e      	orrs	r6, r5
 8001d96:	251e      	movs	r5, #30
 8001d98:	1a6d      	subs	r5, r5, r1
 8001d9a:	2d1f      	cmp	r5, #31
 8001d9c:	dd11      	ble.n	8001dc2 <__aeabi_d2f+0xc6>
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a52      	subs	r2, r2, r1
 8001da4:	0031      	movs	r1, r6
 8001da6:	40d1      	lsrs	r1, r2
 8001da8:	2d20      	cmp	r5, #32
 8001daa:	d004      	beq.n	8001db6 <__aeabi_d2f+0xba>
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <__aeabi_d2f+0x104>)
 8001dae:	4694      	mov	ip, r2
 8001db0:	4463      	add	r3, ip
 8001db2:	409e      	lsls	r6, r3
 8001db4:	4337      	orrs	r7, r6
 8001db6:	003a      	movs	r2, r7
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	419a      	sbcs	r2, r3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	e7ce      	b.n	8001d60 <__aeabi_d2f+0x64>
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <__aeabi_d2f+0x108>)
 8001dc4:	0038      	movs	r0, r7
 8001dc6:	4694      	mov	ip, r2
 8001dc8:	4463      	add	r3, ip
 8001dca:	4098      	lsls	r0, r3
 8001dcc:	003a      	movs	r2, r7
 8001dce:	1e41      	subs	r1, r0, #1
 8001dd0:	4188      	sbcs	r0, r1
 8001dd2:	409e      	lsls	r6, r3
 8001dd4:	40ea      	lsrs	r2, r5
 8001dd6:	4330      	orrs	r0, r6
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	0753      	lsls	r3, r2, #29
 8001dde:	d1c1      	bne.n	8001d64 <__aeabi_d2f+0x68>
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0013      	movs	r3, r2
 8001de4:	04c9      	lsls	r1, r1, #19
 8001de6:	2001      	movs	r0, #1
 8001de8:	400b      	ands	r3, r1
 8001dea:	420a      	tst	r2, r1
 8001dec:	d1c6      	bne.n	8001d7c <__aeabi_d2f+0x80>
 8001dee:	e7a3      	b.n	8001d38 <__aeabi_d2f+0x3c>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e7a0      	b.n	8001d36 <__aeabi_d2f+0x3a>
 8001df4:	000b      	movs	r3, r1
 8001df6:	e79f      	b.n	8001d38 <__aeabi_d2f+0x3c>
 8001df8:	000007fe 	.word	0x000007fe
 8001dfc:	fffffc80 	.word	0xfffffc80
 8001e00:	fffffca2 	.word	0xfffffca2
 8001e04:	fffffc82 	.word	0xfffffc82

08001e08 <__clzsi2>:
 8001e08:	211c      	movs	r1, #28
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d301      	bcc.n	8001e16 <__clzsi2+0xe>
 8001e12:	0c00      	lsrs	r0, r0, #16
 8001e14:	3910      	subs	r1, #16
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	4298      	cmp	r0, r3
 8001e1a:	d301      	bcc.n	8001e20 <__clzsi2+0x18>
 8001e1c:	0a00      	lsrs	r0, r0, #8
 8001e1e:	3908      	subs	r1, #8
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	4298      	cmp	r0, r3
 8001e24:	d301      	bcc.n	8001e2a <__clzsi2+0x22>
 8001e26:	0900      	lsrs	r0, r0, #4
 8001e28:	3904      	subs	r1, #4
 8001e2a:	a202      	add	r2, pc, #8	; (adr r2, 8001e34 <__clzsi2+0x2c>)
 8001e2c:	5c10      	ldrb	r0, [r2, r0]
 8001e2e:	1840      	adds	r0, r0, r1
 8001e30:	4770      	bx	lr
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	02020304 	.word	0x02020304
 8001e38:	01010101 	.word	0x01010101
	...

08001e44 <IMU_Init>:
float gyro_z_offset;
#define MAX_DATA_POINTS 20 // Adjust this based on your requirements
UART_HandleTypeDef uart;

void IMU_Init()
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
	//Checks to see IMU and Microcontroller is connected
	GPIOB->ODR |= GPIO_ODR_2 | GPIO_ODR_0;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <IMU_Init+0x50>)
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <IMU_Init+0x50>)
 8001e50:	2105      	movs	r1, #5
 8001e52:	430a      	orrs	r2, r1
 8001e54:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c2, hi2c2.Init.OwnAddress1,  250, HAL_MAX_DELAY);
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <IMU_Init+0x54>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	1dfc      	adds	r4, r7, #7
 8001e5e:	2301      	movs	r3, #1
 8001e60:	425b      	negs	r3, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <IMU_Init+0x54>)
 8001e64:	22fa      	movs	r2, #250	; 0xfa
 8001e66:	f002 fabd 	bl	80043e4 <HAL_I2C_IsDeviceReady>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
	SENSOR_Config();
 8001e6e:	f000 f815 	bl	8001e9c <SENSOR_Config>
	FIFO_Config();
 8001e72:	f000 f875 	bl	8001f60 <FIFO_Config>
	ReadAccelerometerAtRest();
 8001e76:	f000 ffc7 	bl	8002e08 <ReadAccelerometerAtRest>
	READ_DATA();
 8001e7a:	f000 f8b9 	bl	8001ff0 <READ_DATA>

	GPIOB->ODR &= ~GPIO_ODR_2;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <IMU_Init+0x50>)
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <IMU_Init+0x50>)
 8001e84:	2104      	movs	r1, #4
 8001e86:	438a      	bics	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b003      	add	sp, #12
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	48000400 	.word	0x48000400
 8001e98:	20000040 	.word	0x20000040

08001e9c <SENSOR_Config>:

void SENSOR_Config()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af04      	add	r7, sp, #16
	// turn on accelerometer sensor high performance mode
	uint8_t Acc_Data = 0b10100100;
 8001ea2:	1dbb      	adds	r3, r7, #6
 8001ea4:	22a4      	movs	r2, #164	; 0xa4
 8001ea6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL1_XL_ADDRESS, 1, &Acc_Data, 1, 1000);
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <SENSOR_Config+0xc0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	482b      	ldr	r0, [pc, #172]	; (8001f5c <SENSOR_Config+0xc0>)
 8001eb0:	23fa      	movs	r3, #250	; 0xfa
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	1dbb      	adds	r3, r7, #6
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	f002 f82d 	bl	8003f20 <HAL_I2C_Mem_Write>
	uint8_t Acc_Control = 0b00010000;
 8001ec6:	1d7b      	adds	r3, r7, #5
 8001ec8:	2210      	movs	r2, #16
 8001eca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL6_C_ADDRESS, 1, &Acc_Control, 1, 100);
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <SENSOR_Config+0xc0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	4822      	ldr	r0, [pc, #136]	; (8001f5c <SENSOR_Config+0xc0>)
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	1d7b      	adds	r3, r7, #5
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	2215      	movs	r2, #21
 8001ee4:	f002 f81c 	bl	8003f20 <HAL_I2C_Mem_Write>

//	turn on Gyroscope sensor high performance
	uint8_t Gyro_Data = 0b10101100;
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	22ac      	movs	r2, #172	; 0xac
 8001eec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL2_G_ADDRESS, 1, &Gyro_Data, 1, 1000);
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <SENSOR_Config+0xc0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	b299      	uxth	r1, r3
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <SENSOR_Config+0xc0>)
 8001ef6:	23fa      	movs	r3, #250	; 0xfa
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	2301      	movs	r3, #1
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	2211      	movs	r2, #17
 8001f08:	f002 f80a 	bl	8003f20 <HAL_I2C_Mem_Write>
	uint8_t Gyro_Control = 0b00000000;
 8001f0c:	1cfb      	adds	r3, r7, #3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, CTRL7_G_ADDRESS, 1, &Gyro_Control, 1, 1000);
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <SENSOR_Config+0xc0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	b299      	uxth	r1, r3
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <SENSOR_Config+0xc0>)
 8001f1a:	23fa      	movs	r3, #250	; 0xfa
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	2301      	movs	r3, #1
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2216      	movs	r2, #22
 8001f2c:	f001 fff8 	bl	8003f20 <HAL_I2C_Mem_Write>

	uint8_t Master_Config = 0b0001101;
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	220d      	movs	r2, #13
 8001f34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, MASTER_CONFIG_ADDRESS, 1, &Gyro_Control, 1, 1000);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <SENSOR_Config+0xc0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <SENSOR_Config+0xc0>)
 8001f3e:	23fa      	movs	r3, #250	; 0xfa
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2301      	movs	r3, #1
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	1cfb      	adds	r3, r7, #3
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	221a      	movs	r2, #26
 8001f50:	f001 ffe6 	bl	8003f20 <HAL_I2C_Mem_Write>
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000040 	.word	0x20000040

08001f60 <FIFO_Config>:

void FIFO_Config()
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af04      	add	r7, sp, #16

	uint8_t FIFO_CTRL3 = 0b00010010;
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2212      	movs	r2, #18
 8001f6a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL3_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL3_ADDRESS, 1, &FIFO_CTRL3, 1, 1000);
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <FIFO_Config+0x8c>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	b299      	uxth	r1, r3
 8001f72:	1dfc      	adds	r4, r7, #7
 8001f74:	481d      	ldr	r0, [pc, #116]	; (8001fec <FIFO_Config+0x8c>)
 8001f76:	23fa      	movs	r3, #250	; 0xfa
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	2208      	movs	r2, #8
 8001f88:	f001 ffca 	bl	8003f20 <HAL_I2C_Mem_Write>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL4 = 0b00010010;
 8001f90:	1cfb      	adds	r3, r7, #3
 8001f92:	2212      	movs	r2, #18
 8001f94:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL4_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL4_ADDRESS, 1, &FIFO_CTRL4, 1, 1000);
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <FIFO_Config+0x8c>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	1dbc      	adds	r4, r7, #6
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <FIFO_Config+0x8c>)
 8001fa0:	23fa      	movs	r3, #250	; 0xfa
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	1cfb      	adds	r3, r7, #3
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	2209      	movs	r2, #9
 8001fb2:	f001 ffb5 	bl	8003f20 <HAL_I2C_Mem_Write>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL5 = 0b01010110;
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	2256      	movs	r2, #86	; 0x56
 8001fbe:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL5_Result = HAL_I2C_Mem_Write(&hi2c2, hi2c2.Init.OwnAddress1, FIFO_CTRL5_ADDRESS, 1, &FIFO_CTRL5, 1, 1000);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <FIFO_Config+0x8c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	1d7c      	adds	r4, r7, #5
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <FIFO_Config+0x8c>)
 8001fca:	23fa      	movs	r3, #250	; 0xfa
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	1cbb      	adds	r3, r7, #2
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	220a      	movs	r2, #10
 8001fdc:	f001 ffa0 	bl	8003f20 <HAL_I2C_Mem_Write>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b003      	add	sp, #12
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	20000040 	.word	0x20000040

08001ff0 <READ_DATA>:

void READ_DATA()
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	4c07      	ldr	r4, [pc, #28]	; (8002010 <READ_DATA+0x20>)
 8001ff4:	44a5      	add	sp, r4
 8001ff6:	af04      	add	r7, sp, #16

	int data_index = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	22ad      	movs	r2, #173	; 0xad
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	6013      	str	r3, [r2, #0]
	float acc_z_data[MAX_DATA_POINTS];
	float gyro_x_data[MAX_DATA_POINTS];
	float gyro_y_data[MAX_DATA_POINTS];
	float gyro_z_data[MAX_DATA_POINTS];

	int collect = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	22ac      	movs	r2, #172	; 0xac
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	18ba      	adds	r2, r7, r2
 800200a:	6013      	str	r3, [r2, #0]

	while (!collect){
 800200c:	e329      	b.n	8002662 <READ_DATA+0x672>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	fffffd38 	.word	0xfffffd38
		uint8_t Acc_X_L[1];
		HAL_StatusTypeDef X_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, &Acc_X_L[0], 1, 100);
 8002014:	4bf4      	ldr	r3, [pc, #976]	; (80023e8 <READ_DATA+0x3f8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	b299      	uxth	r1, r3
 800201a:	4bf4      	ldr	r3, [pc, #976]	; (80023ec <READ_DATA+0x3fc>)
 800201c:	18fc      	adds	r4, r7, r3
 800201e:	48f2      	ldr	r0, [pc, #968]	; (80023e8 <READ_DATA+0x3f8>)
 8002020:	2364      	movs	r3, #100	; 0x64
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2301      	movs	r3, #1
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	235c      	movs	r3, #92	; 0x5c
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	2228      	movs	r2, #40	; 0x28
 8002032:	f002 f8a3 	bl	800417c <HAL_I2C_Mem_Read>
 8002036:	0003      	movs	r3, r0
 8002038:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_X_H[1];
		HAL_StatusTypeDef X2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, &Acc_X_H[0], 1, 100);
 800203a:	4beb      	ldr	r3, [pc, #940]	; (80023e8 <READ_DATA+0x3f8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	b299      	uxth	r1, r3
 8002040:	4beb      	ldr	r3, [pc, #940]	; (80023f0 <READ_DATA+0x400>)
 8002042:	18fc      	adds	r4, r7, r3
 8002044:	48e8      	ldr	r0, [pc, #928]	; (80023e8 <READ_DATA+0x3f8>)
 8002046:	2364      	movs	r3, #100	; 0x64
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	2301      	movs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2358      	movs	r3, #88	; 0x58
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2301      	movs	r3, #1
 8002056:	2229      	movs	r2, #41	; 0x29
 8002058:	f002 f890 	bl	800417c <HAL_I2C_Mem_Read>
 800205c:	0003      	movs	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]
		uint16_t acc_x_raw = (Acc_X_H[0] << 8) | Acc_X_L[0];
 8002060:	4be4      	ldr	r3, [pc, #912]	; (80023f4 <READ_DATA+0x404>)
 8002062:	21ae      	movs	r1, #174	; 0xae
 8002064:	0089      	lsls	r1, r1, #2
 8002066:	185b      	adds	r3, r3, r1
 8002068:	19db      	adds	r3, r3, r7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b21a      	sxth	r2, r3
 8002070:	4be1      	ldr	r3, [pc, #900]	; (80023f8 <READ_DATA+0x408>)
 8002072:	185b      	adds	r3, r3, r1
 8002074:	19db      	adds	r3, r3, r7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21a      	sxth	r2, r3
 800207e:	49df      	ldr	r1, [pc, #892]	; (80023fc <READ_DATA+0x40c>)
 8002080:	187b      	adds	r3, r7, r1
 8002082:	801a      	strh	r2, [r3, #0]
		if(acc_x_raw > 32768) {
 8002084:	187b      	adds	r3, r7, r1
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	429a      	cmp	r2, r3
 800208e:	d904      	bls.n	800209a <READ_DATA+0xaa>
			acc_x_raw = (~acc_x_raw + 1);
 8002090:	187b      	adds	r3, r7, r1
 8002092:	187a      	adds	r2, r7, r1
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	4252      	negs	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]
		}
		float acc_x = (9.8 * (acc_x_raw *ACC_SENS) / 1000) - acc_x_offset;
 800209a:	4bd8      	ldr	r3, [pc, #864]	; (80023fc <READ_DATA+0x40c>)
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff fdb3 	bl	8001c0c <__aeabi_i2d>
 80020a6:	4ad6      	ldr	r2, [pc, #856]	; (8002400 <READ_DATA+0x410>)
 80020a8:	4bd6      	ldr	r3, [pc, #856]	; (8002404 <READ_DATA+0x414>)
 80020aa:	f7fe ff6b 	bl	8000f84 <__aeabi_dmul>
 80020ae:	0002      	movs	r2, r0
 80020b0:	000b      	movs	r3, r1
 80020b2:	0010      	movs	r0, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	4ad4      	ldr	r2, [pc, #848]	; (8002408 <READ_DATA+0x418>)
 80020b8:	4bd4      	ldr	r3, [pc, #848]	; (800240c <READ_DATA+0x41c>)
 80020ba:	f7fe ff63 	bl	8000f84 <__aeabi_dmul>
 80020be:	0002      	movs	r2, r0
 80020c0:	000b      	movs	r3, r1
 80020c2:	0010      	movs	r0, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	2200      	movs	r2, #0
 80020c8:	4bd1      	ldr	r3, [pc, #836]	; (8002410 <READ_DATA+0x420>)
 80020ca:	f7fe fc6d 	bl	80009a8 <__aeabi_ddiv>
 80020ce:	0002      	movs	r2, r0
 80020d0:	000b      	movs	r3, r1
 80020d2:	0014      	movs	r4, r2
 80020d4:	001d      	movs	r5, r3
 80020d6:	4bcf      	ldr	r3, [pc, #828]	; (8002414 <READ_DATA+0x424>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1c18      	adds	r0, r3, #0
 80020dc:	f7ff fdc6 	bl	8001c6c <__aeabi_f2d>
 80020e0:	0002      	movs	r2, r0
 80020e2:	000b      	movs	r3, r1
 80020e4:	0020      	movs	r0, r4
 80020e6:	0029      	movs	r1, r5
 80020e8:	f7ff fa0e 	bl	8001508 <__aeabi_dsub>
 80020ec:	0002      	movs	r2, r0
 80020ee:	000b      	movs	r3, r1
 80020f0:	0010      	movs	r0, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	f7ff fe02 	bl	8001cfc <__aeabi_d2f>
 80020f8:	1c03      	adds	r3, r0, #0
 80020fa:	229a      	movs	r2, #154	; 0x9a
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	18ba      	adds	r2, r7, r2
 8002100:	6013      	str	r3, [r2, #0]
		uint8_t Acc_Y_L[1];
		HAL_StatusTypeDef Y_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, &Acc_Y_L[0], 1, 100);
 8002102:	4bb9      	ldr	r3, [pc, #740]	; (80023e8 <READ_DATA+0x3f8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	b299      	uxth	r1, r3
 8002108:	4bc3      	ldr	r3, [pc, #780]	; (8002418 <READ_DATA+0x428>)
 800210a:	18fc      	adds	r4, r7, r3
 800210c:	48b6      	ldr	r0, [pc, #728]	; (80023e8 <READ_DATA+0x3f8>)
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2301      	movs	r3, #1
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	2354      	movs	r3, #84	; 0x54
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	222a      	movs	r2, #42	; 0x2a
 8002120:	f002 f82c 	bl	800417c <HAL_I2C_Mem_Read>
 8002124:	0003      	movs	r3, r0
 8002126:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_Y_H[1];
		HAL_StatusTypeDef Y2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, &Acc_Y_H[0], 1, 100);
 8002128:	4baf      	ldr	r3, [pc, #700]	; (80023e8 <READ_DATA+0x3f8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	b299      	uxth	r1, r3
 800212e:	4bbb      	ldr	r3, [pc, #748]	; (800241c <READ_DATA+0x42c>)
 8002130:	18fc      	adds	r4, r7, r3
 8002132:	48ad      	ldr	r0, [pc, #692]	; (80023e8 <READ_DATA+0x3f8>)
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2350      	movs	r3, #80	; 0x50
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	222b      	movs	r2, #43	; 0x2b
 8002146:	f002 f819 	bl	800417c <HAL_I2C_Mem_Read>
 800214a:	0003      	movs	r3, r0
 800214c:	7023      	strb	r3, [r4, #0]
		uint16_t acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 800214e:	4bb4      	ldr	r3, [pc, #720]	; (8002420 <READ_DATA+0x430>)
 8002150:	21ae      	movs	r1, #174	; 0xae
 8002152:	0089      	lsls	r1, r1, #2
 8002154:	185b      	adds	r3, r3, r1
 8002156:	19db      	adds	r3, r3, r7
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b21a      	sxth	r2, r3
 800215c:	4bb1      	ldr	r3, [pc, #708]	; (8002424 <READ_DATA+0x434>)
 800215e:	185b      	adds	r3, r3, r1
 8002160:	19db      	adds	r3, r3, r7
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21a      	sxth	r2, r3
 800216c:	21ab      	movs	r1, #171	; 0xab
 800216e:	0089      	lsls	r1, r1, #2
 8002170:	187b      	adds	r3, r7, r1
 8002172:	801a      	strh	r2, [r3, #0]
		if(acc_y_raw > 32768) {
 8002174:	187b      	adds	r3, r7, r1
 8002176:	881a      	ldrh	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	429a      	cmp	r2, r3
 800217e:	d904      	bls.n	800218a <READ_DATA+0x19a>
			acc_y_raw = (~acc_y_raw + 1);
 8002180:	187b      	adds	r3, r7, r1
 8002182:	187a      	adds	r2, r7, r1
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	4252      	negs	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]
		}
		float acc_y = (9.8 * (acc_y_raw *ACC_SENS) / 1000) - acc_y_offset;
 800218a:	23ab      	movs	r3, #171	; 0xab
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff fd3a 	bl	8001c0c <__aeabi_i2d>
 8002198:	4a99      	ldr	r2, [pc, #612]	; (8002400 <READ_DATA+0x410>)
 800219a:	4b9a      	ldr	r3, [pc, #616]	; (8002404 <READ_DATA+0x414>)
 800219c:	f7fe fef2 	bl	8000f84 <__aeabi_dmul>
 80021a0:	0002      	movs	r2, r0
 80021a2:	000b      	movs	r3, r1
 80021a4:	0010      	movs	r0, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	4a97      	ldr	r2, [pc, #604]	; (8002408 <READ_DATA+0x418>)
 80021aa:	4b98      	ldr	r3, [pc, #608]	; (800240c <READ_DATA+0x41c>)
 80021ac:	f7fe feea 	bl	8000f84 <__aeabi_dmul>
 80021b0:	0002      	movs	r2, r0
 80021b2:	000b      	movs	r3, r1
 80021b4:	0010      	movs	r0, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	4b95      	ldr	r3, [pc, #596]	; (8002410 <READ_DATA+0x420>)
 80021bc:	f7fe fbf4 	bl	80009a8 <__aeabi_ddiv>
 80021c0:	0002      	movs	r2, r0
 80021c2:	000b      	movs	r3, r1
 80021c4:	0014      	movs	r4, r2
 80021c6:	001d      	movs	r5, r3
 80021c8:	4b97      	ldr	r3, [pc, #604]	; (8002428 <READ_DATA+0x438>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1c18      	adds	r0, r3, #0
 80021ce:	f7ff fd4d 	bl	8001c6c <__aeabi_f2d>
 80021d2:	0002      	movs	r2, r0
 80021d4:	000b      	movs	r3, r1
 80021d6:	0020      	movs	r0, r4
 80021d8:	0029      	movs	r1, r5
 80021da:	f7ff f995 	bl	8001508 <__aeabi_dsub>
 80021de:	0002      	movs	r2, r0
 80021e0:	000b      	movs	r3, r1
 80021e2:	0010      	movs	r0, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	f7ff fd89 	bl	8001cfc <__aeabi_d2f>
 80021ea:	1c03      	adds	r3, r0, #0
 80021ec:	2298      	movs	r2, #152	; 0x98
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	18ba      	adds	r2, r7, r2
 80021f2:	6013      	str	r3, [r2, #0]
		uint8_t Acc_Z_L[1];
		HAL_StatusTypeDef Z_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, &Acc_Z_L[0], 1, 100);
 80021f4:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <READ_DATA+0x3f8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	b299      	uxth	r1, r3
 80021fa:	4b8c      	ldr	r3, [pc, #560]	; (800242c <READ_DATA+0x43c>)
 80021fc:	18fc      	adds	r4, r7, r3
 80021fe:	487a      	ldr	r0, [pc, #488]	; (80023e8 <READ_DATA+0x3f8>)
 8002200:	2364      	movs	r3, #100	; 0x64
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	234c      	movs	r3, #76	; 0x4c
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	222c      	movs	r2, #44	; 0x2c
 8002212:	f001 ffb3 	bl	800417c <HAL_I2C_Mem_Read>
 8002216:	0003      	movs	r3, r0
 8002218:	7023      	strb	r3, [r4, #0]
		uint8_t Acc_Z_H[1];
		HAL_StatusTypeDef Z2_acc = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, &Acc_Z_H[0], 1, 100);
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <READ_DATA+0x3f8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	b299      	uxth	r1, r3
 8002220:	4b83      	ldr	r3, [pc, #524]	; (8002430 <READ_DATA+0x440>)
 8002222:	18fc      	adds	r4, r7, r3
 8002224:	4870      	ldr	r0, [pc, #448]	; (80023e8 <READ_DATA+0x3f8>)
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2348      	movs	r3, #72	; 0x48
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	222d      	movs	r2, #45	; 0x2d
 8002238:	f001 ffa0 	bl	800417c <HAL_I2C_Mem_Read>
 800223c:	0003      	movs	r3, r0
 800223e:	7023      	strb	r3, [r4, #0]
		uint16_t acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002240:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <READ_DATA+0x444>)
 8002242:	21ae      	movs	r1, #174	; 0xae
 8002244:	0089      	lsls	r1, r1, #2
 8002246:	185b      	adds	r3, r3, r1
 8002248:	19db      	adds	r3, r3, r7
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <READ_DATA+0x448>)
 8002250:	185b      	adds	r3, r3, r1
 8002252:	19db      	adds	r3, r3, r7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21a      	sxth	r2, r3
 800225e:	4977      	ldr	r1, [pc, #476]	; (800243c <READ_DATA+0x44c>)
 8002260:	187b      	adds	r3, r7, r1
 8002262:	801a      	strh	r2, [r3, #0]
		if(acc_z_raw > 32768) {
 8002264:	187b      	adds	r3, r7, r1
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	429a      	cmp	r2, r3
 800226e:	d904      	bls.n	800227a <READ_DATA+0x28a>
			acc_z_raw = (~acc_z_raw + 1);
 8002270:	187b      	adds	r3, r7, r1
 8002272:	187a      	adds	r2, r7, r1
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	4252      	negs	r2, r2
 8002278:	801a      	strh	r2, [r3, #0]
		}
		float acc_z = (9.8 * (acc_z_raw *ACC_SENS) / 1000) - acc_z_offset;
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <READ_DATA+0x44c>)
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fcc3 	bl	8001c0c <__aeabi_i2d>
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <READ_DATA+0x410>)
 8002288:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <READ_DATA+0x414>)
 800228a:	f7fe fe7b 	bl	8000f84 <__aeabi_dmul>
 800228e:	0002      	movs	r2, r0
 8002290:	000b      	movs	r3, r1
 8002292:	0010      	movs	r0, r2
 8002294:	0019      	movs	r1, r3
 8002296:	4a5c      	ldr	r2, [pc, #368]	; (8002408 <READ_DATA+0x418>)
 8002298:	4b5c      	ldr	r3, [pc, #368]	; (800240c <READ_DATA+0x41c>)
 800229a:	f7fe fe73 	bl	8000f84 <__aeabi_dmul>
 800229e:	0002      	movs	r2, r0
 80022a0:	000b      	movs	r3, r1
 80022a2:	0010      	movs	r0, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <READ_DATA+0x420>)
 80022aa:	f7fe fb7d 	bl	80009a8 <__aeabi_ddiv>
 80022ae:	0002      	movs	r2, r0
 80022b0:	000b      	movs	r3, r1
 80022b2:	0014      	movs	r4, r2
 80022b4:	001d      	movs	r5, r3
 80022b6:	4b62      	ldr	r3, [pc, #392]	; (8002440 <READ_DATA+0x450>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1c18      	adds	r0, r3, #0
 80022bc:	f7ff fcd6 	bl	8001c6c <__aeabi_f2d>
 80022c0:	0002      	movs	r2, r0
 80022c2:	000b      	movs	r3, r1
 80022c4:	0020      	movs	r0, r4
 80022c6:	0029      	movs	r1, r5
 80022c8:	f7ff f91e 	bl	8001508 <__aeabi_dsub>
 80022cc:	0002      	movs	r2, r0
 80022ce:	000b      	movs	r3, r1
 80022d0:	0010      	movs	r0, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	f7ff fd12 	bl	8001cfc <__aeabi_d2f>
 80022d8:	1c03      	adds	r3, r0, #0
 80022da:	2296      	movs	r2, #150	; 0x96
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	18ba      	adds	r2, r7, r2
 80022e0:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_X_L[1];
		HAL_StatusTypeDef  X_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, &Gyro_X_L[0], 1, 100);
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <READ_DATA+0x3f8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	b299      	uxth	r1, r3
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <READ_DATA+0x454>)
 80022ea:	18fc      	adds	r4, r7, r3
 80022ec:	483e      	ldr	r0, [pc, #248]	; (80023e8 <READ_DATA+0x3f8>)
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2301      	movs	r3, #1
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2344      	movs	r3, #68	; 0x44
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	2222      	movs	r2, #34	; 0x22
 8002300:	f001 ff3c 	bl	800417c <HAL_I2C_Mem_Read>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_X_H[1];
		HAL_StatusTypeDef X2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, &Gyro_X_H[0], 1, 100);
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <READ_DATA+0x3f8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	b299      	uxth	r1, r3
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <READ_DATA+0x458>)
 8002310:	18fc      	adds	r4, r7, r3
 8002312:	4835      	ldr	r0, [pc, #212]	; (80023e8 <READ_DATA+0x3f8>)
 8002314:	2364      	movs	r3, #100	; 0x64
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	2223      	movs	r2, #35	; 0x23
 8002326:	f001 ff29 	bl	800417c <HAL_I2C_Mem_Read>
 800232a:	0003      	movs	r3, r0
 800232c:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <READ_DATA+0x45c>)
 8002330:	21ae      	movs	r1, #174	; 0xae
 8002332:	0089      	lsls	r1, r1, #2
 8002334:	185b      	adds	r3, r3, r1
 8002336:	19db      	adds	r3, r3, r7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b44      	ldr	r3, [pc, #272]	; (8002450 <READ_DATA+0x460>)
 800233e:	185b      	adds	r3, r3, r1
 8002340:	19db      	adds	r3, r3, r7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	b21a      	sxth	r2, r3
 800234c:	21aa      	movs	r1, #170	; 0xaa
 800234e:	0089      	lsls	r1, r1, #2
 8002350:	187b      	adds	r3, r7, r1
 8002352:	801a      	strh	r2, [r3, #0]
		if(gyro_x_raw > 32768) {
 8002354:	187b      	adds	r3, r7, r1
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	429a      	cmp	r2, r3
 800235e:	d904      	bls.n	800236a <READ_DATA+0x37a>
			gyro_x_raw = (~gyro_x_raw + 1);
 8002360:	187b      	adds	r3, r7, r1
 8002362:	187a      	adds	r2, r7, r1
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	4252      	negs	r2, r2
 8002368:	801a      	strh	r2, [r3, #0]
		}
		float gyro_x = ((gyro_x_raw *GYRO_SENS/1000)) - gyro_x_offset;
 800236a:	23aa      	movs	r3, #170	; 0xaa
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	2246      	movs	r2, #70	; 0x46
 8002374:	4353      	muls	r3, r2
 8002376:	22fa      	movs	r2, #250	; 0xfa
 8002378:	0091      	lsls	r1, r2, #2
 800237a:	0018      	movs	r0, r3
 800237c:	f7fd ff4c 	bl	8000218 <__divsi3>
 8002380:	0003      	movs	r3, r0
 8002382:	0018      	movs	r0, r3
 8002384:	f7fe fabe 	bl	8000904 <__aeabi_i2f>
 8002388:	1c02      	adds	r2, r0, #0
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <READ_DATA+0x464>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1c19      	adds	r1, r3, #0
 8002390:	1c10      	adds	r0, r2, #0
 8002392:	f7fe f917 	bl	80005c4 <__aeabi_fsub>
 8002396:	1c03      	adds	r3, r0, #0
 8002398:	2294      	movs	r2, #148	; 0x94
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	18ba      	adds	r2, r7, r2
 800239e:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_Y_L[1];
		HAL_StatusTypeDef Y_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, &Gyro_Y_L[0], 1, 100);
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <READ_DATA+0x3f8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	b299      	uxth	r1, r3
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <READ_DATA+0x468>)
 80023a8:	18fc      	adds	r4, r7, r3
 80023aa:	480f      	ldr	r0, [pc, #60]	; (80023e8 <READ_DATA+0x3f8>)
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	233c      	movs	r3, #60	; 0x3c
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	f001 fedd 	bl	800417c <HAL_I2C_Mem_Read>
 80023c2:	0003      	movs	r3, r0
 80023c4:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Y_H[1];
		HAL_StatusTypeDef Y2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, &Gyro_Y_H[0], 1, 100);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <READ_DATA+0x3f8>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	b299      	uxth	r1, r3
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <READ_DATA+0x46c>)
 80023ce:	18fc      	adds	r4, r7, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <READ_DATA+0x3f8>)
 80023d2:	2364      	movs	r3, #100	; 0x64
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	2301      	movs	r3, #1
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	2338      	movs	r3, #56	; 0x38
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2225      	movs	r2, #37	; 0x25
 80023e4:	e03c      	b.n	8002460 <READ_DATA+0x470>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	20000040 	.word	0x20000040
 80023ec:	0000026f 	.word	0x0000026f
 80023f0:	0000026e 	.word	0x0000026e
 80023f4:	fffffda0 	.word	0xfffffda0
 80023f8:	fffffda4 	.word	0xfffffda4
 80023fc:	000002ae 	.word	0x000002ae
 8002400:	5a1cac08 	.word	0x5a1cac08
 8002404:	3fdf3b64 	.word	0x3fdf3b64
 8002408:	9999999a 	.word	0x9999999a
 800240c:	40239999 	.word	0x40239999
 8002410:	408f4000 	.word	0x408f4000
 8002414:	20000028 	.word	0x20000028
 8002418:	00000267 	.word	0x00000267
 800241c:	00000266 	.word	0x00000266
 8002420:	fffffd9c 	.word	0xfffffd9c
 8002424:	fffffd98 	.word	0xfffffd98
 8002428:	2000002c 	.word	0x2000002c
 800242c:	0000025f 	.word	0x0000025f
 8002430:	0000025e 	.word	0x0000025e
 8002434:	fffffd94 	.word	0xfffffd94
 8002438:	fffffd90 	.word	0xfffffd90
 800243c:	000002aa 	.word	0x000002aa
 8002440:	20000030 	.word	0x20000030
 8002444:	00000257 	.word	0x00000257
 8002448:	00000256 	.word	0x00000256
 800244c:	fffffd8c 	.word	0xfffffd8c
 8002450:	fffffd88 	.word	0xfffffd88
 8002454:	20000034 	.word	0x20000034
 8002458:	0000024f 	.word	0x0000024f
 800245c:	0000024e 	.word	0x0000024e
 8002460:	f001 fe8c 	bl	800417c <HAL_I2C_Mem_Read>
 8002464:	0003      	movs	r3, r0
 8002466:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <READ_DATA+0x684>)
 800246a:	21ae      	movs	r1, #174	; 0xae
 800246c:	0089      	lsls	r1, r1, #2
 800246e:	185b      	adds	r3, r3, r1
 8002470:	19db      	adds	r3, r3, r7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b21a      	sxth	r2, r3
 8002476:	4b80      	ldr	r3, [pc, #512]	; (8002678 <READ_DATA+0x688>)
 8002478:	185b      	adds	r3, r3, r1
 800247a:	19db      	adds	r3, r3, r7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21a      	sxth	r2, r3
 8002486:	497d      	ldr	r1, [pc, #500]	; (800267c <READ_DATA+0x68c>)
 8002488:	187b      	adds	r3, r7, r1
 800248a:	801a      	strh	r2, [r3, #0]
	    if(gyro_y_raw > 32768) {
 800248c:	187b      	adds	r3, r7, r1
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	429a      	cmp	r2, r3
 8002496:	d904      	bls.n	80024a2 <READ_DATA+0x4b2>
	    	gyro_y_raw = (~gyro_y_raw + 1);
 8002498:	187b      	adds	r3, r7, r1
 800249a:	187a      	adds	r2, r7, r1
 800249c:	8812      	ldrh	r2, [r2, #0]
 800249e:	4252      	negs	r2, r2
 80024a0:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_y = ((gyro_y_raw *GYRO_SENS/1000)) - gyro_y_offset;
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <READ_DATA+0x68c>)
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	2246      	movs	r2, #70	; 0x46
 80024aa:	4353      	muls	r3, r2
 80024ac:	22fa      	movs	r2, #250	; 0xfa
 80024ae:	0091      	lsls	r1, r2, #2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fd feb1 	bl	8000218 <__divsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe fa23 	bl	8000904 <__aeabi_i2f>
 80024be:	1c02      	adds	r2, r0, #0
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <READ_DATA+0x690>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	1c19      	adds	r1, r3, #0
 80024c6:	1c10      	adds	r0, r2, #0
 80024c8:	f7fe f87c 	bl	80005c4 <__aeabi_fsub>
 80024cc:	1c03      	adds	r3, r0, #0
 80024ce:	2292      	movs	r2, #146	; 0x92
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	18ba      	adds	r2, r7, r2
 80024d4:	6013      	str	r3, [r2, #0]
		uint8_t Gyro_Z_L[1];
		HAL_StatusTypeDef Z_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, &Gyro_Z_L[0], 1, 100);
 80024d6:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <READ_DATA+0x694>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	b299      	uxth	r1, r3
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <READ_DATA+0x698>)
 80024de:	18fc      	adds	r4, r7, r3
 80024e0:	4868      	ldr	r0, [pc, #416]	; (8002684 <READ_DATA+0x694>)
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	2301      	movs	r3, #1
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2334      	movs	r3, #52	; 0x34
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2301      	movs	r3, #1
 80024f2:	2226      	movs	r2, #38	; 0x26
 80024f4:	f001 fe42 	bl	800417c <HAL_I2C_Mem_Read>
 80024f8:	0003      	movs	r3, r0
 80024fa:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Z_H[1];
		HAL_StatusTypeDef Z2_gyro = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, &Gyro_Z_H[0], 1, 100);
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <READ_DATA+0x694>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	b299      	uxth	r1, r3
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <READ_DATA+0x69c>)
 8002504:	18fc      	adds	r4, r7, r3
 8002506:	485f      	ldr	r0, [pc, #380]	; (8002684 <READ_DATA+0x694>)
 8002508:	2364      	movs	r3, #100	; 0x64
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	2301      	movs	r3, #1
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	2330      	movs	r3, #48	; 0x30
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	2227      	movs	r2, #39	; 0x27
 800251a:	f001 fe2f 	bl	800417c <HAL_I2C_Mem_Read>
 800251e:	0003      	movs	r3, r0
 8002520:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <READ_DATA+0x6a0>)
 8002524:	21ae      	movs	r1, #174	; 0xae
 8002526:	0089      	lsls	r1, r1, #2
 8002528:	185b      	adds	r3, r3, r1
 800252a:	19db      	adds	r3, r3, r7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b21a      	sxth	r2, r3
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <READ_DATA+0x6a4>)
 8002532:	185b      	adds	r3, r3, r1
 8002534:	19db      	adds	r3, r3, r7
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	b21b      	sxth	r3, r3
 800253c:	4313      	orrs	r3, r2
 800253e:	b21a      	sxth	r2, r3
 8002540:	21a9      	movs	r1, #169	; 0xa9
 8002542:	0089      	lsls	r1, r1, #2
 8002544:	187b      	adds	r3, r7, r1
 8002546:	801a      	strh	r2, [r3, #0]
	    if(gyro_z_raw > 32768) {
 8002548:	187b      	adds	r3, r7, r1
 800254a:	881a      	ldrh	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	429a      	cmp	r2, r3
 8002552:	d904      	bls.n	800255e <READ_DATA+0x56e>
	    	gyro_z_raw = (~gyro_z_raw + 1);
 8002554:	187b      	adds	r3, r7, r1
 8002556:	187a      	adds	r2, r7, r1
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	4252      	negs	r2, r2
 800255c:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_z = ((gyro_z_raw *GYRO_SENS/1000)) - gyro_z_offset;
 800255e:	23a9      	movs	r3, #169	; 0xa9
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	2246      	movs	r2, #70	; 0x46
 8002568:	4353      	muls	r3, r2
 800256a:	22fa      	movs	r2, #250	; 0xfa
 800256c:	0091      	lsls	r1, r2, #2
 800256e:	0018      	movs	r0, r3
 8002570:	f7fd fe52 	bl	8000218 <__divsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	0018      	movs	r0, r3
 8002578:	f7fe f9c4 	bl	8000904 <__aeabi_i2f>
 800257c:	1c02      	adds	r2, r0, #0
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <READ_DATA+0x6a8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1c19      	adds	r1, r3, #0
 8002584:	1c10      	adds	r0, r2, #0
 8002586:	f7fe f81d 	bl	80005c4 <__aeabi_fsub>
 800258a:	1c03      	adds	r3, r0, #0
 800258c:	2290      	movs	r2, #144	; 0x90
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	18ba      	adds	r2, r7, r2
 8002592:	6013      	str	r3, [r2, #0]

		// THIS WHILE LOOP COLLECTS DATA CONTINUOUSLY UNTIL IT COLLECTS A VALUE WITH A MAGNITUDE > 5 m/s^2 IN ANY OF THE 3 ACC AXES
		// ONCE IT DETECTS ACCELERATION ABOVE THE THRESHOLD VALUE IT PROCEEDS TO SAVE FOLLOWING MAX_DATA_POINTS DATA POINTS


		if ((acc_x > THRESHOLD) || (acc_x < ((-1) * THRESHOLD)) || (acc_y > THRESHOLD) || (acc_y < ((-1) * THRESHOLD)) ||
 8002594:	4941      	ldr	r1, [pc, #260]	; (800269c <READ_DATA+0x6ac>)
 8002596:	249a      	movs	r4, #154	; 0x9a
 8002598:	00a4      	lsls	r4, r4, #2
 800259a:	193b      	adds	r3, r7, r4
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	f7fd ff4d 	bl	800043c <__aeabi_fcmpgt>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d126      	bne.n	80025f4 <READ_DATA+0x604>
 80025a6:	493e      	ldr	r1, [pc, #248]	; (80026a0 <READ_DATA+0x6b0>)
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f7fd ff32 	bl	8000414 <__aeabi_fcmplt>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d11f      	bne.n	80025f4 <READ_DATA+0x604>
 80025b4:	4939      	ldr	r1, [pc, #228]	; (800269c <READ_DATA+0x6ac>)
 80025b6:	2498      	movs	r4, #152	; 0x98
 80025b8:	00a4      	lsls	r4, r4, #2
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f7fd ff3d 	bl	800043c <__aeabi_fcmpgt>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d116      	bne.n	80025f4 <READ_DATA+0x604>
 80025c6:	4936      	ldr	r1, [pc, #216]	; (80026a0 <READ_DATA+0x6b0>)
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	f7fd ff22 	bl	8000414 <__aeabi_fcmplt>
 80025d0:	1e03      	subs	r3, r0, #0
 80025d2:	d10f      	bne.n	80025f4 <READ_DATA+0x604>
 80025d4:	4931      	ldr	r1, [pc, #196]	; (800269c <READ_DATA+0x6ac>)
 80025d6:	2496      	movs	r4, #150	; 0x96
 80025d8:	00a4      	lsls	r4, r4, #2
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f7fd ff2d 	bl	800043c <__aeabi_fcmpgt>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d106      	bne.n	80025f4 <READ_DATA+0x604>
				(acc_z > THRESHOLD) || (acc_z < ((-1) * THRESHOLD))) {
 80025e6:	492e      	ldr	r1, [pc, #184]	; (80026a0 <READ_DATA+0x6b0>)
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	f7fd ff12 	bl	8000414 <__aeabi_fcmplt>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d036      	beq.n	8002662 <READ_DATA+0x672>
			collect = 1;
 80025f4:	2301      	movs	r3, #1
 80025f6:	22ac      	movs	r2, #172	; 0xac
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	18ba      	adds	r2, r7, r2
 80025fc:	6013      	str	r3, [r2, #0]
			//GPIOB->ODR &= ~GPIO_ODR_11;
			acc_x_data[0] = acc_x;
 80025fe:	23f8      	movs	r3, #248	; 0xf8
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	229a      	movs	r2, #154	; 0x9a
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	18ba      	adds	r2, r7, r2
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	601a      	str	r2, [r3, #0]
			acc_y_data[0] = acc_y;
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <READ_DATA+0x6b4>)
 8002610:	21ae      	movs	r1, #174	; 0xae
 8002612:	0089      	lsls	r1, r1, #2
 8002614:	185b      	adds	r3, r3, r1
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2298      	movs	r2, #152	; 0x98
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	601a      	str	r2, [r3, #0]
			acc_z_data[0] = acc_z;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <READ_DATA+0x6b8>)
 8002624:	185b      	adds	r3, r3, r1
 8002626:	19db      	adds	r3, r3, r7
 8002628:	2296      	movs	r2, #150	; 0x96
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	18ba      	adds	r2, r7, r2
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	601a      	str	r2, [r3, #0]
			gyro_x_data[0] = gyro_x;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <READ_DATA+0x6bc>)
 8002634:	185b      	adds	r3, r3, r1
 8002636:	19db      	adds	r3, r3, r7
 8002638:	2294      	movs	r2, #148	; 0x94
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	18ba      	adds	r2, r7, r2
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	601a      	str	r2, [r3, #0]
			gyro_y_data[0] = gyro_y;
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <READ_DATA+0x6c0>)
 8002644:	185b      	adds	r3, r3, r1
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2292      	movs	r2, #146	; 0x92
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	18ba      	adds	r2, r7, r2
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	601a      	str	r2, [r3, #0]
			gyro_z_data[0] = gyro_z;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <READ_DATA+0x6c4>)
 8002654:	185b      	adds	r3, r3, r1
 8002656:	19db      	adds	r3, r3, r7
 8002658:	2290      	movs	r2, #144	; 0x90
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	18ba      	adds	r2, r7, r2
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	601a      	str	r2, [r3, #0]
	while (!collect){
 8002662:	23ac      	movs	r3, #172	; 0xac
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d100      	bne.n	8002670 <READ_DATA+0x680>
 800266e:	e4d1      	b.n	8002014 <READ_DATA+0x24>
		}
	}


	while(data_index != MAX_DATA_POINTS) {
 8002670:	e30a      	b.n	8002c88 <READ_DATA+0xc98>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	fffffd84 	.word	0xfffffd84
 8002678:	fffffd80 	.word	0xfffffd80
 800267c:	000002a6 	.word	0x000002a6
 8002680:	20000038 	.word	0x20000038
 8002684:	20000040 	.word	0x20000040
 8002688:	00000247 	.word	0x00000247
 800268c:	00000246 	.word	0x00000246
 8002690:	fffffd7c 	.word	0xfffffd7c
 8002694:	fffffd78 	.word	0xfffffd78
 8002698:	2000003c 	.word	0x2000003c
 800269c:	41200000 	.word	0x41200000
 80026a0:	c1200000 	.word	0xc1200000
 80026a4:	fffffee8 	.word	0xfffffee8
 80026a8:	fffffe98 	.word	0xfffffe98
 80026ac:	fffffe48 	.word	0xfffffe48
 80026b0:	fffffdf8 	.word	0xfffffdf8
 80026b4:	fffffda8 	.word	0xfffffda8
		//Linear acceleration sesitivity: FS +-16 is .488
		//Angular rate sensitivity: FS = 2000 is 70

		//Read Accelerometer X
		uint8_t Acc_X_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, &Acc_X_L[0], 1, 100);
 80026b8:	4bf3      	ldr	r3, [pc, #972]	; (8002a88 <READ_DATA+0xa98>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	b299      	uxth	r1, r3
 80026be:	48f2      	ldr	r0, [pc, #968]	; (8002a88 <READ_DATA+0xa98>)
 80026c0:	2364      	movs	r3, #100	; 0x64
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	232c      	movs	r3, #44	; 0x2c
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	2228      	movs	r2, #40	; 0x28
 80026d2:	f001 fd53 	bl	800417c <HAL_I2C_Mem_Read>
		uint8_t Acc_X_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, &Acc_X_H[0], 1, 100);
 80026d6:	4bec      	ldr	r3, [pc, #944]	; (8002a88 <READ_DATA+0xa98>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	b299      	uxth	r1, r3
 80026dc:	48ea      	ldr	r0, [pc, #936]	; (8002a88 <READ_DATA+0xa98>)
 80026de:	2364      	movs	r3, #100	; 0x64
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2301      	movs	r3, #1
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2328      	movs	r3, #40	; 0x28
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2301      	movs	r3, #1
 80026ee:	2229      	movs	r2, #41	; 0x29
 80026f0:	f001 fd44 	bl	800417c <HAL_I2C_Mem_Read>
		uint16_t acc_x_raw = (Acc_X_H[0] << 8) | Acc_X_L[0];
 80026f4:	4be5      	ldr	r3, [pc, #916]	; (8002a8c <READ_DATA+0xa9c>)
 80026f6:	21ae      	movs	r1, #174	; 0xae
 80026f8:	0089      	lsls	r1, r1, #2
 80026fa:	185b      	adds	r3, r3, r1
 80026fc:	19db      	adds	r3, r3, r7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	b21a      	sxth	r2, r3
 8002704:	4be2      	ldr	r3, [pc, #904]	; (8002a90 <READ_DATA+0xaa0>)
 8002706:	185b      	adds	r3, r3, r1
 8002708:	19db      	adds	r3, r3, r7
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b21b      	sxth	r3, r3
 800270e:	4313      	orrs	r3, r2
 8002710:	b21a      	sxth	r2, r3
 8002712:	49e0      	ldr	r1, [pc, #896]	; (8002a94 <READ_DATA+0xaa4>)
 8002714:	187b      	adds	r3, r7, r1
 8002716:	801a      	strh	r2, [r3, #0]
	    if(acc_x_raw > 32768) {
 8002718:	187b      	adds	r3, r7, r1
 800271a:	881a      	ldrh	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	429a      	cmp	r2, r3
 8002722:	d904      	bls.n	800272e <READ_DATA+0x73e>
	    	acc_x_raw = (~acc_x_raw + 1);
 8002724:	187b      	adds	r3, r7, r1
 8002726:	187a      	adds	r2, r7, r1
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	4252      	negs	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]
	    }
	    float acc_x = (9.8 * (acc_x_raw *ACC_SENS) / 1000) - acc_x_offset;
 800272e:	4bd9      	ldr	r3, [pc, #868]	; (8002a94 <READ_DATA+0xaa4>)
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff fa69 	bl	8001c0c <__aeabi_i2d>
 800273a:	4ad7      	ldr	r2, [pc, #860]	; (8002a98 <READ_DATA+0xaa8>)
 800273c:	4bd7      	ldr	r3, [pc, #860]	; (8002a9c <READ_DATA+0xaac>)
 800273e:	f7fe fc21 	bl	8000f84 <__aeabi_dmul>
 8002742:	0002      	movs	r2, r0
 8002744:	000b      	movs	r3, r1
 8002746:	0010      	movs	r0, r2
 8002748:	0019      	movs	r1, r3
 800274a:	4ad5      	ldr	r2, [pc, #852]	; (8002aa0 <READ_DATA+0xab0>)
 800274c:	4bd5      	ldr	r3, [pc, #852]	; (8002aa4 <READ_DATA+0xab4>)
 800274e:	f7fe fc19 	bl	8000f84 <__aeabi_dmul>
 8002752:	0002      	movs	r2, r0
 8002754:	000b      	movs	r3, r1
 8002756:	0010      	movs	r0, r2
 8002758:	0019      	movs	r1, r3
 800275a:	2200      	movs	r2, #0
 800275c:	4bd2      	ldr	r3, [pc, #840]	; (8002aa8 <READ_DATA+0xab8>)
 800275e:	f7fe f923 	bl	80009a8 <__aeabi_ddiv>
 8002762:	0002      	movs	r2, r0
 8002764:	000b      	movs	r3, r1
 8002766:	0014      	movs	r4, r2
 8002768:	001d      	movs	r5, r3
 800276a:	4bd0      	ldr	r3, [pc, #832]	; (8002aac <READ_DATA+0xabc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c18      	adds	r0, r3, #0
 8002770:	f7ff fa7c 	bl	8001c6c <__aeabi_f2d>
 8002774:	0002      	movs	r2, r0
 8002776:	000b      	movs	r3, r1
 8002778:	0020      	movs	r0, r4
 800277a:	0029      	movs	r1, r5
 800277c:	f7fe fec4 	bl	8001508 <__aeabi_dsub>
 8002780:	0002      	movs	r2, r0
 8002782:	000b      	movs	r3, r1
 8002784:	0010      	movs	r0, r2
 8002786:	0019      	movs	r1, r3
 8002788:	f7ff fab8 	bl	8001cfc <__aeabi_d2f>
 800278c:	1c03      	adds	r3, r0, #0
 800278e:	22a4      	movs	r2, #164	; 0xa4
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	18ba      	adds	r2, r7, r2
 8002794:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Y
		uint8_t Acc_Y_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, &Acc_Y_L[0], 1, 100);
 8002796:	4bbc      	ldr	r3, [pc, #752]	; (8002a88 <READ_DATA+0xa98>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	b299      	uxth	r1, r3
 800279c:	48ba      	ldr	r0, [pc, #744]	; (8002a88 <READ_DATA+0xa98>)
 800279e:	2364      	movs	r3, #100	; 0x64
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2301      	movs	r3, #1
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2324      	movs	r3, #36	; 0x24
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2301      	movs	r3, #1
 80027ae:	222a      	movs	r2, #42	; 0x2a
 80027b0:	f001 fce4 	bl	800417c <HAL_I2C_Mem_Read>
		uint8_t Acc_Y_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, &Acc_Y_H[0], 1, 100);
 80027b4:	4bb4      	ldr	r3, [pc, #720]	; (8002a88 <READ_DATA+0xa98>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	b299      	uxth	r1, r3
 80027ba:	48b3      	ldr	r0, [pc, #716]	; (8002a88 <READ_DATA+0xa98>)
 80027bc:	2364      	movs	r3, #100	; 0x64
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	2301      	movs	r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2320      	movs	r3, #32
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	222b      	movs	r2, #43	; 0x2b
 80027ce:	f001 fcd5 	bl	800417c <HAL_I2C_Mem_Read>
		uint16_t acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 80027d2:	4bb7      	ldr	r3, [pc, #732]	; (8002ab0 <READ_DATA+0xac0>)
 80027d4:	21ae      	movs	r1, #174	; 0xae
 80027d6:	0089      	lsls	r1, r1, #2
 80027d8:	185b      	adds	r3, r3, r1
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4bb4      	ldr	r3, [pc, #720]	; (8002ab4 <READ_DATA+0xac4>)
 80027e2:	185b      	adds	r3, r3, r1
 80027e4:	19db      	adds	r3, r3, r7
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	21a8      	movs	r1, #168	; 0xa8
 80027f2:	0089      	lsls	r1, r1, #2
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	801a      	strh	r2, [r3, #0]
	    if(acc_y_raw > 32768) {
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	429a      	cmp	r2, r3
 8002802:	d904      	bls.n	800280e <READ_DATA+0x81e>
	    	acc_y_raw = (~acc_y_raw + 1);
 8002804:	187b      	adds	r3, r7, r1
 8002806:	187a      	adds	r2, r7, r1
 8002808:	8812      	ldrh	r2, [r2, #0]
 800280a:	4252      	negs	r2, r2
 800280c:	801a      	strh	r2, [r3, #0]
	    }
		float acc_y = (9.8 * (acc_y_raw *ACC_SENS) / 1000) - acc_y_offset;
 800280e:	23a8      	movs	r3, #168	; 0xa8
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff f9f8 	bl	8001c0c <__aeabi_i2d>
 800281c:	4a9e      	ldr	r2, [pc, #632]	; (8002a98 <READ_DATA+0xaa8>)
 800281e:	4b9f      	ldr	r3, [pc, #636]	; (8002a9c <READ_DATA+0xaac>)
 8002820:	f7fe fbb0 	bl	8000f84 <__aeabi_dmul>
 8002824:	0002      	movs	r2, r0
 8002826:	000b      	movs	r3, r1
 8002828:	0010      	movs	r0, r2
 800282a:	0019      	movs	r1, r3
 800282c:	4a9c      	ldr	r2, [pc, #624]	; (8002aa0 <READ_DATA+0xab0>)
 800282e:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <READ_DATA+0xab4>)
 8002830:	f7fe fba8 	bl	8000f84 <__aeabi_dmul>
 8002834:	0002      	movs	r2, r0
 8002836:	000b      	movs	r3, r1
 8002838:	0010      	movs	r0, r2
 800283a:	0019      	movs	r1, r3
 800283c:	2200      	movs	r2, #0
 800283e:	4b9a      	ldr	r3, [pc, #616]	; (8002aa8 <READ_DATA+0xab8>)
 8002840:	f7fe f8b2 	bl	80009a8 <__aeabi_ddiv>
 8002844:	0002      	movs	r2, r0
 8002846:	000b      	movs	r3, r1
 8002848:	0014      	movs	r4, r2
 800284a:	001d      	movs	r5, r3
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <READ_DATA+0xac8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c18      	adds	r0, r3, #0
 8002852:	f7ff fa0b 	bl	8001c6c <__aeabi_f2d>
 8002856:	0002      	movs	r2, r0
 8002858:	000b      	movs	r3, r1
 800285a:	0020      	movs	r0, r4
 800285c:	0029      	movs	r1, r5
 800285e:	f7fe fe53 	bl	8001508 <__aeabi_dsub>
 8002862:	0002      	movs	r2, r0
 8002864:	000b      	movs	r3, r1
 8002866:	0010      	movs	r0, r2
 8002868:	0019      	movs	r1, r3
 800286a:	f7ff fa47 	bl	8001cfc <__aeabi_d2f>
 800286e:	1c03      	adds	r3, r0, #0
 8002870:	22a3      	movs	r2, #163	; 0xa3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	18ba      	adds	r2, r7, r2
 8002876:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Z
		uint8_t Acc_Z_L[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, &Acc_Z_L[0], 1, 100);
 8002878:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <READ_DATA+0xa98>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	b299      	uxth	r1, r3
 800287e:	4882      	ldr	r0, [pc, #520]	; (8002a88 <READ_DATA+0xa98>)
 8002880:	2364      	movs	r3, #100	; 0x64
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	2301      	movs	r3, #1
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	231c      	movs	r3, #28
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2301      	movs	r3, #1
 8002890:	222c      	movs	r2, #44	; 0x2c
 8002892:	f001 fc73 	bl	800417c <HAL_I2C_Mem_Read>
		uint8_t Acc_Z_H[1];
		HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, &Acc_Z_H[0], 1, 100);
 8002896:	4b7c      	ldr	r3, [pc, #496]	; (8002a88 <READ_DATA+0xa98>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	b299      	uxth	r1, r3
 800289c:	487a      	ldr	r0, [pc, #488]	; (8002a88 <READ_DATA+0xa98>)
 800289e:	2364      	movs	r3, #100	; 0x64
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	2301      	movs	r3, #1
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2318      	movs	r3, #24
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	222d      	movs	r2, #45	; 0x2d
 80028b0:	f001 fc64 	bl	800417c <HAL_I2C_Mem_Read>
		uint16_t acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 80028b4:	4b81      	ldr	r3, [pc, #516]	; (8002abc <READ_DATA+0xacc>)
 80028b6:	21ae      	movs	r1, #174	; 0xae
 80028b8:	0089      	lsls	r1, r1, #2
 80028ba:	185b      	adds	r3, r3, r1
 80028bc:	19db      	adds	r3, r3, r7
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <READ_DATA+0xad0>)
 80028c4:	185b      	adds	r3, r3, r1
 80028c6:	19db      	adds	r3, r3, r7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	497c      	ldr	r1, [pc, #496]	; (8002ac4 <READ_DATA+0xad4>)
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	801a      	strh	r2, [r3, #0]
	    if(acc_z_raw > 32768) {
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d904      	bls.n	80028ee <READ_DATA+0x8fe>
	    	acc_z_raw = (~acc_z_raw + 1);
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	187a      	adds	r2, r7, r1
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	4252      	negs	r2, r2
 80028ec:	801a      	strh	r2, [r3, #0]
	    }
		float acc_z = (9.8 * (acc_z_raw *ACC_SENS) / 1000) - acc_z_offset;
 80028ee:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <READ_DATA+0xad4>)
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff f989 	bl	8001c0c <__aeabi_i2d>
 80028fa:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <READ_DATA+0xaa8>)
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <READ_DATA+0xaac>)
 80028fe:	f7fe fb41 	bl	8000f84 <__aeabi_dmul>
 8002902:	0002      	movs	r2, r0
 8002904:	000b      	movs	r3, r1
 8002906:	0010      	movs	r0, r2
 8002908:	0019      	movs	r1, r3
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <READ_DATA+0xab0>)
 800290c:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <READ_DATA+0xab4>)
 800290e:	f7fe fb39 	bl	8000f84 <__aeabi_dmul>
 8002912:	0002      	movs	r2, r0
 8002914:	000b      	movs	r3, r1
 8002916:	0010      	movs	r0, r2
 8002918:	0019      	movs	r1, r3
 800291a:	2200      	movs	r2, #0
 800291c:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <READ_DATA+0xab8>)
 800291e:	f7fe f843 	bl	80009a8 <__aeabi_ddiv>
 8002922:	0002      	movs	r2, r0
 8002924:	000b      	movs	r3, r1
 8002926:	0014      	movs	r4, r2
 8002928:	001d      	movs	r5, r3
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <READ_DATA+0xad8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c18      	adds	r0, r3, #0
 8002930:	f7ff f99c 	bl	8001c6c <__aeabi_f2d>
 8002934:	0002      	movs	r2, r0
 8002936:	000b      	movs	r3, r1
 8002938:	0020      	movs	r0, r4
 800293a:	0029      	movs	r1, r5
 800293c:	f7fe fde4 	bl	8001508 <__aeabi_dsub>
 8002940:	0002      	movs	r2, r0
 8002942:	000b      	movs	r3, r1
 8002944:	0010      	movs	r0, r2
 8002946:	0019      	movs	r1, r3
 8002948:	f7ff f9d8 	bl	8001cfc <__aeabi_d2f>
 800294c:	1c03      	adds	r3, r0, #0
 800294e:	22a2      	movs	r2, #162	; 0xa2
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	18ba      	adds	r2, r7, r2
 8002954:	6013      	str	r3, [r2, #0]

		//Read Gyroscope X
		uint8_t Gyro_X_L[1];
		HAL_StatusTypeDef  X = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, &Gyro_X_L[0], 1, 100);
 8002956:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <READ_DATA+0xa98>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	b299      	uxth	r1, r3
 800295c:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <READ_DATA+0xadc>)
 800295e:	18fc      	adds	r4, r7, r3
 8002960:	4849      	ldr	r0, [pc, #292]	; (8002a88 <READ_DATA+0xa98>)
 8002962:	2364      	movs	r3, #100	; 0x64
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	2301      	movs	r3, #1
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2314      	movs	r3, #20
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	2222      	movs	r2, #34	; 0x22
 8002974:	f001 fc02 	bl	800417c <HAL_I2C_Mem_Read>
 8002978:	0003      	movs	r3, r0
 800297a:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_X_H[1];
		HAL_StatusTypeDef X2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, &Gyro_X_H[0], 1, 100);
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <READ_DATA+0xa98>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	b299      	uxth	r1, r3
 8002982:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <READ_DATA+0xae0>)
 8002984:	18fc      	adds	r4, r7, r3
 8002986:	4840      	ldr	r0, [pc, #256]	; (8002a88 <READ_DATA+0xa98>)
 8002988:	2364      	movs	r3, #100	; 0x64
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	2301      	movs	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2310      	movs	r3, #16
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	2223      	movs	r2, #35	; 0x23
 800299a:	f001 fbef 	bl	800417c <HAL_I2C_Mem_Read>
 800299e:	0003      	movs	r3, r0
 80029a0:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <READ_DATA+0xae4>)
 80029a4:	21ae      	movs	r1, #174	; 0xae
 80029a6:	0089      	lsls	r1, r1, #2
 80029a8:	185b      	adds	r3, r3, r1
 80029aa:	19db      	adds	r3, r3, r7
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	4b49      	ldr	r3, [pc, #292]	; (8002ad8 <READ_DATA+0xae8>)
 80029b2:	185b      	adds	r3, r3, r1
 80029b4:	19db      	adds	r3, r3, r7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21a      	sxth	r2, r3
 80029c0:	21a7      	movs	r1, #167	; 0xa7
 80029c2:	0089      	lsls	r1, r1, #2
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	801a      	strh	r2, [r3, #0]
	    if(gyro_x_raw > 32768) {
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d904      	bls.n	80029de <READ_DATA+0x9ee>
	    	gyro_x_raw = (~gyro_x_raw + 1);
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	187a      	adds	r2, r7, r1
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	4252      	negs	r2, r2
 80029dc:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_x = ((gyro_x_raw *GYRO_SENS/1000)) - gyro_x_offset;
 80029de:	23a7      	movs	r3, #167	; 0xa7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	2246      	movs	r2, #70	; 0x46
 80029e8:	4353      	muls	r3, r2
 80029ea:	22fa      	movs	r2, #250	; 0xfa
 80029ec:	0091      	lsls	r1, r2, #2
 80029ee:	0018      	movs	r0, r3
 80029f0:	f7fd fc12 	bl	8000218 <__divsi3>
 80029f4:	0003      	movs	r3, r0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fd ff84 	bl	8000904 <__aeabi_i2f>
 80029fc:	1c02      	adds	r2, r0, #0
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <READ_DATA+0xaec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c19      	adds	r1, r3, #0
 8002a04:	1c10      	adds	r0, r2, #0
 8002a06:	f7fd fddd 	bl	80005c4 <__aeabi_fsub>
 8002a0a:	1c03      	adds	r3, r0, #0
 8002a0c:	22a0      	movs	r2, #160	; 0xa0
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	18ba      	adds	r2, r7, r2
 8002a12:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Y
		uint8_t Gyro_Y_L[1];
		HAL_StatusTypeDef Y = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, &Gyro_Y_L[0], 1, 100);
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <READ_DATA+0xa98>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <READ_DATA+0xaf0>)
 8002a1c:	18fc      	adds	r4, r7, r3
 8002a1e:	481a      	ldr	r0, [pc, #104]	; (8002a88 <READ_DATA+0xa98>)
 8002a20:	2364      	movs	r3, #100	; 0x64
 8002a22:	9302      	str	r3, [sp, #8]
 8002a24:	2301      	movs	r3, #1
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	230c      	movs	r3, #12
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	2224      	movs	r2, #36	; 0x24
 8002a32:	f001 fba3 	bl	800417c <HAL_I2C_Mem_Read>
 8002a36:	0003      	movs	r3, r0
 8002a38:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Y_H[1];
		HAL_StatusTypeDef Y2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, &Gyro_Y_H[0], 1, 100);
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <READ_DATA+0xa98>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <READ_DATA+0xaf4>)
 8002a42:	18fc      	adds	r4, r7, r3
 8002a44:	4810      	ldr	r0, [pc, #64]	; (8002a88 <READ_DATA+0xa98>)
 8002a46:	2364      	movs	r3, #100	; 0x64
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2308      	movs	r3, #8
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2301      	movs	r3, #1
 8002a56:	2225      	movs	r2, #37	; 0x25
 8002a58:	f001 fb90 	bl	800417c <HAL_I2C_Mem_Read>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <READ_DATA+0xaf8>)
 8002a62:	21ae      	movs	r1, #174	; 0xae
 8002a64:	0089      	lsls	r1, r1, #2
 8002a66:	185b      	adds	r3, r3, r1
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <READ_DATA+0xafc>)
 8002a70:	185b      	adds	r3, r3, r1
 8002a72:	19db      	adds	r3, r3, r7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	491c      	ldr	r1, [pc, #112]	; (8002af0 <READ_DATA+0xb00>)
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	801a      	strh	r2, [r3, #0]
	    if(gyro_y_raw > 32768) {
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	e035      	b.n	8002af4 <READ_DATA+0xb04>
 8002a88:	20000040 	.word	0x20000040
 8002a8c:	fffffd70 	.word	0xfffffd70
 8002a90:	fffffd74 	.word	0xfffffd74
 8002a94:	000002a2 	.word	0x000002a2
 8002a98:	5a1cac08 	.word	0x5a1cac08
 8002a9c:	3fdf3b64 	.word	0x3fdf3b64
 8002aa0:	9999999a 	.word	0x9999999a
 8002aa4:	40239999 	.word	0x40239999
 8002aa8:	408f4000 	.word	0x408f4000
 8002aac:	20000028 	.word	0x20000028
 8002ab0:	fffffd6c 	.word	0xfffffd6c
 8002ab4:	fffffd68 	.word	0xfffffd68
 8002ab8:	2000002c 	.word	0x2000002c
 8002abc:	fffffd64 	.word	0xfffffd64
 8002ac0:	fffffd60 	.word	0xfffffd60
 8002ac4:	0000029e 	.word	0x0000029e
 8002ac8:	20000030 	.word	0x20000030
 8002acc:	00000287 	.word	0x00000287
 8002ad0:	00000286 	.word	0x00000286
 8002ad4:	fffffd5c 	.word	0xfffffd5c
 8002ad8:	fffffd58 	.word	0xfffffd58
 8002adc:	20000034 	.word	0x20000034
 8002ae0:	0000027f 	.word	0x0000027f
 8002ae4:	0000027e 	.word	0x0000027e
 8002ae8:	fffffd54 	.word	0xfffffd54
 8002aec:	fffffd50 	.word	0xfffffd50
 8002af0:	0000029a 	.word	0x0000029a
 8002af4:	881a      	ldrh	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d904      	bls.n	8002b08 <READ_DATA+0xb18>
	    	gyro_y_raw = (~gyro_y_raw + 1);
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	187a      	adds	r2, r7, r1
 8002b02:	8812      	ldrh	r2, [r2, #0]
 8002b04:	4252      	negs	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_y = ((gyro_y_raw *GYRO_SENS/1000)) - gyro_y_offset;
 8002b08:	4bb0      	ldr	r3, [pc, #704]	; (8002dcc <READ_DATA+0xddc>)
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2246      	movs	r2, #70	; 0x46
 8002b10:	4353      	muls	r3, r2
 8002b12:	22fa      	movs	r2, #250	; 0xfa
 8002b14:	0091      	lsls	r1, r2, #2
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd fb7e 	bl	8000218 <__divsi3>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd fef0 	bl	8000904 <__aeabi_i2f>
 8002b24:	1c02      	adds	r2, r0, #0
 8002b26:	4baa      	ldr	r3, [pc, #680]	; (8002dd0 <READ_DATA+0xde0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c19      	adds	r1, r3, #0
 8002b2c:	1c10      	adds	r0, r2, #0
 8002b2e:	f7fd fd49 	bl	80005c4 <__aeabi_fsub>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	229e      	movs	r2, #158	; 0x9e
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	18ba      	adds	r2, r7, r2
 8002b3a:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Z
		uint8_t Gyro_Z_L[1];
		HAL_StatusTypeDef Z = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, &Gyro_Z_L[0], 1, 100);
 8002b3c:	4ba5      	ldr	r3, [pc, #660]	; (8002dd4 <READ_DATA+0xde4>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	b299      	uxth	r1, r3
 8002b42:	4ba5      	ldr	r3, [pc, #660]	; (8002dd8 <READ_DATA+0xde8>)
 8002b44:	18fc      	adds	r4, r7, r3
 8002b46:	48a3      	ldr	r0, [pc, #652]	; (8002dd4 <READ_DATA+0xde4>)
 8002b48:	2364      	movs	r3, #100	; 0x64
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	2226      	movs	r2, #38	; 0x26
 8002b58:	f001 fb10 	bl	800417c <HAL_I2C_Mem_Read>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Z_H[1];
		HAL_StatusTypeDef Z2 = HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, &Gyro_Z_H[0], 1, 100);
 8002b60:	4b9c      	ldr	r3, [pc, #624]	; (8002dd4 <READ_DATA+0xde4>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	b299      	uxth	r1, r3
 8002b66:	4b9d      	ldr	r3, [pc, #628]	; (8002ddc <READ_DATA+0xdec>)
 8002b68:	18fc      	adds	r4, r7, r3
 8002b6a:	489a      	ldr	r0, [pc, #616]	; (8002dd4 <READ_DATA+0xde4>)
 8002b6c:	2364      	movs	r3, #100	; 0x64
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	2301      	movs	r3, #1
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	003b      	movs	r3, r7
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2301      	movs	r3, #1
 8002b7a:	2227      	movs	r2, #39	; 0x27
 8002b7c:	f001 fafe 	bl	800417c <HAL_I2C_Mem_Read>
 8002b80:	0003      	movs	r3, r0
 8002b82:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 8002b84:	4b96      	ldr	r3, [pc, #600]	; (8002de0 <READ_DATA+0xdf0>)
 8002b86:	21ae      	movs	r1, #174	; 0xae
 8002b88:	0089      	lsls	r1, r1, #2
 8002b8a:	185b      	adds	r3, r3, r1
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	4b94      	ldr	r3, [pc, #592]	; (8002de4 <READ_DATA+0xdf4>)
 8002b94:	185b      	adds	r3, r3, r1
 8002b96:	19db      	adds	r3, r3, r7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	21a6      	movs	r1, #166	; 0xa6
 8002ba4:	0089      	lsls	r1, r1, #2
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	801a      	strh	r2, [r3, #0]
	    if(gyro_z_raw > 32768) {
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d904      	bls.n	8002bc0 <READ_DATA+0xbd0>
	    	gyro_z_raw = (~gyro_z_raw + 1);
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	187a      	adds	r2, r7, r1
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	4252      	negs	r2, r2
 8002bbe:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_z = ((gyro_z_raw *GYRO_SENS/1000)) - gyro_z_offset;
 8002bc0:	23a6      	movs	r3, #166	; 0xa6
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	2246      	movs	r2, #70	; 0x46
 8002bca:	4353      	muls	r3, r2
 8002bcc:	22fa      	movs	r2, #250	; 0xfa
 8002bce:	0091      	lsls	r1, r2, #2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fd fb21 	bl	8000218 <__divsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7fd fe93 	bl	8000904 <__aeabi_i2f>
 8002bde:	1c02      	adds	r2, r0, #0
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <READ_DATA+0xdf8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c19      	adds	r1, r3, #0
 8002be6:	1c10      	adds	r0, r2, #0
 8002be8:	f7fd fcec 	bl	80005c4 <__aeabi_fsub>
 8002bec:	1c03      	adds	r3, r0, #0
 8002bee:	259c      	movs	r5, #156	; 0x9c
 8002bf0:	00ad      	lsls	r5, r5, #2
 8002bf2:	197a      	adds	r2, r7, r5
 8002bf4:	6013      	str	r3, [r2, #0]

	    // Store the data
	    acc_x_data[data_index] = acc_x;
 8002bf6:	23f8      	movs	r3, #248	; 0xf8
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	20ad      	movs	r0, #173	; 0xad
 8002bfe:	0080      	lsls	r0, r0, #2
 8002c00:	183a      	adds	r2, r7, r0
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	0092      	lsls	r2, r2, #2
 8002c06:	21a4      	movs	r1, #164	; 0xa4
 8002c08:	0089      	lsls	r1, r1, #2
 8002c0a:	1879      	adds	r1, r7, r1
 8002c0c:	6809      	ldr	r1, [r1, #0]
 8002c0e:	50d1      	str	r1, [r2, r3]
	    acc_y_data[data_index] = acc_y;
 8002c10:	4b76      	ldr	r3, [pc, #472]	; (8002dec <READ_DATA+0xdfc>)
 8002c12:	24ae      	movs	r4, #174	; 0xae
 8002c14:	00a4      	lsls	r4, r4, #2
 8002c16:	191b      	adds	r3, r3, r4
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	183a      	adds	r2, r7, r0
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	21a3      	movs	r1, #163	; 0xa3
 8002c22:	0089      	lsls	r1, r1, #2
 8002c24:	1879      	adds	r1, r7, r1
 8002c26:	6809      	ldr	r1, [r1, #0]
 8002c28:	50d1      	str	r1, [r2, r3]
	    acc_z_data[data_index] = acc_z;
 8002c2a:	4b71      	ldr	r3, [pc, #452]	; (8002df0 <READ_DATA+0xe00>)
 8002c2c:	191b      	adds	r3, r3, r4
 8002c2e:	19db      	adds	r3, r3, r7
 8002c30:	183a      	adds	r2, r7, r0
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	21a2      	movs	r1, #162	; 0xa2
 8002c38:	0089      	lsls	r1, r1, #2
 8002c3a:	1879      	adds	r1, r7, r1
 8002c3c:	6809      	ldr	r1, [r1, #0]
 8002c3e:	50d1      	str	r1, [r2, r3]
	    gyro_x_data[data_index] = gyro_x;
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <READ_DATA+0xe04>)
 8002c42:	191b      	adds	r3, r3, r4
 8002c44:	19db      	adds	r3, r3, r7
 8002c46:	183a      	adds	r2, r7, r0
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	21a0      	movs	r1, #160	; 0xa0
 8002c4e:	0089      	lsls	r1, r1, #2
 8002c50:	1879      	adds	r1, r7, r1
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	50d1      	str	r1, [r2, r3]
	    gyro_y_data[data_index] = gyro_y;
 8002c56:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <READ_DATA+0xe08>)
 8002c58:	191b      	adds	r3, r3, r4
 8002c5a:	19db      	adds	r3, r3, r7
 8002c5c:	183a      	adds	r2, r7, r0
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	219e      	movs	r1, #158	; 0x9e
 8002c64:	0089      	lsls	r1, r1, #2
 8002c66:	1879      	adds	r1, r7, r1
 8002c68:	6809      	ldr	r1, [r1, #0]
 8002c6a:	50d1      	str	r1, [r2, r3]
	    gyro_z_data[data_index] = gyro_z;
 8002c6c:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <READ_DATA+0xe0c>)
 8002c6e:	191b      	adds	r3, r3, r4
 8002c70:	19db      	adds	r3, r3, r7
 8002c72:	183a      	adds	r2, r7, r0
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	1979      	adds	r1, r7, r5
 8002c7a:	6809      	ldr	r1, [r1, #0]
 8002c7c:	50d1      	str	r1, [r2, r3]

	    // Increment data_index (wrap around if it exceeds MAX_DATA_POINTS)
	    data_index++;
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	183a      	adds	r2, r7, r0
 8002c86:	6013      	str	r3, [r2, #0]
	while(data_index != MAX_DATA_POINTS) {
 8002c88:	23ad      	movs	r3, #173	; 0xad
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b14      	cmp	r3, #20
 8002c92:	d000      	beq.n	8002c96 <READ_DATA+0xca6>
 8002c94:	e510      	b.n	80026b8 <READ_DATA+0x6c8>
	}

	int i;
	for (i = 0; i < 1000000; i++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	22a5      	movs	r2, #165	; 0xa5
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e006      	b.n	8002cb0 <READ_DATA+0xcc0>
 8002ca2:	22a5      	movs	r2, #165	; 0xa5
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	18bb      	adds	r3, r7, r2
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	21a5      	movs	r1, #165	; 0xa5
 8002cb2:	0089      	lsls	r1, r1, #2
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <READ_DATA+0xe10>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	ddf1      	ble.n	8002ca2 <READ_DATA+0xcb2>

	}
	for (i = 0; i < MAX_DATA_POINTS; i++) { // SEND DATA
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	187a      	adds	r2, r7, r1
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e02d      	b.n	8002d22 <READ_DATA+0xd32>
		HAL_UART_Transmit(&huart6, &acc_x_data[i], 4, HAL_MAX_DELAY);
 8002cc6:	23f8      	movs	r3, #248	; 0xf8
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	18fa      	adds	r2, r7, r3
 8002ccc:	24a5      	movs	r4, #165	; 0xa5
 8002cce:	00a4      	lsls	r4, r4, #2
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	18d1      	adds	r1, r2, r3
 8002cd8:	2301      	movs	r3, #1
 8002cda:	425b      	negs	r3, r3
 8002cdc:	4849      	ldr	r0, [pc, #292]	; (8002e04 <READ_DATA+0xe14>)
 8002cde:	2204      	movs	r2, #4
 8002ce0:	f002 fd72 	bl	80057c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &acc_y_data[i], 4, HAL_MAX_DELAY);
 8002ce4:	23d0      	movs	r3, #208	; 0xd0
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	18fa      	adds	r2, r7, r3
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	18d1      	adds	r1, r2, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	425b      	negs	r3, r3
 8002cf6:	4843      	ldr	r0, [pc, #268]	; (8002e04 <READ_DATA+0xe14>)
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	f002 fd65 	bl	80057c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &acc_z_data[i], 4, HAL_MAX_DELAY);
 8002cfe:	23a8      	movs	r3, #168	; 0xa8
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	18fa      	adds	r2, r7, r3
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	18d1      	adds	r1, r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	425b      	negs	r3, r3
 8002d10:	483c      	ldr	r0, [pc, #240]	; (8002e04 <READ_DATA+0xe14>)
 8002d12:	2204      	movs	r2, #4
 8002d14:	f002 fd58 	bl	80057c8 <HAL_UART_Transmit>
	for (i = 0; i < MAX_DATA_POINTS; i++) { // SEND DATA
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	193a      	adds	r2, r7, r4
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	22a5      	movs	r2, #165	; 0xa5
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	18bb      	adds	r3, r7, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b13      	cmp	r3, #19
 8002d2c:	ddcb      	ble.n	8002cc6 <READ_DATA+0xcd6>
	}
	for (i = 0; i < 1000; i++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e006      	b.n	8002d44 <READ_DATA+0xd54>
 8002d36:	22a5      	movs	r2, #165	; 0xa5
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	18bb      	adds	r3, r7, r2
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	18ba      	adds	r2, r7, r2
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	21a5      	movs	r1, #165	; 0xa5
 8002d46:	0089      	lsls	r1, r1, #2
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	23fa      	movs	r3, #250	; 0xfa
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf0      	blt.n	8002d36 <READ_DATA+0xd46>

	}
	for (i = 0; i < MAX_DATA_POINTS; i++) {
 8002d54:	2300      	movs	r3, #0
 8002d56:	187a      	adds	r2, r7, r1
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e02a      	b.n	8002db2 <READ_DATA+0xdc2>
		HAL_UART_Transmit(&huart6, &gyro_x_data[i], 4, HAL_MAX_DELAY);
 8002d5c:	1c7a      	adds	r2, r7, #1
 8002d5e:	32ff      	adds	r2, #255	; 0xff
 8002d60:	24a5      	movs	r4, #165	; 0xa5
 8002d62:	00a4      	lsls	r4, r4, #2
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	18d1      	adds	r1, r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	425b      	negs	r3, r3
 8002d70:	4824      	ldr	r0, [pc, #144]	; (8002e04 <READ_DATA+0xe14>)
 8002d72:	2204      	movs	r2, #4
 8002d74:	f002 fd28 	bl	80057c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &gyro_y_data[i], 4, HAL_MAX_DELAY);
 8002d78:	23b0      	movs	r3, #176	; 0xb0
 8002d7a:	18fa      	adds	r2, r7, r3
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	18d1      	adds	r1, r2, r3
 8002d84:	2301      	movs	r3, #1
 8002d86:	425b      	negs	r3, r3
 8002d88:	481e      	ldr	r0, [pc, #120]	; (8002e04 <READ_DATA+0xe14>)
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f002 fd1c 	bl	80057c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &gyro_z_data[i], 4, HAL_MAX_DELAY);
 8002d90:	2360      	movs	r3, #96	; 0x60
 8002d92:	18fa      	adds	r2, r7, r3
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	18d1      	adds	r1, r2, r3
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	425b      	negs	r3, r3
 8002da0:	4818      	ldr	r0, [pc, #96]	; (8002e04 <READ_DATA+0xe14>)
 8002da2:	2204      	movs	r2, #4
 8002da4:	f002 fd10 	bl	80057c8 <HAL_UART_Transmit>
	for (i = 0; i < MAX_DATA_POINTS; i++) {
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	193a      	adds	r2, r7, r4
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	23a5      	movs	r3, #165	; 0xa5
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b13      	cmp	r3, #19
 8002dbc:	ddce      	ble.n	8002d5c <READ_DATA+0xd6c>
	}

	//GPIOB->ODR &= ~GPIO_ODR_2;
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	23ae      	movs	r3, #174	; 0xae
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	449d      	add	sp, r3
 8002dca:	bdb0      	pop	{r4, r5, r7, pc}
 8002dcc:	0000029a 	.word	0x0000029a
 8002dd0:	20000038 	.word	0x20000038
 8002dd4:	20000040 	.word	0x20000040
 8002dd8:	00000277 	.word	0x00000277
 8002ddc:	00000276 	.word	0x00000276
 8002de0:	fffffd4c 	.word	0xfffffd4c
 8002de4:	fffffd48 	.word	0xfffffd48
 8002de8:	2000003c 	.word	0x2000003c
 8002dec:	fffffee8 	.word	0xfffffee8
 8002df0:	fffffe98 	.word	0xfffffe98
 8002df4:	fffffe48 	.word	0xfffffe48
 8002df8:	fffffdf8 	.word	0xfffffdf8
 8002dfc:	fffffda8 	.word	0xfffffda8
 8002e00:	000f423f 	.word	0x000f423f
 8002e04:	20000094 	.word	0x20000094

08002e08 <ReadAccelerometerAtRest>:

void ReadAccelerometerAtRest() {
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b094      	sub	sp, #80	; 0x50
 8002e0c:	af04      	add	r7, sp, #16
	GPIOB->ODR |= GPIO_ODR_2;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <ReadAccelerometerAtRest+0x80>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <ReadAccelerometerAtRest+0x80>)
 8002e14:	2104      	movs	r1, #4
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]

    //Offset X
	uint8_t Acc_X_L[1];
    uint8_t Acc_X_H[1];
    uint16_t acc_x_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, Acc_X_L, 1, 100);
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <ReadAccelerometerAtRest+0x84>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	481a      	ldr	r0, [pc, #104]	; (8002e8c <ReadAccelerometerAtRest+0x84>)
 8002e22:	2364      	movs	r3, #100	; 0x64
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2301      	movs	r3, #1
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2430      	movs	r4, #48	; 0x30
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	2228      	movs	r2, #40	; 0x28
 8002e34:	f001 f9a2 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, Acc_X_H, 1, 100);
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <ReadAccelerometerAtRest+0x84>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	4813      	ldr	r0, [pc, #76]	; (8002e8c <ReadAccelerometerAtRest+0x84>)
 8002e40:	2364      	movs	r3, #100	; 0x64
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	2301      	movs	r3, #1
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	252c      	movs	r5, #44	; 0x2c
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2301      	movs	r3, #1
 8002e50:	2229      	movs	r2, #41	; 0x29
 8002e52:	f001 f993 	bl	800417c <HAL_I2C_Mem_Read>
    acc_x_raw = Acc_X_L[0] | (Acc_X_H[0] << 8);
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	197b      	adds	r3, r7, r5
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	2132      	movs	r1, #50	; 0x32
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	801a      	strh	r2, [r3, #0]
    uint16_t raw_value;
    if(acc_x_raw > 32768) {
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	881a      	ldrh	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90a      	bls.n	8002e90 <ReadAccelerometerAtRest+0x88>
    	raw_value = (~acc_x_raw + 1);
 8002e7a:	233e      	movs	r3, #62	; 0x3e
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	187a      	adds	r2, r7, r1
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	4252      	negs	r2, r2
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	e009      	b.n	8002e9c <ReadAccelerometerAtRest+0x94>
 8002e88:	48000400 	.word	0x48000400
 8002e8c:	20000040 	.word	0x20000040
    } else {
    	raw_value = acc_x_raw;
 8002e90:	233e      	movs	r3, #62	; 0x3e
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2232      	movs	r2, #50	; 0x32
 8002e96:	18ba      	adds	r2, r7, r2
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	801a      	strh	r2, [r3, #0]
    }
    acc_x_offset = 9.8 * (raw_value *ACC_SENS) / 1000;
 8002e9c:	233e      	movs	r3, #62	; 0x3e
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fe feb2 	bl	8001c0c <__aeabi_i2d>
 8002ea8:	4ad3      	ldr	r2, [pc, #844]	; (80031f8 <ReadAccelerometerAtRest+0x3f0>)
 8002eaa:	4bd4      	ldr	r3, [pc, #848]	; (80031fc <ReadAccelerometerAtRest+0x3f4>)
 8002eac:	f7fe f86a 	bl	8000f84 <__aeabi_dmul>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	000b      	movs	r3, r1
 8002eb4:	0010      	movs	r0, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	4ad1      	ldr	r2, [pc, #836]	; (8003200 <ReadAccelerometerAtRest+0x3f8>)
 8002eba:	4bd2      	ldr	r3, [pc, #840]	; (8003204 <ReadAccelerometerAtRest+0x3fc>)
 8002ebc:	f7fe f862 	bl	8000f84 <__aeabi_dmul>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4bcf      	ldr	r3, [pc, #828]	; (8003208 <ReadAccelerometerAtRest+0x400>)
 8002ecc:	f7fd fd6c 	bl	80009a8 <__aeabi_ddiv>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	f7fe ff10 	bl	8001cfc <__aeabi_d2f>
 8002edc:	1c02      	adds	r2, r0, #0
 8002ede:	4bcb      	ldr	r3, [pc, #812]	; (800320c <ReadAccelerometerAtRest+0x404>)
 8002ee0:	601a      	str	r2, [r3, #0]
    //Offset Y
    uint8_t Acc_Y_L[1];
    uint8_t Acc_Y_H[1];
    uint16_t acc_y_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, Acc_Y_L, 1, 100);
 8002ee2:	4bcb      	ldr	r3, [pc, #812]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	48c9      	ldr	r0, [pc, #804]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002eea:	2364      	movs	r3, #100	; 0x64
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2428      	movs	r4, #40	; 0x28
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	222a      	movs	r2, #42	; 0x2a
 8002efc:	f001 f93e 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, Acc_Y_H, 1, 100);
 8002f00:	4bc3      	ldr	r3, [pc, #780]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	b299      	uxth	r1, r3
 8002f06:	48c2      	ldr	r0, [pc, #776]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002f08:	2364      	movs	r3, #100	; 0x64
 8002f0a:	9302      	str	r3, [sp, #8]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2524      	movs	r5, #36	; 0x24
 8002f12:	197b      	adds	r3, r7, r5
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	222b      	movs	r2, #43	; 0x2b
 8002f1a:	f001 f92f 	bl	800417c <HAL_I2C_Mem_Read>
    acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	213c      	movs	r1, #60	; 0x3c
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	801a      	strh	r2, [r3, #0]
    if(acc_y_raw > 32768) {
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d904      	bls.n	8002f4c <ReadAccelerometerAtRest+0x144>
    	acc_y_raw = (~acc_y_raw + 1);
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	187a      	adds	r2, r7, r1
 8002f46:	8812      	ldrh	r2, [r2, #0]
 8002f48:	4252      	negs	r2, r2
 8002f4a:	801a      	strh	r2, [r3, #0]
    }
    acc_y_offset = 9.8 * (acc_y_raw *ACC_SENS) / 1000;
 8002f4c:	233c      	movs	r3, #60	; 0x3c
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7fe fe5a 	bl	8001c0c <__aeabi_i2d>
 8002f58:	4aa7      	ldr	r2, [pc, #668]	; (80031f8 <ReadAccelerometerAtRest+0x3f0>)
 8002f5a:	4ba8      	ldr	r3, [pc, #672]	; (80031fc <ReadAccelerometerAtRest+0x3f4>)
 8002f5c:	f7fe f812 	bl	8000f84 <__aeabi_dmul>
 8002f60:	0002      	movs	r2, r0
 8002f62:	000b      	movs	r3, r1
 8002f64:	0010      	movs	r0, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	4aa5      	ldr	r2, [pc, #660]	; (8003200 <ReadAccelerometerAtRest+0x3f8>)
 8002f6a:	4ba6      	ldr	r3, [pc, #664]	; (8003204 <ReadAccelerometerAtRest+0x3fc>)
 8002f6c:	f7fe f80a 	bl	8000f84 <__aeabi_dmul>
 8002f70:	0002      	movs	r2, r0
 8002f72:	000b      	movs	r3, r1
 8002f74:	0010      	movs	r0, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4ba3      	ldr	r3, [pc, #652]	; (8003208 <ReadAccelerometerAtRest+0x400>)
 8002f7c:	f7fd fd14 	bl	80009a8 <__aeabi_ddiv>
 8002f80:	0002      	movs	r2, r0
 8002f82:	000b      	movs	r3, r1
 8002f84:	0010      	movs	r0, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	f7fe feb8 	bl	8001cfc <__aeabi_d2f>
 8002f8c:	1c02      	adds	r2, r0, #0
 8002f8e:	4ba1      	ldr	r3, [pc, #644]	; (8003214 <ReadAccelerometerAtRest+0x40c>)
 8002f90:	601a      	str	r2, [r3, #0]

    //Offset Z
    uint8_t Acc_Z_L[1];
    uint8_t Acc_Z_H[1];
    uint16_t acc_z_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, Acc_Z_L, 1, 100);
 8002f92:	4b9f      	ldr	r3, [pc, #636]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	b299      	uxth	r1, r3
 8002f98:	489d      	ldr	r0, [pc, #628]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002f9a:	2364      	movs	r3, #100	; 0x64
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2420      	movs	r4, #32
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	222c      	movs	r2, #44	; 0x2c
 8002fac:	f001 f8e6 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, Acc_Z_H, 1, 100);
 8002fb0:	4b97      	ldr	r3, [pc, #604]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	4896      	ldr	r0, [pc, #600]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8002fb8:	2364      	movs	r3, #100	; 0x64
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	251c      	movs	r5, #28
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	222d      	movs	r2, #45	; 0x2d
 8002fca:	f001 f8d7 	bl	800417c <HAL_I2C_Mem_Read>
    acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	197b      	adds	r3, r7, r5
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	213a      	movs	r1, #58	; 0x3a
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	801a      	strh	r2, [r3, #0]
    if(acc_z_raw > 32768) {
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d904      	bls.n	8002ffc <ReadAccelerometerAtRest+0x1f4>
    	acc_z_raw = (~acc_z_raw + 1);
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	187a      	adds	r2, r7, r1
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	4252      	negs	r2, r2
 8002ffa:	801a      	strh	r2, [r3, #0]
    }
    acc_z_offset = 9.8 * (acc_z_raw *ACC_SENS) / 1000;
 8002ffc:	233a      	movs	r3, #58	; 0x3a
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	0018      	movs	r0, r3
 8003004:	f7fe fe02 	bl	8001c0c <__aeabi_i2d>
 8003008:	4a7b      	ldr	r2, [pc, #492]	; (80031f8 <ReadAccelerometerAtRest+0x3f0>)
 800300a:	4b7c      	ldr	r3, [pc, #496]	; (80031fc <ReadAccelerometerAtRest+0x3f4>)
 800300c:	f7fd ffba 	bl	8000f84 <__aeabi_dmul>
 8003010:	0002      	movs	r2, r0
 8003012:	000b      	movs	r3, r1
 8003014:	0010      	movs	r0, r2
 8003016:	0019      	movs	r1, r3
 8003018:	4a79      	ldr	r2, [pc, #484]	; (8003200 <ReadAccelerometerAtRest+0x3f8>)
 800301a:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <ReadAccelerometerAtRest+0x3fc>)
 800301c:	f7fd ffb2 	bl	8000f84 <__aeabi_dmul>
 8003020:	0002      	movs	r2, r0
 8003022:	000b      	movs	r3, r1
 8003024:	0010      	movs	r0, r2
 8003026:	0019      	movs	r1, r3
 8003028:	2200      	movs	r2, #0
 800302a:	4b77      	ldr	r3, [pc, #476]	; (8003208 <ReadAccelerometerAtRest+0x400>)
 800302c:	f7fd fcbc 	bl	80009a8 <__aeabi_ddiv>
 8003030:	0002      	movs	r2, r0
 8003032:	000b      	movs	r3, r1
 8003034:	0010      	movs	r0, r2
 8003036:	0019      	movs	r1, r3
 8003038:	f7fe fe60 	bl	8001cfc <__aeabi_d2f>
 800303c:	1c02      	adds	r2, r0, #0
 800303e:	4b76      	ldr	r3, [pc, #472]	; (8003218 <ReadAccelerometerAtRest+0x410>)
 8003040:	601a      	str	r2, [r3, #0]
    //Gyroscope
    //Offset X
	uint8_t Gyro_X_L[1];
    uint8_t Gyro_X_H[1];
    uint16_t gyro_x_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, Acc_X_L, 1, 100);
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	b299      	uxth	r1, r3
 8003048:	4871      	ldr	r0, [pc, #452]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 800304a:	2364      	movs	r3, #100	; 0x64
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	2301      	movs	r3, #1
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2330      	movs	r3, #48	; 0x30
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2301      	movs	r3, #1
 800305a:	2222      	movs	r2, #34	; 0x22
 800305c:	f001 f88e 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, Acc_X_H, 1, 100);
 8003060:	4b6b      	ldr	r3, [pc, #428]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	b299      	uxth	r1, r3
 8003066:	486a      	ldr	r0, [pc, #424]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003068:	2364      	movs	r3, #100	; 0x64
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	2301      	movs	r3, #1
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	232c      	movs	r3, #44	; 0x2c
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2301      	movs	r3, #1
 8003078:	2223      	movs	r2, #35	; 0x23
 800307a:	f001 f87f 	bl	800417c <HAL_I2C_Mem_Read>
    gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 800307e:	2318      	movs	r3, #24
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b21a      	sxth	r2, r3
 8003086:	2314      	movs	r3, #20
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21a      	sxth	r2, r3
 8003094:	2138      	movs	r1, #56	; 0x38
 8003096:	187b      	adds	r3, r7, r1
 8003098:	801a      	strh	r2, [r3, #0]
    if(gyro_x_raw > 32768) {
 800309a:	187b      	adds	r3, r7, r1
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d904      	bls.n	80030b0 <ReadAccelerometerAtRest+0x2a8>
    	gyro_x_raw = (~gyro_x_raw + 1);
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	187a      	adds	r2, r7, r1
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	4252      	negs	r2, r2
 80030ae:	801a      	strh	r2, [r3, #0]
    }
    gyro_x_offset = (gyro_x_raw *GYRO_SENS/1000);
 80030b0:	2338      	movs	r3, #56	; 0x38
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2246      	movs	r2, #70	; 0x46
 80030b8:	4353      	muls	r3, r2
 80030ba:	22fa      	movs	r2, #250	; 0xfa
 80030bc:	0091      	lsls	r1, r2, #2
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fd f8aa 	bl	8000218 <__divsi3>
 80030c4:	0003      	movs	r3, r0
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fd fc1c 	bl	8000904 <__aeabi_i2f>
 80030cc:	1c02      	adds	r2, r0, #0
 80030ce:	4b53      	ldr	r3, [pc, #332]	; (800321c <ReadAccelerometerAtRest+0x414>)
 80030d0:	601a      	str	r2, [r3, #0]

    //Offset Y
	uint8_t Gyro_Y_L[1];
    uint8_t Gyro_Y_H[1];
    uint16_t gyro_y_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, Acc_Y_L, 1, 100);
 80030d2:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	b299      	uxth	r1, r3
 80030d8:	484d      	ldr	r0, [pc, #308]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 80030da:	2364      	movs	r3, #100	; 0x64
 80030dc:	9302      	str	r3, [sp, #8]
 80030de:	2301      	movs	r3, #1
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2328      	movs	r3, #40	; 0x28
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2301      	movs	r3, #1
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f001 f846 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, Acc_Y_H, 1, 100);
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	b299      	uxth	r1, r3
 80030f6:	4846      	ldr	r0, [pc, #280]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 80030f8:	2364      	movs	r3, #100	; 0x64
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	2301      	movs	r3, #1
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	2324      	movs	r3, #36	; 0x24
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2301      	movs	r3, #1
 8003108:	2225      	movs	r2, #37	; 0x25
 800310a:	f001 f837 	bl	800417c <HAL_I2C_Mem_Read>
    gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 800310e:	2310      	movs	r3, #16
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b21a      	sxth	r2, r3
 8003116:	230c      	movs	r3, #12
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	b21b      	sxth	r3, r3
 8003120:	4313      	orrs	r3, r2
 8003122:	b21a      	sxth	r2, r3
 8003124:	2136      	movs	r1, #54	; 0x36
 8003126:	187b      	adds	r3, r7, r1
 8003128:	801a      	strh	r2, [r3, #0]
    if(gyro_y_raw > 32768) {
 800312a:	187b      	adds	r3, r7, r1
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	429a      	cmp	r2, r3
 8003134:	d904      	bls.n	8003140 <ReadAccelerometerAtRest+0x338>
    	gyro_y_raw = (~gyro_y_raw + 1);
 8003136:	187b      	adds	r3, r7, r1
 8003138:	187a      	adds	r2, r7, r1
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	4252      	negs	r2, r2
 800313e:	801a      	strh	r2, [r3, #0]
    }
    gyro_y_offset = (gyro_y_raw *GYRO_SENS/1000);
 8003140:	2336      	movs	r3, #54	; 0x36
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2246      	movs	r2, #70	; 0x46
 8003148:	4353      	muls	r3, r2
 800314a:	22fa      	movs	r2, #250	; 0xfa
 800314c:	0091      	lsls	r1, r2, #2
 800314e:	0018      	movs	r0, r3
 8003150:	f7fd f862 	bl	8000218 <__divsi3>
 8003154:	0003      	movs	r3, r0
 8003156:	0018      	movs	r0, r3
 8003158:	f7fd fbd4 	bl	8000904 <__aeabi_i2f>
 800315c:	1c02      	adds	r2, r0, #0
 800315e:	4b30      	ldr	r3, [pc, #192]	; (8003220 <ReadAccelerometerAtRest+0x418>)
 8003160:	601a      	str	r2, [r3, #0]

    //Offset Z
	uint8_t Gyro_Z_L[1];
    uint8_t Gyro_Z_H[1];
    uint16_t gyro_z_raw;
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, Acc_Z_L, 1, 100);
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	b299      	uxth	r1, r3
 8003168:	4829      	ldr	r0, [pc, #164]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 800316a:	2364      	movs	r3, #100	; 0x64
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	2301      	movs	r3, #1
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2320      	movs	r3, #32
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	2226      	movs	r2, #38	; 0x26
 800317c:	f000 fffe 	bl	800417c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, hi2c2.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, Acc_Z_H, 1, 100);
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	b299      	uxth	r1, r3
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <ReadAccelerometerAtRest+0x408>)
 8003188:	2364      	movs	r3, #100	; 0x64
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	2301      	movs	r3, #1
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	231c      	movs	r3, #28
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2301      	movs	r3, #1
 8003198:	2227      	movs	r2, #39	; 0x27
 800319a:	f000 ffef 	bl	800417c <HAL_I2C_Mem_Read>
    gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 800319e:	2308      	movs	r3, #8
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b21a      	sxth	r2, r3
 80031b2:	2134      	movs	r1, #52	; 0x34
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	801a      	strh	r2, [r3, #0]
    if(gyro_z_raw > 32768) {
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	881a      	ldrh	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d904      	bls.n	80031ce <ReadAccelerometerAtRest+0x3c6>
    	gyro_z_raw = (~gyro_z_raw + 1);
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	187a      	adds	r2, r7, r1
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	4252      	negs	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]
    }
    gyro_z_offset = (gyro_z_raw *GYRO_SENS/1000);
 80031ce:	2334      	movs	r3, #52	; 0x34
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	2246      	movs	r2, #70	; 0x46
 80031d6:	4353      	muls	r3, r2
 80031d8:	22fa      	movs	r2, #250	; 0xfa
 80031da:	0091      	lsls	r1, r2, #2
 80031dc:	0018      	movs	r0, r3
 80031de:	f7fd f81b 	bl	8000218 <__divsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd fb8d 	bl	8000904 <__aeabi_i2f>
 80031ea:	1c02      	adds	r2, r0, #0
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <ReadAccelerometerAtRest+0x41c>)
 80031ee:	601a      	str	r2, [r3, #0]
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b010      	add	sp, #64	; 0x40
 80031f6:	bdb0      	pop	{r4, r5, r7, pc}
 80031f8:	5a1cac08 	.word	0x5a1cac08
 80031fc:	3fdf3b64 	.word	0x3fdf3b64
 8003200:	9999999a 	.word	0x9999999a
 8003204:	40239999 	.word	0x40239999
 8003208:	408f4000 	.word	0x408f4000
 800320c:	20000028 	.word	0x20000028
 8003210:	20000040 	.word	0x20000040
 8003214:	2000002c 	.word	0x2000002c
 8003218:	20000030 	.word	0x20000030
 800321c:	20000034 	.word	0x20000034
 8003220:	20000038 	.word	0x20000038
 8003224:	2000003c 	.word	0x2000003c

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322c:	f000 fa8c 	bl	8003748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003230:	f000 f834 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003234:	f000 f8e2 	bl	80033fc <MX_GPIO_Init>
  GPIOB->ODR |= GPIO_ODR_2;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <main+0x68>)
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <main+0x68>)
 800323e:	2104      	movs	r1, #4
 8003240:	430a      	orrs	r2, r1
 8003242:	615a      	str	r2, [r3, #20]
  MX_I2C2_Init();
 8003244:	f000 f86a 	bl	800331c <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8003248:	f000 f8a8 	bl	800339c <MX_USART6_UART_Init>
  //IMU_Init();

  HAL_UART_Receive_IT(&huart6, Rx_data, 10);
 800324c:	4911      	ldr	r1, [pc, #68]	; (8003294 <main+0x6c>)
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <main+0x70>)
 8003250:	220a      	movs	r2, #10
 8003252:	0018      	movs	r0, r3
 8003254:	f002 fb58 	bl	8005908 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <main+0x70>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FEFLAG(&huart6);
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <main+0x70>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_NEFLAG(&huart6);
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <main+0x70>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2204      	movs	r2, #4
 800326e:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_OREFLAG(&huart6);
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <main+0x70>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2208      	movs	r2, #8
 8003276:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_CTSF);
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <main+0x70>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	621a      	str	r2, [r3, #32]
	  HAL_UART_Receive_IT(&huart6, Rx_data, 10);
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <main+0x6c>)
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <main+0x70>)
 8003286:	220a      	movs	r2, #10
 8003288:	0018      	movs	r0, r3
 800328a:	f002 fb3d 	bl	8005908 <HAL_UART_Receive_IT>
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 800328e:	e7e3      	b.n	8003258 <main+0x30>
 8003290:	48000400 	.word	0x48000400
 8003294:	2000011c 	.word	0x2000011c
 8003298:	20000094 	.word	0x20000094

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b093      	sub	sp, #76	; 0x4c
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	2414      	movs	r4, #20
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	0018      	movs	r0, r3
 80032a8:	2334      	movs	r3, #52	; 0x34
 80032aa:	001a      	movs	r2, r3
 80032ac:	2100      	movs	r1, #0
 80032ae:	f003 fd5d 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	0018      	movs	r0, r3
 80032b6:	2310      	movs	r3, #16
 80032b8:	001a      	movs	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f003 fd56 	bl	8006d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032c0:	0021      	movs	r1, r4
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2202      	movs	r2, #2
 80032c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2201      	movs	r2, #1
 80032cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2210      	movs	r2, #16
 80032d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	0018      	movs	r0, r3
 80032de:	f001 fd2d 	bl	8004d3c <HAL_RCC_OscConfig>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80032e6:	f000 f90f 	bl	8003508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2200      	movs	r2, #0
 80032f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2100      	movs	r1, #0
 8003306:	0018      	movs	r0, r3
 8003308:	f002 f89e 	bl	8005448 <HAL_RCC_ClockConfig>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d001      	beq.n	8003314 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003310:	f000 f8fa 	bl	8003508 <Error_Handler>
  }
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b013      	add	sp, #76	; 0x4c
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <MX_I2C2_Init+0x74>)
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <MX_I2C2_Init+0x78>)
 8003324:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <MX_I2C2_Init+0x74>)
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <MX_I2C2_Init+0x7c>)
 800332a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 214;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <MX_I2C2_Init+0x74>)
 800332e:	22d6      	movs	r2, #214	; 0xd6
 8003330:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <MX_I2C2_Init+0x74>)
 8003334:	2201      	movs	r2, #1
 8003336:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <MX_I2C2_Init+0x74>)
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_I2C2_Init+0x74>)
 8003340:	2200      	movs	r2, #0
 8003342:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <MX_I2C2_Init+0x74>)
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_I2C2_Init+0x74>)
 800334c:	2200      	movs	r2, #0
 800334e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_I2C2_Init+0x74>)
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_I2C2_Init+0x74>)
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fd4b 	bl	8003df4 <HAL_I2C_Init>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003362:	f000 f8d1 	bl	8003508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <MX_I2C2_Init+0x74>)
 8003368:	2100      	movs	r1, #0
 800336a:	0018      	movs	r0, r3
 800336c:	f001 fc4e 	bl	8004c0c <HAL_I2CEx_ConfigAnalogFilter>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003374:	f000 f8c8 	bl	8003508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <MX_I2C2_Init+0x74>)
 800337a:	2100      	movs	r1, #0
 800337c:	0018      	movs	r0, r3
 800337e:	f001 fc91 	bl	8004ca4 <HAL_I2CEx_ConfigDigitalFilter>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003386:	f000 f8bf 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000040 	.word	0x20000040
 8003394:	40005800 	.word	0x40005800
 8003398:	2000090e 	.word	0x2000090e

0800339c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <MX_USART6_UART_Init+0x5c>)
 80033a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033a8:	22e1      	movs	r2, #225	; 0xe1
 80033aa:	0252      	lsls	r2, r2, #9
 80033ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033c2:	220c      	movs	r2, #12
 80033c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <MX_USART6_UART_Init+0x58>)
 80033e0:	0018      	movs	r0, r3
 80033e2:	f002 f99d 	bl	8005720 <HAL_UART_Init>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80033ea:	f000 f88d 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000094 	.word	0x20000094
 80033f8:	40011400 	.word	0x40011400

080033fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003402:	240c      	movs	r4, #12
 8003404:	193b      	adds	r3, r7, r4
 8003406:	0018      	movs	r0, r3
 8003408:	2314      	movs	r3, #20
 800340a:	001a      	movs	r2, r3
 800340c:	2100      	movs	r1, #0
 800340e:	f003 fcad 	bl	8006d6c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <MX_GPIO_Init+0x94>)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <MX_GPIO_Init+0x94>)
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0309      	lsls	r1, r1, #12
 800341c:	430a      	orrs	r2, r1
 800341e:	615a      	str	r2, [r3, #20]
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <MX_GPIO_Init+0x94>)
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	031b      	lsls	r3, r3, #12
 8003428:	4013      	ands	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <MX_GPIO_Init+0x94>)
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <MX_GPIO_Init+0x94>)
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	02c9      	lsls	r1, r1, #11
 8003438:	430a      	orrs	r2, r1
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <MX_GPIO_Init+0x94>)
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	02db      	lsls	r3, r3, #11
 8003444:	4013      	ands	r3, r2
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <MX_GPIO_Init+0x98>)
 800344c:	2200      	movs	r2, #0
 800344e:	2101      	movs	r1, #1
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fcb1 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_GPIO_Init+0x98>)
 8003458:	2201      	movs	r2, #1
 800345a:	2104      	movs	r1, #4
 800345c:	0018      	movs	r0, r3
 800345e:	f000 fcab 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8003462:	0021      	movs	r1, r4
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2205      	movs	r2, #5
 8003468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2201      	movs	r2, #1
 800346e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2201      	movs	r2, #1
 8003474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	187b      	adds	r3, r7, r1
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <MX_GPIO_Init+0x98>)
 8003480:	0019      	movs	r1, r3
 8003482:	0010      	movs	r0, r2
 8003484:	f000 fb20 	bl	8003ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b009      	add	sp, #36	; 0x24
 800348e:	bd90      	pop	{r4, r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	48000400 	.word	0x48000400

08003498 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
//	__HAL_UART_CLEAR_NEFLAG(&huart6);
//	__HAL_UART_CLEAR_OREFLAG(&huart6);
//	__HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_CTSF);
//	received = HAL_UART_Receive_IT(&huart6, Rx_data, 10);

	if (Rx_data[5] == 'i') {
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_UART_RxCpltCallback+0x60>)
 80034a2:	795b      	ldrb	r3, [r3, #5]
 80034a4:	2b69      	cmp	r3, #105	; 0x69
 80034a6:	d123      	bne.n	80034f0 <HAL_UART_RxCpltCallback+0x58>

		HAL_UART_Transmit(&huart6, "ack1", 4, HAL_MAX_DELAY);
 80034a8:	2301      	movs	r3, #1
 80034aa:	425b      	negs	r3, r3
 80034ac:	4913      	ldr	r1, [pc, #76]	; (80034fc <HAL_UART_RxCpltCallback+0x64>)
 80034ae:	4814      	ldr	r0, [pc, #80]	; (8003500 <HAL_UART_RxCpltCallback+0x68>)
 80034b0:	2204      	movs	r2, #4
 80034b2:	f002 f989 	bl	80057c8 <HAL_UART_Transmit>
		for(int i = 0; i < 100000; i++) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e002      	b.n	80034c2 <HAL_UART_RxCpltCallback+0x2a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_UART_RxCpltCallback+0x6c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	ddf8      	ble.n	80034bc <HAL_UART_RxCpltCallback+0x24>

		}
		HAL_UART_Transmit(&huart6, "ack1", 4, HAL_MAX_DELAY);
 80034ca:	2301      	movs	r3, #1
 80034cc:	425b      	negs	r3, r3
 80034ce:	490b      	ldr	r1, [pc, #44]	; (80034fc <HAL_UART_RxCpltCallback+0x64>)
 80034d0:	480b      	ldr	r0, [pc, #44]	; (8003500 <HAL_UART_RxCpltCallback+0x68>)
 80034d2:	2204      	movs	r2, #4
 80034d4:	f002 f978 	bl	80057c8 <HAL_UART_Transmit>
		for(int i = 0; i < 100000; i++) {
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e002      	b.n	80034e4 <HAL_UART_RxCpltCallback+0x4c>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_UART_RxCpltCallback+0x6c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	ddf8      	ble.n	80034de <HAL_UART_RxCpltCallback+0x46>

		}
		IMU_Init();
 80034ec:	f7fe fcaa 	bl	8001e44 <IMU_Init>
	} else if (Rx_data[5] == 'c'){
//		HAL_UART_Transmit(&huart6, "ack2", 4, HAL_MAX_DELAY);

		//GPIOB->ODR &= ~GPIO_ODR_2;
	}
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000011c 	.word	0x2000011c
 80034fc:	08006ddc 	.word	0x08006ddc
 8003500:	20000094 	.word	0x20000094
 8003504:	0001869f 	.word	0x0001869f

08003508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800350c:	b672      	cpsid	i
}
 800350e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003510:	e7fe      	b.n	8003510 <Error_Handler+0x8>
	...

08003514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_MspInit+0x44>)
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_MspInit+0x44>)
 8003520:	2101      	movs	r1, #1
 8003522:	430a      	orrs	r2, r1
 8003524:	619a      	str	r2, [r3, #24]
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_MspInit+0x44>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2201      	movs	r2, #1
 800352c:	4013      	ands	r3, r2
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_MspInit+0x44>)
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_MspInit+0x44>)
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	0549      	lsls	r1, r1, #21
 800353c:	430a      	orrs	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_MspInit+0x44>)
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	055b      	lsls	r3, r3, #21
 8003548:	4013      	ands	r3, r2
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	2414      	movs	r4, #20
 8003566:	193b      	adds	r3, r7, r4
 8003568:	0018      	movs	r0, r3
 800356a:	2314      	movs	r3, #20
 800356c:	001a      	movs	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f003 fbfc 	bl	8006d6c <memset>
  if(hi2c->Instance==I2C2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_I2C_MspInit+0x90>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d132      	bne.n	80035e4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	02c9      	lsls	r1, r1, #11
 8003588:	430a      	orrs	r2, r1
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	02db      	lsls	r3, r3, #11
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800359a:	193b      	adds	r3, r7, r4
 800359c:	22c0      	movs	r2, #192	; 0xc0
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a2:	0021      	movs	r1, r4
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2212      	movs	r2, #18
 80035a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2201      	movs	r2, #1
 80035ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2203      	movs	r2, #3
 80035b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2201      	movs	r2, #1
 80035ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_I2C_MspInit+0x98>)
 80035c0:	0019      	movs	r1, r3
 80035c2:	0010      	movs	r0, r2
 80035c4:	f000 fa80 	bl	8003ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	03c9      	lsls	r1, r1, #15
 80035d2:	430a      	orrs	r2, r1
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_I2C_MspInit+0x94>)
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	03db      	lsls	r3, r3, #15
 80035de:	4013      	ands	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b00b      	add	sp, #44	; 0x2c
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	40005800 	.word	0x40005800
 80035f0:	40021000 	.word	0x40021000
 80035f4:	48000400 	.word	0x48000400

080035f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b08b      	sub	sp, #44	; 0x2c
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	2414      	movs	r4, #20
 8003602:	193b      	adds	r3, r7, r4
 8003604:	0018      	movs	r0, r3
 8003606:	2314      	movs	r3, #20
 8003608:	001a      	movs	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f003 fbae 	bl	8006d6c <memset>
  if(huart->Instance==USART6)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_UART_MspInit+0x9c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d137      	bne.n	800368a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <HAL_UART_MspInit+0xa0>)
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003620:	2120      	movs	r1, #32
 8003622:	430a      	orrs	r2, r1
 8003624:	619a      	str	r2, [r3, #24]
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2220      	movs	r2, #32
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0309      	lsls	r1, r1, #12
 800363c:	430a      	orrs	r2, r1
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	031b      	lsls	r3, r3, #12
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC0     ------> USART6_TX
    PC1     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800364e:	0021      	movs	r1, r4
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2203      	movs	r2, #3
 8003654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2202      	movs	r2, #2
 800365a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003662:	187b      	adds	r3, r7, r1
 8003664:	2203      	movs	r2, #3
 8003666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART6;
 8003668:	187b      	adds	r3, r7, r1
 800366a:	2202      	movs	r2, #2
 800366c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	187b      	adds	r3, r7, r1
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_UART_MspInit+0xa4>)
 8003672:	0019      	movs	r1, r3
 8003674:	0010      	movs	r0, r2
 8003676:	f000 fa27 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	201d      	movs	r0, #29
 8003680:	f000 f972 	bl	8003968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8003684:	201d      	movs	r0, #29
 8003686:	f000 f984 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b00b      	add	sp, #44	; 0x2c
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	40011400 	.word	0x40011400
 8003698:	40021000 	.word	0x40021000
 800369c:	48000800 	.word	0x48000800

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <NMI_Handler+0x4>

080036a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036aa:	e7fe      	b.n	80036aa <HardFault_Handler+0x4>

080036ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c4:	f000 f888 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);(&huart6);
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <USART3_8_IRQHandler+0x14>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f002 f96e 	bl	80059b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	20000094 	.word	0x20000094

080036e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036f4:	480d      	ldr	r0, [pc, #52]	; (800372c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036f8:	f7ff fff6 	bl	80036e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036fc:	480c      	ldr	r0, [pc, #48]	; (8003730 <LoopForever+0x6>)
  ldr r1, =_edata
 80036fe:	490d      	ldr	r1, [pc, #52]	; (8003734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <LoopForever+0xe>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003704:	e002      	b.n	800370c <LoopCopyDataInit>

08003706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370a:	3304      	adds	r3, #4

0800370c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800370c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003710:	d3f9      	bcc.n	8003706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003714:	4c0a      	ldr	r4, [pc, #40]	; (8003740 <LoopForever+0x16>)
  movs r3, #0
 8003716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003718:	e001      	b.n	800371e <LoopFillZerobss>

0800371a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800371c:	3204      	adds	r2, #4

0800371e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003720:	d3fb      	bcc.n	800371a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003722:	f003 fb2b 	bl	8006d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003726:	f7ff fd7f 	bl	8003228 <main>

0800372a <LoopForever>:

LoopForever:
    b LoopForever
 800372a:	e7fe      	b.n	800372a <LoopForever>
  ldr   r0, =_estack
 800372c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003734:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003738:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 800373c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003740:	2000012c 	.word	0x2000012c

08003744 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003744:	e7fe      	b.n	8003744 <ADC1_COMP_IRQHandler>
	...

08003748 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_Init+0x24>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_Init+0x24>)
 8003752:	2110      	movs	r1, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003758:	2003      	movs	r0, #3
 800375a:	f000 f809 	bl	8003770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375e:	f7ff fed9 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	40022000 	.word	0x40022000

08003770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_InitTick+0x5c>)
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_InitTick+0x60>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	0019      	movs	r1, r3
 8003782:	23fa      	movs	r3, #250	; 0xfa
 8003784:	0098      	lsls	r0, r3, #2
 8003786:	f7fc fcbd 	bl	8000104 <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	0019      	movs	r1, r3
 800378e:	0020      	movs	r0, r4
 8003790:	f7fc fcb8 	bl	8000104 <__udivsi3>
 8003794:	0003      	movs	r3, r0
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f90b 	bl	80039b2 <HAL_SYSTICK_Config>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00f      	b.n	80037c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d80b      	bhi.n	80037c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	2301      	movs	r3, #1
 80037ae:	425b      	negs	r3, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f8d8 	bl	8003968 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_InitTick+0x64>)
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b003      	add	sp, #12
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000008 	.word	0x20000008
 80037d4:	20000004 	.word	0x20000004

080037d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_IncTick+0x1c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	001a      	movs	r2, r3
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_IncTick+0x20>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	18d2      	adds	r2, r2, r3
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_IncTick+0x20>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000008 	.word	0x20000008
 80037f8:	20000128 	.word	0x20000128

080037fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <HAL_GetTick+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000128 	.word	0x20000128

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	0002      	movs	r2, r0
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b7f      	cmp	r3, #127	; 0x7f
 8003822:	d809      	bhi.n	8003838 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003824:	1dfb      	adds	r3, r7, #7
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	231f      	movs	r3, #31
 800382c:	401a      	ands	r2, r3
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <__NVIC_EnableIRQ+0x30>)
 8003830:	2101      	movs	r1, #1
 8003832:	4091      	lsls	r1, r2
 8003834:	000a      	movs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
  }
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	0002      	movs	r2, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b7f      	cmp	r3, #127	; 0x7f
 8003858:	d828      	bhi.n	80038ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800385a:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <__NVIC_SetPriority+0xd4>)
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b25b      	sxtb	r3, r3
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	33c0      	adds	r3, #192	; 0xc0
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	589b      	ldr	r3, [r3, r2]
 800386a:	1dfa      	adds	r2, r7, #7
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	0011      	movs	r1, r2
 8003870:	2203      	movs	r2, #3
 8003872:	400a      	ands	r2, r1
 8003874:	00d2      	lsls	r2, r2, #3
 8003876:	21ff      	movs	r1, #255	; 0xff
 8003878:	4091      	lsls	r1, r2
 800387a:	000a      	movs	r2, r1
 800387c:	43d2      	mvns	r2, r2
 800387e:	401a      	ands	r2, r3
 8003880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	401a      	ands	r2, r3
 800388a:	1dfb      	adds	r3, r7, #7
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	2303      	movs	r3, #3
 8003892:	4003      	ands	r3, r0
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003898:	481f      	ldr	r0, [pc, #124]	; (8003918 <__NVIC_SetPriority+0xd4>)
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	430a      	orrs	r2, r1
 80038a4:	33c0      	adds	r3, #192	; 0xc0
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038aa:	e031      	b.n	8003910 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <__NVIC_SetPriority+0xd8>)
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	0019      	movs	r1, r3
 80038b4:	230f      	movs	r3, #15
 80038b6:	400b      	ands	r3, r1
 80038b8:	3b08      	subs	r3, #8
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3306      	adds	r3, #6
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	3304      	adds	r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1dfa      	adds	r2, r7, #7
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	0011      	movs	r1, r2
 80038cc:	2203      	movs	r2, #3
 80038ce:	400a      	ands	r2, r1
 80038d0:	00d2      	lsls	r2, r2, #3
 80038d2:	21ff      	movs	r1, #255	; 0xff
 80038d4:	4091      	lsls	r1, r2
 80038d6:	000a      	movs	r2, r1
 80038d8:	43d2      	mvns	r2, r2
 80038da:	401a      	ands	r2, r3
 80038dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	22ff      	movs	r2, #255	; 0xff
 80038e4:	401a      	ands	r2, r3
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0018      	movs	r0, r3
 80038ec:	2303      	movs	r3, #3
 80038ee:	4003      	ands	r3, r0
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038f4:	4809      	ldr	r0, [pc, #36]	; (800391c <__NVIC_SetPriority+0xd8>)
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	001c      	movs	r4, r3
 80038fc:	230f      	movs	r3, #15
 80038fe:	4023      	ands	r3, r4
 8003900:	3b08      	subs	r3, #8
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	430a      	orrs	r2, r1
 8003906:	3306      	adds	r3, #6
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	18c3      	adds	r3, r0, r3
 800390c:	3304      	adds	r3, #4
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b003      	add	sp, #12
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	045b      	lsls	r3, r3, #17
 8003930:	429a      	cmp	r2, r3
 8003932:	d301      	bcc.n	8003938 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003934:	2301      	movs	r3, #1
 8003936:	e010      	b.n	800395a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <SysTick_Config+0x44>)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	3a01      	subs	r2, #1
 800393e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003940:	2301      	movs	r3, #1
 8003942:	425b      	negs	r3, r3
 8003944:	2103      	movs	r1, #3
 8003946:	0018      	movs	r0, r3
 8003948:	f7ff ff7c 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <SysTick_Config+0x44>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <SysTick_Config+0x44>)
 8003954:	2207      	movs	r2, #7
 8003956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003958:	2300      	movs	r3, #0
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	e000e010 	.word	0xe000e010

08003968 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	210f      	movs	r1, #15
 8003974:	187b      	adds	r3, r7, r1
 8003976:	1c02      	adds	r2, r0, #0
 8003978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	187b      	adds	r3, r7, r1
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b25b      	sxtb	r3, r3
 8003982:	0011      	movs	r1, r2
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	0002      	movs	r2, r0
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff33 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ffaf 	bl	8003920 <SysTick_Config>
 80039c2:	0003      	movs	r3, r0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	5c9b      	ldrb	r3, [r3, r2]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d008      	beq.n	80039f2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e020      	b.n	8003a34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	210e      	movs	r1, #14
 80039fe:	438a      	bics	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4091      	lsls	r1, r2
 8003a1e:	000a      	movs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	210f      	movs	r1, #15
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2221      	movs	r2, #33	; 0x21
 8003a50:	5c9b      	ldrb	r3, [r3, r2]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d006      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e028      	b.n	8003ab8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	210e      	movs	r1, #14
 8003a72:	438a      	bics	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	438a      	bics	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	2101      	movs	r1, #1
 8003a90:	4091      	lsls	r1, r2
 8003a92:	000a      	movs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2221      	movs	r2, #33	; 0x21
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	0010      	movs	r0, r2
 8003ab6:	4798      	blx	r3
    }
  }
  return status;
 8003ab8:	230f      	movs	r3, #15
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	781b      	ldrb	r3, [r3, #0]
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad6:	e155      	b.n	8003d84 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4091      	lsls	r1, r2
 8003ae2:	000a      	movs	r2, r1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d100      	bne.n	8003af0 <HAL_GPIO_Init+0x28>
 8003aee:	e146      	b.n	8003d7e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2203      	movs	r2, #3
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d005      	beq.n	8003b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d130      	bne.n	8003b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	409a      	lsls	r2, r3
 8003b16:	0013      	movs	r3, r2
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3e:	2201      	movs	r2, #1
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	43da      	mvns	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	2201      	movs	r2, #1
 8003b56:	401a      	ands	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	0013      	movs	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d017      	beq.n	8003ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	409a      	lsls	r2, r3
 8003b84:	0013      	movs	r3, r2
 8003b86:	43da      	mvns	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	0013      	movs	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d123      	bne.n	8003bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	08da      	lsrs	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3208      	adds	r2, #8
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	58d3      	ldr	r3, [r2, r3]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	0013      	movs	r3, r2
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2107      	movs	r1, #7
 8003bde:	400b      	ands	r3, r1
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	409a      	lsls	r2, r3
 8003be4:	0013      	movs	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	6939      	ldr	r1, [r7, #16]
 8003bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	409a      	lsls	r2, r3
 8003c08:	0013      	movs	r3, r2
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2203      	movs	r2, #3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	0013      	movs	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	4013      	ands	r3, r2
 8003c38:	d100      	bne.n	8003c3c <HAL_GPIO_Init+0x174>
 8003c3a:	e0a0      	b.n	8003d7e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3c:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <HAL_GPIO_Init+0x2d4>)
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_GPIO_Init+0x2d4>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	619a      	str	r2, [r3, #24]
 8003c48:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_GPIO_Init+0x2d4>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c54:	4a52      	ldr	r2, [pc, #328]	; (8003da0 <HAL_GPIO_Init+0x2d8>)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	589b      	ldr	r3, [r3, r2]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4013      	ands	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	0013      	movs	r3, r2
 8003c70:	43da      	mvns	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	2390      	movs	r3, #144	; 0x90
 8003c7c:	05db      	lsls	r3, r3, #23
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d019      	beq.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a47      	ldr	r2, [pc, #284]	; (8003da4 <HAL_GPIO_Init+0x2dc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0x1ea>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a46      	ldr	r2, [pc, #280]	; (8003da8 <HAL_GPIO_Init+0x2e0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00d      	beq.n	8003cae <HAL_GPIO_Init+0x1e6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a45      	ldr	r2, [pc, #276]	; (8003dac <HAL_GPIO_Init+0x2e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x1e2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a44      	ldr	r2, [pc, #272]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_GPIO_Init+0x1de>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	e008      	b.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003caa:	2303      	movs	r3, #3
 8003cac:	e004      	b.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e002      	b.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	2103      	movs	r1, #3
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	4093      	lsls	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cc8:	4935      	ldr	r1, [pc, #212]	; (8003da0 <HAL_GPIO_Init+0x2d8>)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	3302      	adds	r3, #2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	035b      	lsls	r3, r3, #13
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	039b      	lsls	r3, r3, #14
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3301      	adds	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	40da      	lsrs	r2, r3
 8003d8c:	1e13      	subs	r3, r2, #0
 8003d8e:	d000      	beq.n	8003d92 <HAL_GPIO_Init+0x2ca>
 8003d90:	e6a2      	b.n	8003ad8 <HAL_GPIO_Init+0x10>
  } 
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b006      	add	sp, #24
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40010000 	.word	0x40010000
 8003da4:	48000400 	.word	0x48000400
 8003da8:	48000800 	.word	0x48000800
 8003dac:	48000c00 	.word	0x48000c00
 8003db0:	48001000 	.word	0x48001000
 8003db4:	40010400 	.word	0x40010400

08003db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	0008      	movs	r0, r1
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	1cbb      	adds	r3, r7, #2
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	1c7b      	adds	r3, r7, #1
 8003dcc:	1c0a      	adds	r2, r1, #0
 8003dce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd0:	1c7b      	adds	r3, r7, #1
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd8:	1cbb      	adds	r3, r7, #2
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003de0:	e003      	b.n	8003dea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003de2:	1cbb      	adds	r3, r7, #2
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e082      	b.n	8003f0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2241      	movs	r2, #65	; 0x41
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff fb9d 	bl	800355c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2241      	movs	r2, #65	; 0x41
 8003e26:	2124      	movs	r1, #36	; 0x24
 8003e28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	438a      	bics	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_I2C_Init+0x120>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4931      	ldr	r1, [pc, #196]	; (8003f18 <HAL_I2C_Init+0x124>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d108      	bne.n	8003e72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0209      	lsls	r1, r1, #8
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	e007      	b.n	8003e82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2184      	movs	r1, #132	; 0x84
 8003e7c:	0209      	lsls	r1, r1, #8
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d104      	bne.n	8003e94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	491f      	ldr	r1, [pc, #124]	; (8003f1c <HAL_I2C_Init+0x128>)
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	491a      	ldr	r1, [pc, #104]	; (8003f18 <HAL_I2C_Init+0x124>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69d9      	ldr	r1, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2241      	movs	r2, #65	; 0x41
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2242      	movs	r2, #66	; 0x42
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	f0ffffff 	.word	0xf0ffffff
 8003f18:	ffff7fff 	.word	0xffff7fff
 8003f1c:	02008000 	.word	0x02008000

08003f20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	000c      	movs	r4, r1
 8003f2a:	0010      	movs	r0, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	230a      	movs	r3, #10
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	1c22      	adds	r2, r4, #0
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	2308      	movs	r3, #8
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	1c02      	adds	r2, r0, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	1dbb      	adds	r3, r7, #6
 8003f40:	1c0a      	adds	r2, r1, #0
 8003f42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2241      	movs	r2, #65	; 0x41
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d000      	beq.n	8003f52 <HAL_I2C_Mem_Write+0x32>
 8003f50:	e10c      	b.n	800416c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <HAL_I2C_Mem_Write+0x42>
 8003f58:	232c      	movs	r3, #44	; 0x2c
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0ff      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	5c9b      	ldrb	r3, [r3, r2]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_I2C_Mem_Write+0x5c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0f8      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2240      	movs	r2, #64	; 0x40
 8003f80:	2101      	movs	r1, #1
 8003f82:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f84:	f7ff fc3a 	bl	80037fc <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	0219      	lsls	r1, r3, #8
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2319      	movs	r3, #25
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f000 fc25 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0e3      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2241      	movs	r2, #65	; 0x41
 8003faa:	2121      	movs	r1, #33	; 0x21
 8003fac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2242      	movs	r2, #66	; 0x42
 8003fb2:	2140      	movs	r1, #64	; 0x40
 8003fb4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	222c      	movs	r2, #44	; 0x2c
 8003fc6:	18ba      	adds	r2, r7, r2
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd2:	1dbb      	adds	r3, r7, #6
 8003fd4:	881c      	ldrh	r4, [r3, #0]
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	881a      	ldrh	r2, [r3, #0]
 8003fdc:	230a      	movs	r3, #10
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	8819      	ldrh	r1, [r3, #0]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0023      	movs	r3, r4
 8003fee:	f000 fb13 	bl	8004618 <I2C_RequestMemoryWrite>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0b5      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2bff      	cmp	r3, #255	; 0xff
 800400a:	d911      	bls.n	8004030 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	b2da      	uxtb	r2, r3
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	045c      	lsls	r4, r3, #17
 800401c:	230a      	movs	r3, #10
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	8819      	ldrh	r1, [r3, #0]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	2300      	movs	r3, #0
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	0023      	movs	r3, r4
 800402a:	f000 fdb5 	bl	8004b98 <I2C_TransferConfig>
 800402e:	e012      	b.n	8004056 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	b2da      	uxtb	r2, r3
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	049c      	lsls	r4, r3, #18
 8004044:	230a      	movs	r3, #10
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	8819      	ldrh	r1, [r3, #0]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	0023      	movs	r3, r4
 8004052:	f000 fda1 	bl	8004b98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 fc11 	bl	8004884 <I2C_WaitOnTXISFlagUntilTimeout>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e081      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03a      	beq.n	800411a <HAL_I2C_Mem_Write+0x1fa>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d136      	bne.n	800411a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	0013      	movs	r3, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	f000 fb95 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e053      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2bff      	cmp	r3, #255	; 0xff
 80040ce:	d911      	bls.n	80040f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	22ff      	movs	r2, #255	; 0xff
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	045c      	lsls	r4, r3, #17
 80040e0:	230a      	movs	r3, #10
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	8819      	ldrh	r1, [r3, #0]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	2300      	movs	r3, #0
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	0023      	movs	r3, r4
 80040ee:	f000 fd53 	bl	8004b98 <I2C_TransferConfig>
 80040f2:	e012      	b.n	800411a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	b2da      	uxtb	r2, r3
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	049c      	lsls	r4, r3, #18
 8004108:	230a      	movs	r3, #10
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	8819      	ldrh	r1, [r3, #0]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	0023      	movs	r3, r4
 8004116:	f000 fd3f 	bl	8004b98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d198      	bne.n	8004056 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 fbf0 	bl	8004910 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e01a      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2220      	movs	r2, #32
 800413e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	490b      	ldr	r1, [pc, #44]	; (8004178 <HAL_I2C_Mem_Write+0x258>)
 800414c:	400a      	ands	r2, r1
 800414e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	2120      	movs	r1, #32
 8004156:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2242      	movs	r2, #66	; 0x42
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b007      	add	sp, #28
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	fe00e800 	.word	0xfe00e800

0800417c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	000c      	movs	r4, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	230a      	movs	r3, #10
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	1c22      	adds	r2, r4, #0
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	2308      	movs	r3, #8
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	1c02      	adds	r2, r0, #0
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	1c0a      	adds	r2, r1, #0
 800419e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2241      	movs	r2, #65	; 0x41
 80041a4:	5c9b      	ldrb	r3, [r3, r2]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d000      	beq.n	80041ae <HAL_I2C_Mem_Read+0x32>
 80041ac:	e110      	b.n	80043d0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_I2C_Mem_Read+0x42>
 80041b4:	232c      	movs	r3, #44	; 0x2c
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2280      	movs	r2, #128	; 0x80
 80041c2:	0092      	lsls	r2, r2, #2
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e103      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x5c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0fc      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041e0:	f7ff fb0c 	bl	80037fc <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	0219      	lsls	r1, r3, #8
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2319      	movs	r3, #25
 80041f4:	2201      	movs	r2, #1
 80041f6:	f000 faf7 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0e7      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2241      	movs	r2, #65	; 0x41
 8004206:	2122      	movs	r1, #34	; 0x22
 8004208:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2242      	movs	r2, #66	; 0x42
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	222c      	movs	r2, #44	; 0x2c
 8004222:	18ba      	adds	r2, r7, r2
 8004224:	8812      	ldrh	r2, [r2, #0]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800422e:	1dbb      	adds	r3, r7, #6
 8004230:	881c      	ldrh	r4, [r3, #0]
 8004232:	2308      	movs	r3, #8
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	881a      	ldrh	r2, [r3, #0]
 8004238:	230a      	movs	r3, #10
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	8819      	ldrh	r1, [r3, #0]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	0023      	movs	r3, r4
 800424a:	f000 fa49 	bl	80046e0 <I2C_RequestMemoryRead>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d005      	beq.n	800425e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2240      	movs	r2, #64	; 0x40
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0b9      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2bff      	cmp	r3, #255	; 0xff
 8004266:	d911      	bls.n	800428c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	b2da      	uxtb	r2, r3
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	045c      	lsls	r4, r3, #17
 8004278:	230a      	movs	r3, #10
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	8819      	ldrh	r1, [r3, #0]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	4b56      	ldr	r3, [pc, #344]	; (80043dc <HAL_I2C_Mem_Read+0x260>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0023      	movs	r3, r4
 8004286:	f000 fc87 	bl	8004b98 <I2C_TransferConfig>
 800428a:	e012      	b.n	80042b2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	b2da      	uxtb	r2, r3
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	049c      	lsls	r4, r3, #18
 80042a0:	230a      	movs	r3, #10
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	8819      	ldrh	r1, [r3, #0]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_I2C_Mem_Read+0x260>)
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	0023      	movs	r3, r4
 80042ae:	f000 fc73 	bl	8004b98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	0013      	movs	r3, r2
 80042bc:	2200      	movs	r2, #0
 80042be:	2104      	movs	r1, #4
 80042c0:	f000 fa92 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d001      	beq.n	80042cc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e082      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03a      	beq.n	800437e <HAL_I2C_Mem_Read+0x202>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d136      	bne.n	800437e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	0013      	movs	r3, r2
 800431a:	2200      	movs	r2, #0
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	f000 fa63 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e053      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2bff      	cmp	r3, #255	; 0xff
 8004332:	d911      	bls.n	8004358 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	22ff      	movs	r2, #255	; 0xff
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	b2da      	uxtb	r2, r3
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	045c      	lsls	r4, r3, #17
 8004344:	230a      	movs	r3, #10
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	8819      	ldrh	r1, [r3, #0]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	0023      	movs	r3, r4
 8004352:	f000 fc21 	bl	8004b98 <I2C_TransferConfig>
 8004356:	e012      	b.n	800437e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	b2da      	uxtb	r2, r3
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	049c      	lsls	r4, r3, #18
 800436c:	230a      	movs	r3, #10
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	8819      	ldrh	r1, [r3, #0]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	0023      	movs	r3, r4
 800437a:	f000 fc0d 	bl	8004b98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d194      	bne.n	80042b2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fabe 	bl	8004910 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e01a      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2220      	movs	r2, #32
 80043a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	490c      	ldr	r1, [pc, #48]	; (80043e0 <HAL_I2C_Mem_Read+0x264>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2241      	movs	r2, #65	; 0x41
 80043b8:	2120      	movs	r1, #32
 80043ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2242      	movs	r2, #66	; 0x42
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	2100      	movs	r1, #0
 80043ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b007      	add	sp, #28
 80043d8:	bd90      	pop	{r4, r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	80002400 	.word	0x80002400
 80043e0:	fe00e800 	.word	0xfe00e800

080043e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	230a      	movs	r3, #10
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	1c0a      	adds	r2, r1, #0
 80043f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2241      	movs	r2, #65	; 0x41
 8004400:	5c9b      	ldrb	r3, [r3, r2]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d000      	beq.n	800440a <HAL_I2C_IsDeviceReady+0x26>
 8004408:	e0fd      	b.n	8004606 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	401a      	ands	r2, r3
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	429a      	cmp	r2, r3
 800441c:	d101      	bne.n	8004422 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
 8004420:	e0f2      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	5c9b      	ldrb	r3, [r3, r2]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_I2C_IsDeviceReady+0x4c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0eb      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2240      	movs	r2, #64	; 0x40
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2241      	movs	r2, #65	; 0x41
 800443c:	2124      	movs	r1, #36	; 0x24
 800443e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_I2C_IsDeviceReady+0x7a>
 800444e:	230a      	movs	r3, #10
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	059b      	lsls	r3, r3, #22
 8004456:	0d9b      	lsrs	r3, r3, #22
 8004458:	4a6d      	ldr	r2, [pc, #436]	; (8004610 <HAL_I2C_IsDeviceReady+0x22c>)
 800445a:	431a      	orrs	r2, r3
 800445c:	e006      	b.n	800446c <HAL_I2C_IsDeviceReady+0x88>
 800445e:	230a      	movs	r3, #10
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	059b      	lsls	r3, r3, #22
 8004466:	0d9b      	lsrs	r3, r3, #22
 8004468:	4a6a      	ldr	r2, [pc, #424]	; (8004614 <HAL_I2C_IsDeviceReady+0x230>)
 800446a:	431a      	orrs	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004472:	f7ff f9c3 	bl	80037fc <HAL_GetTick>
 8004476:	0003      	movs	r3, r0
 8004478:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2220      	movs	r2, #32
 8004482:	4013      	ands	r3, r2
 8004484:	3b20      	subs	r3, #32
 8004486:	425a      	negs	r2, r3
 8004488:	4153      	adcs	r3, r2
 800448a:	b2da      	uxtb	r2, r3
 800448c:	231f      	movs	r3, #31
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2210      	movs	r2, #16
 800449a:	4013      	ands	r3, r2
 800449c:	3b10      	subs	r3, #16
 800449e:	425a      	negs	r2, r3
 80044a0:	4153      	adcs	r3, r2
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	231e      	movs	r3, #30
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044aa:	e035      	b.n	8004518 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	d01a      	beq.n	80044e8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7ff f9a3 	bl	80037fc <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <HAL_I2C_IsDeviceReady+0xe4>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2241      	movs	r2, #65	; 0x41
 80044cc:	2120      	movs	r1, #32
 80044ce:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	2220      	movs	r2, #32
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2240      	movs	r2, #64	; 0x40
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e08f      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2220      	movs	r2, #32
 80044f0:	4013      	ands	r3, r2
 80044f2:	3b20      	subs	r3, #32
 80044f4:	425a      	negs	r2, r3
 80044f6:	4153      	adcs	r3, r2
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	231f      	movs	r3, #31
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2210      	movs	r2, #16
 8004508:	4013      	ands	r3, r2
 800450a:	3b10      	subs	r3, #16
 800450c:	425a      	negs	r2, r3
 800450e:	4153      	adcs	r3, r2
 8004510:	b2da      	uxtb	r2, r3
 8004512:	231e      	movs	r3, #30
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004518:	231f      	movs	r3, #31
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <HAL_I2C_IsDeviceReady+0x148>
 8004522:	231e      	movs	r3, #30
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0bf      	beq.n	80044ac <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2210      	movs	r2, #16
 8004534:	4013      	ands	r3, r2
 8004536:	2b10      	cmp	r3, #16
 8004538:	d01a      	beq.n	8004570 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	0013      	movs	r3, r2
 8004544:	2200      	movs	r2, #0
 8004546:	2120      	movs	r1, #32
 8004548:	f000 f94e 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e059      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2220      	movs	r2, #32
 800455a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2241      	movs	r2, #65	; 0x41
 8004560:	2120      	movs	r1, #32
 8004562:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e04b      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0013      	movs	r3, r2
 800457a:	2200      	movs	r2, #0
 800457c:	2120      	movs	r1, #32
 800457e:	f000 f933 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e03e      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2220      	movs	r2, #32
 8004598:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d119      	bne.n	80045d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	01c9      	lsls	r1, r1, #7
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	0013      	movs	r3, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	2120      	movs	r1, #32
 80045c2:	f000 f911 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e01c      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2220      	movs	r2, #32
 80045d4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d900      	bls.n	80045e6 <HAL_I2C_IsDeviceReady+0x202>
 80045e4:	e72f      	b.n	8004446 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	2120      	movs	r1, #32
 80045ec:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2220      	movs	r2, #32
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2240      	movs	r2, #64	; 0x40
 80045fe:	2100      	movs	r1, #0
 8004600:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b008      	add	sp, #32
 800460e:	bd80      	pop	{r7, pc}
 8004610:	02002000 	.word	0x02002000
 8004614:	02002800 	.word	0x02002800

08004618 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004618:	b5b0      	push	{r4, r5, r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	000c      	movs	r4, r1
 8004622:	0010      	movs	r0, r2
 8004624:	0019      	movs	r1, r3
 8004626:	250a      	movs	r5, #10
 8004628:	197b      	adds	r3, r7, r5
 800462a:	1c22      	adds	r2, r4, #0
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	2308      	movs	r3, #8
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	1c02      	adds	r2, r0, #0
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	1dbb      	adds	r3, r7, #6
 8004638:	1c0a      	adds	r2, r1, #0
 800463a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800463c:	1dbb      	adds	r3, r7, #6
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	045c      	lsls	r4, r3, #17
 8004646:	197b      	adds	r3, r7, r5
 8004648:	8819      	ldrh	r1, [r3, #0]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <I2C_RequestMemoryWrite+0xc4>)
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	0023      	movs	r3, r4
 8004652:	f000 faa1 	bl	8004b98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f911 	bl	8004884 <I2C_WaitOnTXISFlagUntilTimeout>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d001      	beq.n	800466a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e033      	b.n	80046d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800466a:	1dbb      	adds	r3, r7, #6
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004672:	2308      	movs	r3, #8
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
 8004680:	e019      	b.n	80046b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004682:	2308      	movs	r3, #8
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	b29b      	uxth	r3, r3
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	6a39      	ldr	r1, [r7, #32]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 f8f2 	bl	8004884 <I2C_WaitOnTXISFlagUntilTimeout>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d001      	beq.n	80046a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e014      	b.n	80046d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046a8:	2308      	movs	r3, #8
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	0013      	movs	r3, r2
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	f000 f890 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d001      	beq.n	80046d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b004      	add	sp, #16
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	80002000 	.word	0x80002000

080046e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	000c      	movs	r4, r1
 80046ea:	0010      	movs	r0, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	250a      	movs	r5, #10
 80046f0:	197b      	adds	r3, r7, r5
 80046f2:	1c22      	adds	r2, r4, #0
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	2308      	movs	r3, #8
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	1c02      	adds	r2, r0, #0
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	1dbb      	adds	r3, r7, #6
 8004700:	1c0a      	adds	r2, r1, #0
 8004702:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004704:	1dbb      	adds	r3, r7, #6
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	197b      	adds	r3, r7, r5
 800470c:	8819      	ldrh	r1, [r3, #0]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <I2C_RequestMemoryRead+0xc0>)
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	f000 fa3f 	bl	8004b98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 f8af 	bl	8004884 <I2C_WaitOnTXISFlagUntilTimeout>
 8004726:	1e03      	subs	r3, r0, #0
 8004728:	d001      	beq.n	800472e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e033      	b.n	8004796 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472e:	1dbb      	adds	r3, r7, #6
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004736:	2308      	movs	r3, #8
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
 8004744:	e019      	b.n	800477a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004746:	2308      	movs	r3, #8
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	b29b      	uxth	r3, r3
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	6a39      	ldr	r1, [r7, #32]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	0018      	movs	r0, r3
 8004760:	f000 f890 	bl	8004884 <I2C_WaitOnTXISFlagUntilTimeout>
 8004764:	1e03      	subs	r3, r0, #0
 8004766:	d001      	beq.n	800476c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e014      	b.n	8004796 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800476c:	2308      	movs	r3, #8
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	0013      	movs	r3, r2
 8004784:	2200      	movs	r2, #0
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	f000 f82e 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 800478c:	1e03      	subs	r3, r0, #0
 800478e:	d001      	beq.n	8004794 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bdb0      	pop	{r4, r5, r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	80002000 	.word	0x80002000

080047a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d103      	bne.n	80047c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d007      	beq.n	80047e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2101      	movs	r1, #1
 80047dc:	430a      	orrs	r2, r1
 80047de:	619a      	str	r2, [r3, #24]
  }
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	1dfb      	adds	r3, r7, #7
 80047f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f8:	e030      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	d02d      	beq.n	800485c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe fffc 	bl	80037fc <HAL_GetTick>
 8004804:	0002      	movs	r2, r0
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d122      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	425a      	negs	r2, r3
 8004826:	4153      	adcs	r3, r2
 8004828:	b2db      	uxtb	r3, r3
 800482a:	001a      	movs	r2, r3
 800482c:	1dfb      	adds	r3, r7, #7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d113      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	2220      	movs	r2, #32
 800483a:	431a      	orrs	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2241      	movs	r2, #65	; 0x41
 8004844:	2120      	movs	r1, #32
 8004846:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2242      	movs	r2, #66	; 0x42
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e00f      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	425a      	negs	r2, r3
 800486c:	4153      	adcs	r3, r2
 800486e:	b2db      	uxtb	r3, r3
 8004870:	001a      	movs	r2, r3
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d0bf      	beq.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b004      	add	sp, #16
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004890:	e032      	b.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f87d 	bl	8004998 <I2C_IsErrorOccurred>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e030      	b.n	8004908 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	d025      	beq.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe ffa6 	bl	80037fc <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11a      	bne.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2202      	movs	r2, #2
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d013      	beq.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	2220      	movs	r2, #32
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2241      	movs	r2, #65	; 0x41
 80048e0:	2120      	movs	r1, #32
 80048e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2242      	movs	r2, #66	; 0x42
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d1c5      	bne.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800491c:	e02f      	b.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f837 	bl	8004998 <I2C_IsErrorOccurred>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e02d      	b.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe ff63 	bl	80037fc <HAL_GetTick>
 8004936:	0002      	movs	r2, r0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11a      	bne.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2220      	movs	r2, #32
 8004950:	4013      	ands	r3, r2
 8004952:	2b20      	cmp	r3, #32
 8004954:	d013      	beq.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	2220      	movs	r2, #32
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2241      	movs	r2, #65	; 0x41
 8004966:	2120      	movs	r1, #32
 8004968:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2242      	movs	r2, #66	; 0x42
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	2100      	movs	r1, #0
 8004978:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e007      	b.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2220      	movs	r2, #32
 8004986:	4013      	ands	r3, r2
 8004988:	2b20      	cmp	r3, #32
 800498a:	d1c8      	bne.n	800491e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b004      	add	sp, #16
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b08b      	sub	sp, #44	; 0x2c
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2327      	movs	r3, #39	; 0x27
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2210      	movs	r2, #16
 80049c0:	4013      	ands	r3, r2
 80049c2:	d100      	bne.n	80049c6 <I2C_IsErrorOccurred+0x2e>
 80049c4:	e082      	b.n	8004acc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2210      	movs	r2, #16
 80049cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049ce:	e060      	b.n	8004a92 <I2C_IsErrorOccurred+0xfa>
 80049d0:	2427      	movs	r4, #39	; 0x27
 80049d2:	193b      	adds	r3, r7, r4
 80049d4:	193a      	adds	r2, r7, r4
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3301      	adds	r3, #1
 80049de:	d058      	beq.n	8004a92 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe ff0c 	bl	80037fc <HAL_GetTick>
 80049e4:	0002      	movs	r2, r0
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d306      	bcc.n	80049fe <I2C_IsErrorOccurred+0x66>
 80049f0:	193b      	adds	r3, r7, r4
 80049f2:	193a      	adds	r2, r7, r4
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d149      	bne.n	8004a92 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4013      	ands	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a0c:	2013      	movs	r0, #19
 8004a0e:	183b      	adds	r3, r7, r0
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	2142      	movs	r1, #66	; 0x42
 8004a14:	5c52      	ldrb	r2, [r2, r1]
 8004a16:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	401a      	ands	r2, r3
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d126      	bne.n	8004a7a <I2C_IsErrorOccurred+0xe2>
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d021      	beq.n	8004a7a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004a36:	183b      	adds	r3, r7, r0
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d01d      	beq.n	8004a7a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	01c9      	lsls	r1, r1, #7
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a50:	f7fe fed4 	bl	80037fc <HAL_GetTick>
 8004a54:	0003      	movs	r3, r0
 8004a56:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a58:	e00f      	b.n	8004a7a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a5a:	f7fe fecf 	bl	80037fc <HAL_GetTick>
 8004a5e:	0002      	movs	r2, r0
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b19      	cmp	r3, #25
 8004a66:	d908      	bls.n	8004a7a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a70:	2327      	movs	r3, #39	; 0x27
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]

              break;
 8004a78:	e00b      	b.n	8004a92 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2220      	movs	r2, #32
 8004a82:	4013      	ands	r3, r2
 8004a84:	2127      	movs	r1, #39	; 0x27
 8004a86:	187a      	adds	r2, r7, r1
 8004a88:	1879      	adds	r1, r7, r1
 8004a8a:	7809      	ldrb	r1, [r1, #0]
 8004a8c:	7011      	strb	r1, [r2, #0]
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d1e3      	bne.n	8004a5a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d004      	beq.n	8004aaa <I2C_IsErrorOccurred+0x112>
 8004aa0:	2327      	movs	r3, #39	; 0x27
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d092      	beq.n	80049d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004aaa:	2327      	movs	r3, #39	; 0x27
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ac4:	2327      	movs	r3, #39	; 0x27
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d00c      	beq.n	8004af8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2280      	movs	r2, #128	; 0x80
 8004aec:	0052      	lsls	r2, r2, #1
 8004aee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004af0:	2327      	movs	r3, #39	; 0x27
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	d00c      	beq.n	8004b1c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2208      	movs	r2, #8
 8004b06:	4313      	orrs	r3, r2
 8004b08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	00d2      	lsls	r2, r2, #3
 8004b12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b14:	2327      	movs	r3, #39	; 0x27
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	d00c      	beq.n	8004b40 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b38:	2327      	movs	r3, #39	; 0x27
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004b40:	2327      	movs	r3, #39	; 0x27
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01d      	beq.n	8004b86 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fe29 	bl	80047a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	490d      	ldr	r1, [pc, #52]	; (8004b94 <I2C_IsErrorOccurred+0x1fc>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2241      	movs	r2, #65	; 0x41
 8004b72:	2120      	movs	r1, #32
 8004b74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2242      	movs	r2, #66	; 0x42
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004b86:	2327      	movs	r3, #39	; 0x27
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b00b      	add	sp, #44	; 0x2c
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	fe00e800 	.word	0xfe00e800

08004b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	0008      	movs	r0, r1
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	240a      	movs	r4, #10
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	1c02      	adds	r2, r0, #0
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	2009      	movs	r0, #9
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	1c0a      	adds	r2, r1, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bb6:	193b      	adds	r3, r7, r4
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	059b      	lsls	r3, r3, #22
 8004bbc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	0419      	lsls	r1, r3, #16
 8004bc4:	23ff      	movs	r3, #255	; 0xff
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004be2:	0d51      	lsrs	r1, r2, #21
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	00d2      	lsls	r2, r2, #3
 8004be8:	400a      	ands	r2, r1
 8004bea:	4907      	ldr	r1, [pc, #28]	; (8004c08 <I2C_TransferConfig+0x70>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	43d2      	mvns	r2, r2
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b007      	add	sp, #28
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	03ff63ff 	.word	0x03ff63ff

08004c0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2241      	movs	r2, #65	; 0x41
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d138      	bne.n	8004c94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2240      	movs	r2, #64	; 0x40
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e032      	b.n	8004c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	2101      	movs	r1, #1
 8004c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2241      	movs	r2, #65	; 0x41
 8004c3c:	2124      	movs	r1, #36	; 0x24
 8004c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4911      	ldr	r1, [pc, #68]	; (8004ca0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2241      	movs	r2, #65	; 0x41
 8004c84:	2120      	movs	r1, #32
 8004c86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	ffffefff 	.word	0xffffefff

08004ca4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2241      	movs	r2, #65	; 0x41
 8004cb2:	5c9b      	ldrb	r3, [r3, r2]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d139      	bne.n	8004d2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e033      	b.n	8004d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2240      	movs	r2, #64	; 0x40
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2241      	movs	r2, #65	; 0x41
 8004cd4:	2124      	movs	r1, #36	; 0x24
 8004cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2241      	movs	r2, #65	; 0x41
 8004d1e:	2120      	movs	r1, #32
 8004d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2240      	movs	r2, #64	; 0x40
 8004d26:	2100      	movs	r1, #0
 8004d28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	fffff0ff 	.word	0xfffff0ff

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f000 fb76 	bl	800543c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x20>
 8004d5a:	e08e      	b.n	8004e7a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d5c:	4bc5      	ldr	r3, [pc, #788]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	220c      	movs	r2, #12
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d00e      	beq.n	8004d86 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d68:	4bc2      	ldr	r3, [pc, #776]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	220c      	movs	r2, #12
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d117      	bne.n	8004da4 <HAL_RCC_OscConfig+0x68>
 8004d74:	4bbf      	ldr	r3, [pc, #764]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	23c0      	movs	r3, #192	; 0xc0
 8004d7a:	025b      	lsls	r3, r3, #9
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10e      	bne.n	8004da4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d86:	4bbb      	ldr	r3, [pc, #748]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d100      	bne.n	8004d94 <HAL_RCC_OscConfig+0x58>
 8004d92:	e071      	b.n	8004e78 <HAL_RCC_OscConfig+0x13c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d000      	beq.n	8004d9e <HAL_RCC_OscConfig+0x62>
 8004d9c:	e06c      	b.n	8004e78 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f000 fb4c 	bl	800543c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_OscConfig+0x80>
 8004dac:	4bb1      	ldr	r3, [pc, #708]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4bb0      	ldr	r3, [pc, #704]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	0249      	lsls	r1, r1, #9
 8004db6:	430a      	orrs	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e02f      	b.n	8004e1c <HAL_RCC_OscConfig+0xe0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10c      	bne.n	8004dde <HAL_RCC_OscConfig+0xa2>
 8004dc4:	4bab      	ldr	r3, [pc, #684]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4baa      	ldr	r3, [pc, #680]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dca:	49ab      	ldr	r1, [pc, #684]	; (8005078 <HAL_RCC_OscConfig+0x33c>)
 8004dcc:	400a      	ands	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	4ba8      	ldr	r3, [pc, #672]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4ba7      	ldr	r3, [pc, #668]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dd6:	49a9      	ldr	r1, [pc, #676]	; (800507c <HAL_RCC_OscConfig+0x340>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e01e      	b.n	8004e1c <HAL_RCC_OscConfig+0xe0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d10e      	bne.n	8004e04 <HAL_RCC_OscConfig+0xc8>
 8004de6:	4ba3      	ldr	r3, [pc, #652]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4ba2      	ldr	r3, [pc, #648]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	02c9      	lsls	r1, r1, #11
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	4b9f      	ldr	r3, [pc, #636]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b9e      	ldr	r3, [pc, #632]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	0249      	lsls	r1, r1, #9
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0xe0>
 8004e04:	4b9b      	ldr	r3, [pc, #620]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b9a      	ldr	r3, [pc, #616]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e0a:	499b      	ldr	r1, [pc, #620]	; (8005078 <HAL_RCC_OscConfig+0x33c>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	4b98      	ldr	r3, [pc, #608]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b97      	ldr	r3, [pc, #604]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e16:	4999      	ldr	r1, [pc, #612]	; (800507c <HAL_RCC_OscConfig+0x340>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d014      	beq.n	8004e4e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fe fcea 	bl	80037fc <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e2e:	f7fe fce5 	bl	80037fc <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b64      	cmp	r3, #100	; 0x64
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e2fd      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e40:	4b8c      	ldr	r3, [pc, #560]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	029b      	lsls	r3, r3, #10
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCC_OscConfig+0xf2>
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4e:	f7fe fcd5 	bl	80037fc <HAL_GetTick>
 8004e52:	0003      	movs	r3, r0
 8004e54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fe fcd0 	bl	80037fc <HAL_GetTick>
 8004e5c:	0002      	movs	r2, r0
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e2e8      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	4b82      	ldr	r3, [pc, #520]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	4013      	ands	r3, r2
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x11c>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_RCC_OscConfig+0x14a>
 8004e84:	e06c      	b.n	8004f60 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e86:	4b7b      	ldr	r3, [pc, #492]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	220c      	movs	r2, #12
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e90:	4b78      	ldr	r3, [pc, #480]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	220c      	movs	r2, #12
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d11f      	bne.n	8004edc <HAL_RCC_OscConfig+0x1a0>
 8004e9c:	4b75      	ldr	r3, [pc, #468]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	23c0      	movs	r3, #192	; 0xc0
 8004ea2:	025b      	lsls	r3, r3, #9
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d116      	bne.n	8004edc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	4b71      	ldr	r3, [pc, #452]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x188>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e2bb      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec4:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	22f8      	movs	r2, #248	; 0xf8
 8004eca:	4393      	bics	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00da      	lsls	r2, r3, #3
 8004ed4:	4b67      	ldr	r3, [pc, #412]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	e041      	b.n	8004f60 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d024      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee4:	4b63      	ldr	r3, [pc, #396]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004eea:	2101      	movs	r1, #1
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fc84 	bl	80037fc <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004efa:	f7fe fc7f 	bl	80037fc <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e297      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d0f1      	beq.n	8004efa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b57      	ldr	r3, [pc, #348]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	22f8      	movs	r2, #248	; 0xf8
 8004f1c:	4393      	bics	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	00da      	lsls	r2, r3, #3
 8004f26:	4b53      	ldr	r3, [pc, #332]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e018      	b.n	8004f60 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b50      	ldr	r3, [pc, #320]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f34:	2101      	movs	r1, #1
 8004f36:	438a      	bics	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fe fc5f 	bl	80037fc <HAL_GetTick>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f44:	f7fe fc5a 	bl	80037fc <HAL_GetTick>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e272      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d1f1      	bne.n	8004f44 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2208      	movs	r2, #8
 8004f66:	4013      	ands	r3, r2
 8004f68:	d036      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d019      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f72:	4b40      	ldr	r3, [pc, #256]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f78:	2101      	movs	r1, #1
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7e:	f7fe fc3d 	bl	80037fc <HAL_GetTick>
 8004f82:	0003      	movs	r3, r0
 8004f84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fe fc38 	bl	80037fc <HAL_GetTick>
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e250      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d0f1      	beq.n	8004f88 <HAL_RCC_OscConfig+0x24c>
 8004fa4:	e018      	b.n	8004fd8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa6:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004faa:	4b32      	ldr	r3, [pc, #200]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004fac:	2101      	movs	r1, #1
 8004fae:	438a      	bics	r2, r1
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb2:	f7fe fc23 	bl	80037fc <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fbc:	f7fe fc1e 	bl	80037fc <HAL_GetTick>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e236      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d1f1      	bne.n	8004fbc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d100      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2a8>
 8004fe2:	e0b5      	b.n	8005150 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe4:	201f      	movs	r0, #31
 8004fe6:	183b      	adds	r3, r7, r0
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fec:	4b21      	ldr	r3, [pc, #132]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	055b      	lsls	r3, r3, #21
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d110      	bne.n	800501a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	0549      	lsls	r1, r1, #21
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	055b      	lsls	r3, r3, #21
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005014:	183b      	adds	r3, r7, r0
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501a:	4b19      	ldr	r3, [pc, #100]	; (8005080 <HAL_RCC_OscConfig+0x344>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4013      	ands	r3, r2
 8005024:	d11a      	bne.n	800505c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <HAL_RCC_OscConfig+0x344>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <HAL_RCC_OscConfig+0x344>)
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	0049      	lsls	r1, r1, #1
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005034:	f7fe fbe2 	bl	80037fc <HAL_GetTick>
 8005038:	0003      	movs	r3, r0
 800503a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fe fbdd 	bl	80037fc <HAL_GetTick>
 8005042:	0002      	movs	r2, r0
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	; 0x64
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e1f5      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x344>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4013      	ands	r3, r2
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10f      	bne.n	8005084 <HAL_RCC_OscConfig+0x348>
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <HAL_RCC_OscConfig+0x338>)
 800506a:	2101      	movs	r1, #1
 800506c:	430a      	orrs	r2, r1
 800506e:	621a      	str	r2, [r3, #32]
 8005070:	e036      	b.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	40021000 	.word	0x40021000
 8005078:	fffeffff 	.word	0xfffeffff
 800507c:	fffbffff 	.word	0xfffbffff
 8005080:	40007000 	.word	0x40007000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_OscConfig+0x36a>
 800508c:	4bca      	ldr	r3, [pc, #808]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	4bc9      	ldr	r3, [pc, #804]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005092:	2101      	movs	r1, #1
 8005094:	438a      	bics	r2, r1
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	4bc7      	ldr	r3, [pc, #796]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	4bc6      	ldr	r3, [pc, #792]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800509e:	2104      	movs	r1, #4
 80050a0:	438a      	bics	r2, r1
 80050a2:	621a      	str	r2, [r3, #32]
 80050a4:	e01c      	b.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x38c>
 80050ae:	4bc2      	ldr	r3, [pc, #776]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	4bc1      	ldr	r3, [pc, #772]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050b4:	2104      	movs	r1, #4
 80050b6:	430a      	orrs	r2, r1
 80050b8:	621a      	str	r2, [r3, #32]
 80050ba:	4bbf      	ldr	r3, [pc, #764]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	4bbe      	ldr	r3, [pc, #760]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050c0:	2101      	movs	r1, #1
 80050c2:	430a      	orrs	r2, r1
 80050c4:	621a      	str	r2, [r3, #32]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
 80050c8:	4bbb      	ldr	r3, [pc, #748]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	4bba      	ldr	r3, [pc, #744]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	438a      	bics	r2, r1
 80050d2:	621a      	str	r2, [r3, #32]
 80050d4:	4bb8      	ldr	r3, [pc, #736]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	4bb7      	ldr	r3, [pc, #732]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80050da:	2104      	movs	r1, #4
 80050dc:	438a      	bics	r2, r1
 80050de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d014      	beq.n	8005112 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e8:	f7fe fb88 	bl	80037fc <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	e009      	b.n	8005106 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fe fb83 	bl	80037fc <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	4aaf      	ldr	r2, [pc, #700]	; (80053bc <HAL_RCC_OscConfig+0x680>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e19a      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	4bac      	ldr	r3, [pc, #688]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2202      	movs	r2, #2
 800510c:	4013      	ands	r3, r2
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x3b6>
 8005110:	e013      	b.n	800513a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fe fb73 	bl	80037fc <HAL_GetTick>
 8005116:	0003      	movs	r3, r0
 8005118:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511a:	e009      	b.n	8005130 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fb6e 	bl	80037fc <HAL_GetTick>
 8005120:	0002      	movs	r2, r0
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	4aa5      	ldr	r2, [pc, #660]	; (80053bc <HAL_RCC_OscConfig+0x680>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e185      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	4ba1      	ldr	r3, [pc, #644]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	2202      	movs	r2, #2
 8005136:	4013      	ands	r3, r2
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800513a:	231f      	movs	r3, #31
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d105      	bne.n	8005150 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005144:	4b9c      	ldr	r3, [pc, #624]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	4b9b      	ldr	r3, [pc, #620]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800514a:	499d      	ldr	r1, [pc, #628]	; (80053c0 <HAL_RCC_OscConfig+0x684>)
 800514c:	400a      	ands	r2, r1
 800514e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2210      	movs	r2, #16
 8005156:	4013      	ands	r3, r2
 8005158:	d063      	beq.n	8005222 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d12a      	bne.n	80051b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005162:	4b95      	ldr	r3, [pc, #596]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005166:	4b94      	ldr	r3, [pc, #592]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005168:	2104      	movs	r1, #4
 800516a:	430a      	orrs	r2, r1
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800516e:	4b92      	ldr	r3, [pc, #584]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005172:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005174:	2101      	movs	r1, #1
 8005176:	430a      	orrs	r2, r1
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fe fb3f 	bl	80037fc <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005184:	f7fe fb3a 	bl	80037fc <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e152      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005196:	4b88      	ldr	r3, [pc, #544]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d0f1      	beq.n	8005184 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051a0:	4b85      	ldr	r3, [pc, #532]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	22f8      	movs	r2, #248	; 0xf8
 80051a6:	4393      	bics	r3, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	00da      	lsls	r2, r3, #3
 80051b0:	4b81      	ldr	r3, [pc, #516]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34
 80051b6:	e034      	b.n	8005222 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	3305      	adds	r3, #5
 80051be:	d111      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80051c0:	4b7d      	ldr	r3, [pc, #500]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	4b7c      	ldr	r3, [pc, #496]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051c6:	2104      	movs	r1, #4
 80051c8:	438a      	bics	r2, r1
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051cc:	4b7a      	ldr	r3, [pc, #488]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	22f8      	movs	r2, #248	; 0xf8
 80051d2:	4393      	bics	r3, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	00da      	lsls	r2, r3, #3
 80051dc:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051de:	430a      	orrs	r2, r1
 80051e0:	635a      	str	r2, [r3, #52]	; 0x34
 80051e2:	e01e      	b.n	8005222 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051e4:	4b74      	ldr	r3, [pc, #464]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	4b73      	ldr	r3, [pc, #460]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051ea:	2104      	movs	r1, #4
 80051ec:	430a      	orrs	r2, r1
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80051f0:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f4:	4b70      	ldr	r3, [pc, #448]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	438a      	bics	r2, r1
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fc:	f7fe fafe 	bl	80037fc <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005206:	f7fe faf9 	bl	80037fc <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e111      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005218:	4b67      	ldr	r3, [pc, #412]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	2202      	movs	r2, #2
 800521e:	4013      	ands	r3, r2
 8005220:	d1f1      	bne.n	8005206 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2220      	movs	r2, #32
 8005228:	4013      	ands	r3, r2
 800522a:	d05c      	beq.n	80052e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800522c:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	220c      	movs	r2, #12
 8005232:	4013      	ands	r3, r2
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d00e      	beq.n	8005256 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	220c      	movs	r2, #12
 800523e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005240:	2b08      	cmp	r3, #8
 8005242:	d114      	bne.n	800526e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005244:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	23c0      	movs	r3, #192	; 0xc0
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	401a      	ands	r2, r3
 800524e:	23c0      	movs	r3, #192	; 0xc0
 8005250:	025b      	lsls	r3, r3, #9
 8005252:	429a      	cmp	r2, r3
 8005254:	d10b      	bne.n	800526e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005256:	4b58      	ldr	r3, [pc, #352]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	4013      	ands	r3, r2
 8005260:	d040      	beq.n	80052e4 <HAL_RCC_OscConfig+0x5a8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d03c      	beq.n	80052e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0e6      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01b      	beq.n	80052ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005276:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527a:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	0249      	lsls	r1, r1, #9
 8005280:	430a      	orrs	r2, r1
 8005282:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7fe faba 	bl	80037fc <HAL_GetTick>
 8005288:	0003      	movs	r3, r0
 800528a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800528e:	f7fe fab5 	bl	80037fc <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0cd      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80052a0:	4b45      	ldr	r3, [pc, #276]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80052a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	4013      	ands	r3, r2
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x552>
 80052ac:	e01b      	b.n	80052e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80052ae:	4b42      	ldr	r3, [pc, #264]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80052b4:	4943      	ldr	r1, [pc, #268]	; (80053c4 <HAL_RCC_OscConfig+0x688>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fe fa9f 	bl	80037fc <HAL_GetTick>
 80052be:	0003      	movs	r3, r0
 80052c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c4:	f7fe fa9a 	bl	80037fc <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0b2      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80052d6:	4b38      	ldr	r3, [pc, #224]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80052d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x588>
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80052e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d100      	bne.n	80052f0 <HAL_RCC_OscConfig+0x5b4>
 80052ee:	e0a4      	b.n	800543a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	220c      	movs	r2, #12
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d100      	bne.n	80052fe <HAL_RCC_OscConfig+0x5c2>
 80052fc:	e078      	b.n	80053f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b02      	cmp	r3, #2
 8005304:	d14c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800530c:	492e      	ldr	r1, [pc, #184]	; (80053c8 <HAL_RCC_OscConfig+0x68c>)
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005312:	f7fe fa73 	bl	80037fc <HAL_GetTick>
 8005316:	0003      	movs	r3, r0
 8005318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531c:	f7fe fa6e 	bl	80037fc <HAL_GetTick>
 8005320:	0002      	movs	r2, r0
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e086      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	049b      	lsls	r3, r3, #18
 8005336:	4013      	ands	r3, r2
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533a:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	220f      	movs	r2, #15
 8005340:	4393      	bics	r3, r2
 8005342:	0019      	movs	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800534a:	430a      	orrs	r2, r1
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <HAL_RCC_OscConfig+0x690>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	431a      	orrs	r2, r3
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	0449      	lsls	r1, r1, #17
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005376:	f7fe fa41 	bl	80037fc <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005380:	f7fe fa3c 	bl	80037fc <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e054      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	049b      	lsls	r3, r3, #18
 800539a:	4013      	ands	r3, r2
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x644>
 800539e:	e04c      	b.n	800543a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_OscConfig+0x67c>)
 80053a6:	4908      	ldr	r1, [pc, #32]	; (80053c8 <HAL_RCC_OscConfig+0x68c>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fe fa26 	bl	80037fc <HAL_GetTick>
 80053b0:	0003      	movs	r3, r0
 80053b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x6a6>
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	40021000 	.word	0x40021000
 80053bc:	00001388 	.word	0x00001388
 80053c0:	efffffff 	.word	0xefffffff
 80053c4:	fffeffff 	.word	0xfffeffff
 80053c8:	feffffff 	.word	0xfeffffff
 80053cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fe fa14 	bl	80037fc <HAL_GetTick>
 80053d4:	0002      	movs	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e02c      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e2:	4b18      	ldr	r3, [pc, #96]	; (8005444 <HAL_RCC_OscConfig+0x708>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	049b      	lsls	r3, r3, #18
 80053ea:	4013      	ands	r3, r2
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x694>
 80053ee:	e024      	b.n	800543a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e01f      	b.n	800543c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80053fc:	4b11      	ldr	r3, [pc, #68]	; (8005444 <HAL_RCC_OscConfig+0x708>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_RCC_OscConfig+0x708>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	23c0      	movs	r3, #192	; 0xc0
 800540c:	025b      	lsls	r3, r3, #9
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	429a      	cmp	r2, r3
 8005416:	d10e      	bne.n	8005436 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	220f      	movs	r2, #15
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d107      	bne.n	8005436 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	23f0      	movs	r3, #240	; 0xf0
 800542a:	039b      	lsls	r3, r3, #14
 800542c:	401a      	ands	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b008      	add	sp, #32
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000

08005448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0bf      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	4013      	ands	r3, r2
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d911      	bls.n	800548e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	4393      	bics	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	4b5b      	ldr	r3, [pc, #364]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547c:	4b59      	ldr	r3, [pc, #356]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e0a6      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	d015      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2204      	movs	r2, #4
 800549e:	4013      	ands	r3, r2
 80054a0:	d006      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054a2:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054a8:	21e0      	movs	r1, #224	; 0xe0
 80054aa:	00c9      	lsls	r1, r1, #3
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b0:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	22f0      	movs	r2, #240	; 0xf0
 80054b6:	4393      	bics	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d04c      	beq.n	8005568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	4b44      	ldr	r3, [pc, #272]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	4013      	ands	r3, r2
 80054e0:	d120      	bne.n	8005524 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e07a      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ee:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	049b      	lsls	r3, r3, #18
 80054f6:	4013      	ands	r3, r2
 80054f8:	d114      	bne.n	8005524 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06e      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005506:	4b38      	ldr	r3, [pc, #224]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 8005508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	4013      	ands	r3, r2
 8005510:	d108      	bne.n	8005524 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e062      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e05b      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2203      	movs	r2, #3
 800552a:	4393      	bics	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7fe f960 	bl	80037fc <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005540:	e009      	b.n	8005556 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005542:	f7fe f95b 	bl	80037fc <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	4a27      	ldr	r2, [pc, #156]	; (80055ec <HAL_RCC_ClockConfig+0x1a4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e042      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	220c      	movs	r2, #12
 800555c:	401a      	ands	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	429a      	cmp	r2, r3
 8005566:	d1ec      	bne.n	8005542 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	4013      	ands	r3, r2
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d211      	bcs.n	800559a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	4393      	bics	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <HAL_RCC_ClockConfig+0x19c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	4013      	ands	r3, r2
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d001      	beq.n	800559a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e020      	b.n	80055dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2204      	movs	r2, #4
 80055a0:	4013      	ands	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055a4:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a11      	ldr	r2, [pc, #68]	; (80055f0 <HAL_RCC_ClockConfig+0x1a8>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	0019      	movs	r1, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055b8:	f000 f820 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055bc:	0001      	movs	r1, r0
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <HAL_RCC_ClockConfig+0x1a0>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	220f      	movs	r2, #15
 80055c6:	4013      	ands	r3, r2
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x1ac>)
 80055ca:	5cd3      	ldrb	r3, [r2, r3]
 80055cc:	000a      	movs	r2, r1
 80055ce:	40da      	lsrs	r2, r3
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 80055d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80055d4:	2003      	movs	r0, #3
 80055d6:	f7fe f8cb 	bl	8003770 <HAL_InitTick>
  
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b004      	add	sp, #16
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40022000 	.word	0x40022000
 80055e8:	40021000 	.word	0x40021000
 80055ec:	00001388 	.word	0x00001388
 80055f0:	fffff8ff 	.word	0xfffff8ff
 80055f4:	08006e24 	.word	0x08006e24
 80055f8:	20000000 	.word	0x20000000

080055fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	2300      	movs	r3, #0
 8005610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	220c      	movs	r2, #12
 8005620:	4013      	ands	r3, r2
 8005622:	2b0c      	cmp	r3, #12
 8005624:	d046      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0xb8>
 8005626:	d848      	bhi.n	80056ba <HAL_RCC_GetSysClockFreq+0xbe>
 8005628:	2b04      	cmp	r3, #4
 800562a:	d002      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x36>
 800562c:	2b08      	cmp	r3, #8
 800562e:	d003      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x3c>
 8005630:	e043      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005632:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005634:	613b      	str	r3, [r7, #16]
      break;
 8005636:	e043      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	0c9b      	lsrs	r3, r3, #18
 800563c:	220f      	movs	r2, #15
 800563e:	4013      	ands	r3, r2
 8005640:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005642:	5cd3      	ldrb	r3, [r2, r3]
 8005644:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	220f      	movs	r2, #15
 800564c:	4013      	ands	r3, r2
 800564e:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
 8005652:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	23c0      	movs	r3, #192	; 0xc0
 8005658:	025b      	lsls	r3, r3, #9
 800565a:	401a      	ands	r2, r3
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	025b      	lsls	r3, r3, #9
 8005660:	429a      	cmp	r2, r3
 8005662:	d109      	bne.n	8005678 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	481a      	ldr	r0, [pc, #104]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005668:	f7fa fd4c 	bl	8000104 <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4353      	muls	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e01a      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	23c0      	movs	r3, #192	; 0xc0
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	401a      	ands	r2, r3
 8005680:	23c0      	movs	r3, #192	; 0xc0
 8005682:	025b      	lsls	r3, r3, #9
 8005684:	429a      	cmp	r2, r3
 8005686:	d109      	bne.n	800569c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4814      	ldr	r0, [pc, #80]	; (80056dc <HAL_RCC_GetSysClockFreq+0xe0>)
 800568c:	f7fa fd3a 	bl	8000104 <__udivsi3>
 8005690:	0003      	movs	r3, r0
 8005692:	001a      	movs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4353      	muls	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e008      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	480c      	ldr	r0, [pc, #48]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056a0:	f7fa fd30 	bl	8000104 <__udivsi3>
 80056a4:	0003      	movs	r3, r0
 80056a6:	001a      	movs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4353      	muls	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	613b      	str	r3, [r7, #16]
      break;
 80056b2:	e005      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_RCC_GetSysClockFreq+0xe0>)
 80056b6:	613b      	str	r3, [r7, #16]
      break;
 80056b8:	e002      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056bc:	613b      	str	r3, [r7, #16]
      break;
 80056be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80056c0:	693b      	ldr	r3, [r7, #16]
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b006      	add	sp, #24
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	40021000 	.word	0x40021000
 80056d0:	007a1200 	.word	0x007a1200
 80056d4:	08006e3c 	.word	0x08006e3c
 80056d8:	08006e4c 	.word	0x08006e4c
 80056dc:	02dc6c00 	.word	0x02dc6c00

080056e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	20000000 	.word	0x20000000

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80056f8:	f7ff fff2 	bl	80056e0 <HAL_RCC_GetHCLKFreq>
 80056fc:	0001      	movs	r1, r0
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	2207      	movs	r2, #7
 8005706:	4013      	ands	r3, r2
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <HAL_RCC_GetPCLK1Freq+0x28>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	40d9      	lsrs	r1, r3
 800570e:	000b      	movs	r3, r1
}    
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	40021000 	.word	0x40021000
 800571c:	08006e34 	.word	0x08006e34

08005720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e044      	b.n	80057bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2278      	movs	r2, #120	; 0x78
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	f7fd ff57 	bl	80035f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2224      	movs	r2, #36	; 0x24
 800574e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 fc24 	bl	8005fb0 <UART_SetConfig>
 8005768:	0003      	movs	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e024      	b.n	80057bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	0018      	movs	r0, r3
 800577e:	f000 fdff 	bl	8006380 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	490d      	ldr	r1, [pc, #52]	; (80057c4 <HAL_UART_Init+0xa4>)
 800578e:	400a      	ands	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	212a      	movs	r1, #42	; 0x2a
 800579e:	438a      	bics	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2101      	movs	r1, #1
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 fe97 	bl	80064e8 <UART_CheckIdleState>
 80057ba:	0003      	movs	r3, r0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	ffffb7ff 	.word	0xffffb7ff

080057c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	1dbb      	adds	r3, r7, #6
 80057d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d000      	beq.n	80057e2 <HAL_UART_Transmit+0x1a>
 80057e0:	e08d      	b.n	80058fe <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_UART_Transmit+0x28>
 80057e8:	1dbb      	adds	r3, r7, #6
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e085      	b.n	8005900 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	015b      	lsls	r3, r3, #5
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d109      	bne.n	8005814 <HAL_UART_Transmit+0x4c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2201      	movs	r2, #1
 800580c:	4013      	ands	r3, r2
 800580e:	d001      	beq.n	8005814 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e075      	b.n	8005900 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2284      	movs	r2, #132	; 0x84
 8005818:	2100      	movs	r1, #0
 800581a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2221      	movs	r2, #33	; 0x21
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005822:	f7fd ffeb 	bl	80037fc <HAL_GetTick>
 8005826:	0003      	movs	r3, r0
 8005828:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1dba      	adds	r2, r7, #6
 800582e:	2150      	movs	r1, #80	; 0x50
 8005830:	8812      	ldrh	r2, [r2, #0]
 8005832:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1dba      	adds	r2, r7, #6
 8005838:	2152      	movs	r1, #82	; 0x52
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	015b      	lsls	r3, r3, #5
 8005846:	429a      	cmp	r2, r3
 8005848:	d108      	bne.n	800585c <HAL_UART_Transmit+0x94>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e003      	b.n	8005864 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005864:	e030      	b.n	80058c8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	0013      	movs	r3, r2
 8005870:	2200      	movs	r2, #0
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	f000 fee0 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d004      	beq.n	8005886 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e03c      	b.n	8005900 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	881a      	ldrh	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	05d2      	lsls	r2, r2, #23
 8005896:	0dd2      	lsrs	r2, r2, #23
 8005898:	b292      	uxth	r2, r2
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	3302      	adds	r3, #2
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	e008      	b.n	80058b6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	781a      	ldrb	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	b292      	uxth	r2, r2
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2252      	movs	r2, #82	; 0x52
 80058ba:	5a9b      	ldrh	r3, [r3, r2]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b299      	uxth	r1, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2252      	movs	r2, #82	; 0x52
 80058c6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2252      	movs	r2, #82	; 0x52
 80058cc:	5a9b      	ldrh	r3, [r3, r2]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1c8      	bne.n	8005866 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	0013      	movs	r3, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	2140      	movs	r1, #64	; 0x40
 80058e2:	f000 fea9 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80058e6:	1e03      	subs	r3, r0, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e005      	b.n	8005900 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80058fe:	2302      	movs	r3, #2
  }
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b008      	add	sp, #32
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	1dbb      	adds	r3, r7, #6
 8005914:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	589b      	ldr	r3, [r3, r2]
 800591c:	2b20      	cmp	r3, #32
 800591e:	d145      	bne.n	80059ac <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_UART_Receive_IT+0x26>
 8005926:	1dbb      	adds	r3, r7, #6
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e03d      	b.n	80059ae <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	015b      	lsls	r3, r3, #5
 800593a:	429a      	cmp	r2, r3
 800593c:	d109      	bne.n	8005952 <HAL_UART_Receive_IT+0x4a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2201      	movs	r2, #1
 800594a:	4013      	ands	r3, r2
 800594c:	d001      	beq.n	8005952 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e02d      	b.n	80059ae <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	4013      	ands	r3, r2
 8005964:	d019      	beq.n	800599a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005966:	f3ef 8310 	mrs	r3, PRIMASK
 800596a:	613b      	str	r3, [r7, #16]
  return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	04c9      	lsls	r1, r1, #19
 800598a:	430a      	orrs	r2, r1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f383 8810 	msr	PRIMASK, r3
}
 8005998:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800599a:	1dbb      	adds	r3, r7, #6
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 feb2 	bl	800670c <UART_Start_Receive_IT>
 80059a8:	0003      	movs	r3, r0
 80059aa:	e000      	b.n	80059ae <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
  }
}
 80059ae:	0018      	movs	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b008      	add	sp, #32
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b0ab      	sub	sp, #172	; 0xac
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	22a4      	movs	r2, #164	; 0xa4
 80059c8:	18b9      	adds	r1, r7, r2
 80059ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	20a0      	movs	r0, #160	; 0xa0
 80059d4:	1839      	adds	r1, r7, r0
 80059d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	219c      	movs	r1, #156	; 0x9c
 80059e0:	1879      	adds	r1, r7, r1
 80059e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059e4:	0011      	movs	r1, r2
 80059e6:	18bb      	adds	r3, r7, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a99      	ldr	r2, [pc, #612]	; (8005c50 <HAL_UART_IRQHandler+0x298>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	2298      	movs	r2, #152	; 0x98
 80059f0:	18bc      	adds	r4, r7, r2
 80059f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80059f4:	18bb      	adds	r3, r7, r2
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d114      	bne.n	8005a26 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059fc:	187b      	adds	r3, r7, r1
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2220      	movs	r2, #32
 8005a02:	4013      	ands	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a06:	183b      	adds	r3, r7, r0
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d00a      	beq.n	8005a26 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d100      	bne.n	8005a1a <HAL_UART_IRQHandler+0x62>
 8005a18:	e29e      	b.n	8005f58 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	0010      	movs	r0, r2
 8005a22:	4798      	blx	r3
      }
      return;
 8005a24:	e298      	b.n	8005f58 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a26:	2398      	movs	r3, #152	; 0x98
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d100      	bne.n	8005a32 <HAL_UART_IRQHandler+0x7a>
 8005a30:	e114      	b.n	8005c5c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a32:	239c      	movs	r3, #156	; 0x9c
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d106      	bne.n	8005a4c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a3e:	23a0      	movs	r3, #160	; 0xa0
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a83      	ldr	r2, [pc, #524]	; (8005c54 <HAL_UART_IRQHandler+0x29c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_UART_IRQHandler+0x94>
 8005a4a:	e107      	b.n	8005c5c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a4c:	23a4      	movs	r3, #164	; 0xa4
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2201      	movs	r2, #1
 8005a54:	4013      	ands	r3, r2
 8005a56:	d012      	beq.n	8005a7e <HAL_UART_IRQHandler+0xc6>
 8005a58:	23a0      	movs	r3, #160	; 0xa0
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2284      	movs	r2, #132	; 0x84
 8005a72:	589b      	ldr	r3, [r3, r2]
 8005a74:	2201      	movs	r2, #1
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2184      	movs	r1, #132	; 0x84
 8005a7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a7e:	23a4      	movs	r3, #164	; 0xa4
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2202      	movs	r2, #2
 8005a86:	4013      	ands	r3, r2
 8005a88:	d011      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
 8005a8a:	239c      	movs	r3, #156	; 0x9c
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d00b      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2284      	movs	r2, #132	; 0x84
 8005aa2:	589b      	ldr	r3, [r3, r2]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2184      	movs	r1, #132	; 0x84
 8005aac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aae:	23a4      	movs	r3, #164	; 0xa4
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d011      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
 8005aba:	239c      	movs	r3, #156	; 0x9c
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2204      	movs	r2, #4
 8005acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2284      	movs	r2, #132	; 0x84
 8005ad2:	589b      	ldr	r3, [r3, r2]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2184      	movs	r1, #132	; 0x84
 8005adc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ade:	23a4      	movs	r3, #164	; 0xa4
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d017      	beq.n	8005b1a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aea:	23a0      	movs	r3, #160	; 0xa0
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2220      	movs	r2, #32
 8005af2:	4013      	ands	r3, r2
 8005af4:	d105      	bne.n	8005b02 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005af6:	239c      	movs	r3, #156	; 0x9c
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b00:	d00b      	beq.n	8005b1a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2208      	movs	r2, #8
 8005b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2284      	movs	r2, #132	; 0x84
 8005b0e:	589b      	ldr	r3, [r3, r2]
 8005b10:	2208      	movs	r2, #8
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2184      	movs	r1, #132	; 0x84
 8005b18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b1a:	23a4      	movs	r3, #164	; 0xa4
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	4013      	ands	r3, r2
 8005b26:	d013      	beq.n	8005b50 <HAL_UART_IRQHandler+0x198>
 8005b28:	23a0      	movs	r3, #160	; 0xa0
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	2380      	movs	r3, #128	; 0x80
 8005b30:	04db      	lsls	r3, r3, #19
 8005b32:	4013      	ands	r3, r2
 8005b34:	d00c      	beq.n	8005b50 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	0112      	lsls	r2, r2, #4
 8005b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2284      	movs	r2, #132	; 0x84
 8005b44:	589b      	ldr	r3, [r3, r2]
 8005b46:	2220      	movs	r2, #32
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2184      	movs	r1, #132	; 0x84
 8005b4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2284      	movs	r2, #132	; 0x84
 8005b54:	589b      	ldr	r3, [r3, r2]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d100      	bne.n	8005b5c <HAL_UART_IRQHandler+0x1a4>
 8005b5a:	e1ff      	b.n	8005f5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b5c:	23a4      	movs	r3, #164	; 0xa4
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2220      	movs	r2, #32
 8005b64:	4013      	ands	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b68:	23a0      	movs	r3, #160	; 0xa0
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	4013      	ands	r3, r2
 8005b72:	d008      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	0010      	movs	r0, r2
 8005b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2284      	movs	r2, #132	; 0x84
 8005b8a:	589b      	ldr	r3, [r3, r2]
 8005b8c:	2194      	movs	r1, #148	; 0x94
 8005b8e:	187a      	adds	r2, r7, r1
 8005b90:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2240      	movs	r2, #64	; 0x40
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d004      	beq.n	8005baa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2228      	movs	r2, #40	; 0x28
 8005ba6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba8:	d047      	beq.n	8005c3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 fe77 	bl	80068a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2240      	movs	r2, #64	; 0x40
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d137      	bne.n	8005c30 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc8:	2090      	movs	r0, #144	; 0x90
 8005bca:	183a      	adds	r2, r7, r0
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd4:	f383 8810 	msr	PRIMASK, r3
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2140      	movs	r1, #64	; 0x40
 8005be6:	438a      	bics	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf2:	f383 8810 	msr	PRIMASK, r3
}
 8005bf6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <HAL_UART_IRQHandler+0x2a0>)
 8005c06:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fd ff15 	bl	8003a3c <HAL_DMA_Abort_IT>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d01a      	beq.n	8005c4c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	0018      	movs	r0, r3
 8005c22:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e012      	b.n	8005c4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 f9ad 	bl	8005f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2e:	e00d      	b.n	8005c4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 f9a8 	bl	8005f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e008      	b.n	8005c4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 f9a3 	bl	8005f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2284      	movs	r2, #132	; 0x84
 8005c46:	2100      	movs	r1, #0
 8005c48:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005c4a:	e187      	b.n	8005f5c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	46c0      	nop			; (mov r8, r8)
    return;
 8005c4e:	e185      	b.n	8005f5c <HAL_UART_IRQHandler+0x5a4>
 8005c50:	0000080f 	.word	0x0000080f
 8005c54:	04000120 	.word	0x04000120
 8005c58:	08006969 	.word	0x08006969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d000      	beq.n	8005c66 <HAL_UART_IRQHandler+0x2ae>
 8005c64:	e139      	b.n	8005eda <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c66:	23a4      	movs	r3, #164	; 0xa4
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d100      	bne.n	8005c74 <HAL_UART_IRQHandler+0x2bc>
 8005c72:	e132      	b.n	8005eda <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c74:	23a0      	movs	r3, #160	; 0xa0
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d100      	bne.n	8005c82 <HAL_UART_IRQHandler+0x2ca>
 8005c80:	e12b      	b.n	8005eda <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2210      	movs	r2, #16
 8005c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d000      	beq.n	8005c9a <HAL_UART_IRQHandler+0x2e2>
 8005c98:	e09f      	b.n	8005dda <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	217e      	movs	r1, #126	; 0x7e
 8005ca4:	187b      	adds	r3, r7, r1
 8005ca6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005ca8:	187b      	adds	r3, r7, r1
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d100      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x2fa>
 8005cb0:	e156      	b.n	8005f60 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2258      	movs	r2, #88	; 0x58
 8005cb6:	5a9b      	ldrh	r3, [r3, r2]
 8005cb8:	187a      	adds	r2, r7, r1
 8005cba:	8812      	ldrh	r2, [r2, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d300      	bcc.n	8005cc2 <HAL_UART_IRQHandler+0x30a>
 8005cc0:	e14e      	b.n	8005f60 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	187a      	adds	r2, r7, r1
 8005cc6:	215a      	movs	r1, #90	; 0x5a
 8005cc8:	8812      	ldrh	r2, [r2, #0]
 8005cca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d06f      	beq.n	8005db6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cde:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	f383 8810 	msr	PRIMASK, r3
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	499e      	ldr	r1, [pc, #632]	; (8005f70 <HAL_UART_IRQHandler+0x5b8>)
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d10:	677b      	str	r3, [r7, #116]	; 0x74
 8005d12:	2301      	movs	r3, #1
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d18:	f383 8810 	msr	PRIMASK, r3
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	673b      	str	r3, [r7, #112]	; 0x70
 8005d44:	2301      	movs	r3, #1
 8005d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2140      	movs	r1, #64	; 0x40
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d62:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	2120      	movs	r1, #32
 8005d72:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d84:	2301      	movs	r3, #1
 8005d86:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8a:	f383 8810 	msr	PRIMASK, r3
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2110      	movs	r1, #16
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fd fe0b 	bl	80039cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2258      	movs	r2, #88	; 0x58
 8005dc0:	5a9a      	ldrh	r2, [r3, r2]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	215a      	movs	r1, #90	; 0x5a
 8005dc6:	5a5b      	ldrh	r3, [r3, r1]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0011      	movs	r1, r2
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 f8e0 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dd8:	e0c2      	b.n	8005f60 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2258      	movs	r2, #88	; 0x58
 8005dde:	5a99      	ldrh	r1, [r3, r2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	225a      	movs	r2, #90	; 0x5a
 8005de4:	5a9b      	ldrh	r3, [r3, r2]
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	208e      	movs	r0, #142	; 0x8e
 8005dea:	183b      	adds	r3, r7, r0
 8005dec:	1a8a      	subs	r2, r1, r2
 8005dee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	225a      	movs	r2, #90	; 0x5a
 8005df4:	5a9b      	ldrh	r3, [r3, r2]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d100      	bne.n	8005dfe <HAL_UART_IRQHandler+0x446>
 8005dfc:	e0b2      	b.n	8005f64 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d100      	bne.n	8005e08 <HAL_UART_IRQHandler+0x450>
 8005e06:	e0ad      	b.n	8005f64 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e08:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e10:	2488      	movs	r4, #136	; 0x88
 8005e12:	193a      	adds	r2, r7, r4
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	2301      	movs	r3, #1
 8005e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4951      	ldr	r1, [pc, #324]	; (8005f74 <HAL_UART_IRQHandler+0x5bc>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	193b      	adds	r3, r7, r4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e40:	f3ef 8310 	mrs	r3, PRIMASK
 8005e44:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	2484      	movs	r4, #132	; 0x84
 8005e4a:	193a      	adds	r2, r7, r4
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2101      	movs	r1, #1
 8005e66:	438a      	bics	r2, r1
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	193b      	adds	r3, r7, r4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f383 8810 	msr	PRIMASK, r3
}
 8005e76:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	2120      	movs	r1, #32
 8005e7e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	2480      	movs	r4, #128	; 0x80
 8005e96:	193a      	adds	r2, r7, r4
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	f383 8810 	msr	PRIMASK, r3
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2110      	movs	r1, #16
 8005eb2:	438a      	bics	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	193b      	adds	r3, r7, r4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eca:	183b      	adds	r3, r7, r0
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	0011      	movs	r1, r2
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 f860 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed8:	e044      	b.n	8005f64 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eda:	23a4      	movs	r3, #164	; 0xa4
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	035b      	lsls	r3, r3, #13
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d010      	beq.n	8005f0a <HAL_UART_IRQHandler+0x552>
 8005ee8:	239c      	movs	r3, #156	; 0x9c
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	03db      	lsls	r3, r3, #15
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	0352      	lsls	r2, r2, #13
 8005efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 ff2a 	bl	8006d5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f08:	e02f      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f0a:	23a4      	movs	r3, #164	; 0xa4
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2280      	movs	r2, #128	; 0x80
 8005f12:	4013      	ands	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f16:	23a0      	movs	r3, #160	; 0xa0
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2280      	movs	r2, #128	; 0x80
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01e      	beq.n	8005f68 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	0010      	movs	r0, r2
 8005f32:	4798      	blx	r3
    }
    return;
 8005f34:	e018      	b.n	8005f68 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f36:	23a4      	movs	r3, #164	; 0xa4
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
 8005f42:	23a0      	movs	r3, #160	; 0xa0
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2240      	movs	r2, #64	; 0x40
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d00d      	beq.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 fd20 	bl	8006996 <UART_EndTransmit_IT>
    return;
 8005f56:	e008      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	e006      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	e004      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	e002      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	e000      	b.n	8005f6a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005f68:	46c0      	nop			; (mov r8, r8)
  }

}
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b02b      	add	sp, #172	; 0xac
 8005f6e:	bd90      	pop	{r4, r7, pc}
 8005f70:	fffffeff 	.word	0xfffffeff
 8005f74:	fffffedf 	.word	0xfffffedf

08005f78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	000a      	movs	r2, r1
 8005fa2:	1cbb      	adds	r3, r7, #2
 8005fa4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b002      	add	sp, #8
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb8:	231e      	movs	r3, #30
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4abe      	ldr	r2, [pc, #760]	; (80062d8 <UART_SetConfig+0x328>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	4ab9      	ldr	r2, [pc, #740]	; (80062dc <UART_SetConfig+0x32c>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4ab0      	ldr	r2, [pc, #704]	; (80062e0 <UART_SetConfig+0x330>)
 800601e:	4013      	ands	r3, r2
 8006020:	0019      	movs	r1, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4aac      	ldr	r2, [pc, #688]	; (80062e4 <UART_SetConfig+0x334>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d127      	bne.n	8006086 <UART_SetConfig+0xd6>
 8006036:	4bac      	ldr	r3, [pc, #688]	; (80062e8 <UART_SetConfig+0x338>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	2203      	movs	r2, #3
 800603c:	4013      	ands	r3, r2
 800603e:	2b03      	cmp	r3, #3
 8006040:	d00d      	beq.n	800605e <UART_SetConfig+0xae>
 8006042:	d81b      	bhi.n	800607c <UART_SetConfig+0xcc>
 8006044:	2b02      	cmp	r3, #2
 8006046:	d014      	beq.n	8006072 <UART_SetConfig+0xc2>
 8006048:	d818      	bhi.n	800607c <UART_SetConfig+0xcc>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <UART_SetConfig+0xa4>
 800604e:	2b01      	cmp	r3, #1
 8006050:	d00a      	beq.n	8006068 <UART_SetConfig+0xb8>
 8006052:	e013      	b.n	800607c <UART_SetConfig+0xcc>
 8006054:	231f      	movs	r3, #31
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e0bd      	b.n	80061da <UART_SetConfig+0x22a>
 800605e:	231f      	movs	r3, #31
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e0b8      	b.n	80061da <UART_SetConfig+0x22a>
 8006068:	231f      	movs	r3, #31
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2204      	movs	r2, #4
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e0b3      	b.n	80061da <UART_SetConfig+0x22a>
 8006072:	231f      	movs	r3, #31
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2208      	movs	r2, #8
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e0ae      	b.n	80061da <UART_SetConfig+0x22a>
 800607c:	231f      	movs	r3, #31
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2210      	movs	r2, #16
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e0a9      	b.n	80061da <UART_SetConfig+0x22a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a98      	ldr	r2, [pc, #608]	; (80062ec <UART_SetConfig+0x33c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d134      	bne.n	80060fa <UART_SetConfig+0x14a>
 8006090:	4b95      	ldr	r3, [pc, #596]	; (80062e8 <UART_SetConfig+0x338>)
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	23c0      	movs	r3, #192	; 0xc0
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	4013      	ands	r3, r2
 800609a:	22c0      	movs	r2, #192	; 0xc0
 800609c:	0292      	lsls	r2, r2, #10
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <UART_SetConfig+0x122>
 80060a2:	22c0      	movs	r2, #192	; 0xc0
 80060a4:	0292      	lsls	r2, r2, #10
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d822      	bhi.n	80060f0 <UART_SetConfig+0x140>
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	0292      	lsls	r2, r2, #10
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d019      	beq.n	80060e6 <UART_SetConfig+0x136>
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	0292      	lsls	r2, r2, #10
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d81a      	bhi.n	80060f0 <UART_SetConfig+0x140>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <UART_SetConfig+0x118>
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	0252      	lsls	r2, r2, #9
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00a      	beq.n	80060dc <UART_SetConfig+0x12c>
 80060c6:	e013      	b.n	80060f0 <UART_SetConfig+0x140>
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e083      	b.n	80061da <UART_SetConfig+0x22a>
 80060d2:	231f      	movs	r3, #31
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2202      	movs	r2, #2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e07e      	b.n	80061da <UART_SetConfig+0x22a>
 80060dc:	231f      	movs	r3, #31
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	2204      	movs	r2, #4
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e079      	b.n	80061da <UART_SetConfig+0x22a>
 80060e6:	231f      	movs	r3, #31
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2208      	movs	r2, #8
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e074      	b.n	80061da <UART_SetConfig+0x22a>
 80060f0:	231f      	movs	r3, #31
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	2210      	movs	r2, #16
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e06f      	b.n	80061da <UART_SetConfig+0x22a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a7c      	ldr	r2, [pc, #496]	; (80062f0 <UART_SetConfig+0x340>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d134      	bne.n	800616e <UART_SetConfig+0x1be>
 8006104:	4b78      	ldr	r3, [pc, #480]	; (80062e8 <UART_SetConfig+0x338>)
 8006106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006108:	23c0      	movs	r3, #192	; 0xc0
 800610a:	031b      	lsls	r3, r3, #12
 800610c:	4013      	ands	r3, r2
 800610e:	22c0      	movs	r2, #192	; 0xc0
 8006110:	0312      	lsls	r2, r2, #12
 8006112:	4293      	cmp	r3, r2
 8006114:	d017      	beq.n	8006146 <UART_SetConfig+0x196>
 8006116:	22c0      	movs	r2, #192	; 0xc0
 8006118:	0312      	lsls	r2, r2, #12
 800611a:	4293      	cmp	r3, r2
 800611c:	d822      	bhi.n	8006164 <UART_SetConfig+0x1b4>
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	0312      	lsls	r2, r2, #12
 8006122:	4293      	cmp	r3, r2
 8006124:	d019      	beq.n	800615a <UART_SetConfig+0x1aa>
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	0312      	lsls	r2, r2, #12
 800612a:	4293      	cmp	r3, r2
 800612c:	d81a      	bhi.n	8006164 <UART_SetConfig+0x1b4>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <UART_SetConfig+0x18c>
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	02d2      	lsls	r2, r2, #11
 8006136:	4293      	cmp	r3, r2
 8006138:	d00a      	beq.n	8006150 <UART_SetConfig+0x1a0>
 800613a:	e013      	b.n	8006164 <UART_SetConfig+0x1b4>
 800613c:	231f      	movs	r3, #31
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e049      	b.n	80061da <UART_SetConfig+0x22a>
 8006146:	231f      	movs	r3, #31
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e044      	b.n	80061da <UART_SetConfig+0x22a>
 8006150:	231f      	movs	r3, #31
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2204      	movs	r2, #4
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e03f      	b.n	80061da <UART_SetConfig+0x22a>
 800615a:	231f      	movs	r3, #31
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2208      	movs	r2, #8
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e03a      	b.n	80061da <UART_SetConfig+0x22a>
 8006164:	231f      	movs	r3, #31
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2210      	movs	r2, #16
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e035      	b.n	80061da <UART_SetConfig+0x22a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a60      	ldr	r2, [pc, #384]	; (80062f4 <UART_SetConfig+0x344>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d104      	bne.n	8006182 <UART_SetConfig+0x1d2>
 8006178:	231f      	movs	r3, #31
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e02b      	b.n	80061da <UART_SetConfig+0x22a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5c      	ldr	r2, [pc, #368]	; (80062f8 <UART_SetConfig+0x348>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d104      	bne.n	8006196 <UART_SetConfig+0x1e6>
 800618c:	231f      	movs	r3, #31
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e021      	b.n	80061da <UART_SetConfig+0x22a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a58      	ldr	r2, [pc, #352]	; (80062fc <UART_SetConfig+0x34c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d104      	bne.n	80061aa <UART_SetConfig+0x1fa>
 80061a0:	231f      	movs	r3, #31
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e017      	b.n	80061da <UART_SetConfig+0x22a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a54      	ldr	r2, [pc, #336]	; (8006300 <UART_SetConfig+0x350>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d104      	bne.n	80061be <UART_SetConfig+0x20e>
 80061b4:	231f      	movs	r3, #31
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e00d      	b.n	80061da <UART_SetConfig+0x22a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a50      	ldr	r2, [pc, #320]	; (8006304 <UART_SetConfig+0x354>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d104      	bne.n	80061d2 <UART_SetConfig+0x222>
 80061c8:	231f      	movs	r3, #31
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e003      	b.n	80061da <UART_SetConfig+0x22a>
 80061d2:	231f      	movs	r3, #31
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	2210      	movs	r2, #16
 80061d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d15c      	bne.n	80062a0 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80061e6:	231f      	movs	r3, #31
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d015      	beq.n	800621c <UART_SetConfig+0x26c>
 80061f0:	dc18      	bgt.n	8006224 <UART_SetConfig+0x274>
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d00d      	beq.n	8006212 <UART_SetConfig+0x262>
 80061f6:	dc15      	bgt.n	8006224 <UART_SetConfig+0x274>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <UART_SetConfig+0x252>
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d005      	beq.n	800620c <UART_SetConfig+0x25c>
 8006200:	e010      	b.n	8006224 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006202:	f7ff fa77 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8006206:	0003      	movs	r3, r0
 8006208:	61bb      	str	r3, [r7, #24]
        break;
 800620a:	e012      	b.n	8006232 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <UART_SetConfig+0x358>)
 800620e:	61bb      	str	r3, [r7, #24]
        break;
 8006210:	e00f      	b.n	8006232 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7ff f9f3 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8006216:	0003      	movs	r3, r0
 8006218:	61bb      	str	r3, [r7, #24]
        break;
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	61bb      	str	r3, [r7, #24]
        break;
 8006222:	e006      	b.n	8006232 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006228:	231e      	movs	r3, #30
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	2201      	movs	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
        break;
 8006230:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d100      	bne.n	800623a <UART_SetConfig+0x28a>
 8006238:	e095      	b.n	8006366 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	005a      	lsls	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	18d2      	adds	r2, r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	0019      	movs	r1, r3
 800624c:	0010      	movs	r0, r2
 800624e:	f7f9 ff59 	bl	8000104 <__udivsi3>
 8006252:	0003      	movs	r3, r0
 8006254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b0f      	cmp	r3, #15
 800625a:	d91c      	bls.n	8006296 <UART_SetConfig+0x2e6>
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	025b      	lsls	r3, r3, #9
 8006262:	429a      	cmp	r2, r3
 8006264:	d217      	bcs.n	8006296 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	b29a      	uxth	r2, r3
 800626a:	200e      	movs	r0, #14
 800626c:	183b      	adds	r3, r7, r0
 800626e:	210f      	movs	r1, #15
 8006270:	438a      	bics	r2, r1
 8006272:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	2207      	movs	r2, #7
 800627c:	4013      	ands	r3, r2
 800627e:	b299      	uxth	r1, r3
 8006280:	183b      	adds	r3, r7, r0
 8006282:	183a      	adds	r2, r7, r0
 8006284:	8812      	ldrh	r2, [r2, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	183a      	adds	r2, r7, r0
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	e067      	b.n	8006366 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006296:	231e      	movs	r3, #30
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e062      	b.n	8006366 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a0:	231f      	movs	r3, #31
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d030      	beq.n	800630c <UART_SetConfig+0x35c>
 80062aa:	dc33      	bgt.n	8006314 <UART_SetConfig+0x364>
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d00d      	beq.n	80062cc <UART_SetConfig+0x31c>
 80062b0:	dc30      	bgt.n	8006314 <UART_SetConfig+0x364>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <UART_SetConfig+0x30c>
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d005      	beq.n	80062c6 <UART_SetConfig+0x316>
 80062ba:	e02b      	b.n	8006314 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7ff fa1a 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 80062c0:	0003      	movs	r3, r0
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e02d      	b.n	8006322 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <UART_SetConfig+0x358>)
 80062c8:	61bb      	str	r3, [r7, #24]
        break;
 80062ca:	e02a      	b.n	8006322 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062cc:	f7ff f996 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80062d0:	0003      	movs	r3, r0
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e025      	b.n	8006322 <UART_SetConfig+0x372>
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	efff69f3 	.word	0xefff69f3
 80062dc:	ffffcfff 	.word	0xffffcfff
 80062e0:	fffff4ff 	.word	0xfffff4ff
 80062e4:	40013800 	.word	0x40013800
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40004400 	.word	0x40004400
 80062f0:	40004800 	.word	0x40004800
 80062f4:	40004c00 	.word	0x40004c00
 80062f8:	40005000 	.word	0x40005000
 80062fc:	40011400 	.word	0x40011400
 8006300:	40011800 	.word	0x40011800
 8006304:	40011c00 	.word	0x40011c00
 8006308:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	61bb      	str	r3, [r7, #24]
        break;
 8006312:	e006      	b.n	8006322 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006318:	231e      	movs	r3, #30
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
        break;
 8006320:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01e      	beq.n	8006366 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	085a      	lsrs	r2, r3, #1
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	18d2      	adds	r2, r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	0019      	movs	r1, r3
 8006338:	0010      	movs	r0, r2
 800633a:	f7f9 fee3 	bl	8000104 <__udivsi3>
 800633e:	0003      	movs	r3, r0
 8006340:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d90a      	bls.n	800635e <UART_SetConfig+0x3ae>
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	025b      	lsls	r3, r3, #9
 800634e:	429a      	cmp	r2, r3
 8006350:	d205      	bcs.n	800635e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e003      	b.n	8006366 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800635e:	231e      	movs	r3, #30
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006372:	231e      	movs	r3, #30
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b008      	add	sp, #32
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2201      	movs	r2, #1
 800638e:	4013      	ands	r3, r2
 8006390:	d00b      	beq.n	80063aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a4a      	ldr	r2, [pc, #296]	; (80064c4 <UART_AdvFeatureConfig+0x144>)
 800639a:	4013      	ands	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2202      	movs	r2, #2
 80063b0:	4013      	ands	r3, r2
 80063b2:	d00b      	beq.n	80063cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4a43      	ldr	r2, [pc, #268]	; (80064c8 <UART_AdvFeatureConfig+0x148>)
 80063bc:	4013      	ands	r3, r2
 80063be:	0019      	movs	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2204      	movs	r2, #4
 80063d2:	4013      	ands	r3, r2
 80063d4:	d00b      	beq.n	80063ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <UART_AdvFeatureConfig+0x14c>)
 80063de:	4013      	ands	r3, r2
 80063e0:	0019      	movs	r1, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2208      	movs	r2, #8
 80063f4:	4013      	ands	r3, r2
 80063f6:	d00b      	beq.n	8006410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <UART_AdvFeatureConfig+0x150>)
 8006400:	4013      	ands	r3, r2
 8006402:	0019      	movs	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2210      	movs	r2, #16
 8006416:	4013      	ands	r3, r2
 8006418:	d00b      	beq.n	8006432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4a2c      	ldr	r2, [pc, #176]	; (80064d4 <UART_AdvFeatureConfig+0x154>)
 8006422:	4013      	ands	r3, r2
 8006424:	0019      	movs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2220      	movs	r2, #32
 8006438:	4013      	ands	r3, r2
 800643a:	d00b      	beq.n	8006454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <UART_AdvFeatureConfig+0x158>)
 8006444:	4013      	ands	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	4013      	ands	r3, r2
 800645c:	d01d      	beq.n	800649a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <UART_AdvFeatureConfig+0x15c>)
 8006466:	4013      	ands	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	035b      	lsls	r3, r3, #13
 800647e:	429a      	cmp	r2, r3
 8006480:	d10b      	bne.n	800649a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <UART_AdvFeatureConfig+0x160>)
 800648a:	4013      	ands	r3, r2
 800648c:	0019      	movs	r1, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	4013      	ands	r3, r2
 80064a2:	d00b      	beq.n	80064bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4a0e      	ldr	r2, [pc, #56]	; (80064e4 <UART_AdvFeatureConfig+0x164>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	0019      	movs	r1, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	b002      	add	sp, #8
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	fffdffff 	.word	0xfffdffff
 80064c8:	fffeffff 	.word	0xfffeffff
 80064cc:	fffbffff 	.word	0xfffbffff
 80064d0:	ffff7fff 	.word	0xffff7fff
 80064d4:	ffffefff 	.word	0xffffefff
 80064d8:	ffffdfff 	.word	0xffffdfff
 80064dc:	ffefffff 	.word	0xffefffff
 80064e0:	ff9fffff 	.word	0xff9fffff
 80064e4:	fff7ffff 	.word	0xfff7ffff

080064e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b092      	sub	sp, #72	; 0x48
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2284      	movs	r2, #132	; 0x84
 80064f4:	2100      	movs	r1, #0
 80064f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064f8:	f7fd f980 	bl	80037fc <HAL_GetTick>
 80064fc:	0003      	movs	r3, r0
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2208      	movs	r2, #8
 8006508:	4013      	ands	r3, r2
 800650a:	2b08      	cmp	r3, #8
 800650c:	d12c      	bne.n	8006568 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006510:	2280      	movs	r2, #128	; 0x80
 8006512:	0391      	lsls	r1, r2, #14
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4a46      	ldr	r2, [pc, #280]	; (8006630 <UART_CheckIdleState+0x148>)
 8006518:	9200      	str	r2, [sp, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	f000 f88c 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8006520:	1e03      	subs	r3, r0, #0
 8006522:	d021      	beq.n	8006568 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006524:	f3ef 8310 	mrs	r3, PRIMASK
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
 800652e:	2301      	movs	r3, #1
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	438a      	bics	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	f383 8810 	msr	PRIMASK, r3
}
 8006554:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2278      	movs	r2, #120	; 0x78
 8006560:	2100      	movs	r1, #0
 8006562:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e05f      	b.n	8006628 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2204      	movs	r2, #4
 8006570:	4013      	ands	r3, r2
 8006572:	2b04      	cmp	r3, #4
 8006574:	d146      	bne.n	8006604 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	03d1      	lsls	r1, r2, #15
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <UART_CheckIdleState+0x148>)
 8006580:	9200      	str	r2, [sp, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	f000 f858 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8006588:	1e03      	subs	r3, r0, #0
 800658a:	d03b      	beq.n	8006604 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658c:	f3ef 8310 	mrs	r3, PRIMASK
 8006590:	60fb      	str	r3, [r7, #12]
  return(result);
 8006592:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 8006596:	2301      	movs	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f383 8810 	msr	PRIMASK, r3
}
 80065a0:	46c0      	nop			; (mov r8, r8)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4921      	ldr	r1, [pc, #132]	; (8006634 <UART_CheckIdleState+0x14c>)
 80065ae:	400a      	ands	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f383 8810 	msr	PRIMASK, r3
}
 80065bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065be:	f3ef 8310 	mrs	r3, PRIMASK
 80065c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80065c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	633b      	str	r3, [r7, #48]	; 0x30
 80065c8:	2301      	movs	r3, #1
 80065ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f383 8810 	msr	PRIMASK, r3
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2101      	movs	r1, #1
 80065e0:	438a      	bics	r2, r1
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	f383 8810 	msr	PRIMASK, r3
}
 80065ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	2120      	movs	r1, #32
 80065f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2278      	movs	r2, #120	; 0x78
 80065fc:	2100      	movs	r1, #0
 80065fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e011      	b.n	8006628 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	2120      	movs	r1, #32
 8006610:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2278      	movs	r2, #120	; 0x78
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	0018      	movs	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	b010      	add	sp, #64	; 0x40
 800662e:	bd80      	pop	{r7, pc}
 8006630:	01ffffff 	.word	0x01ffffff
 8006634:	fffffedf 	.word	0xfffffedf

08006638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	1dfb      	adds	r3, r7, #7
 8006646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	e04b      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	3301      	adds	r3, #1
 800664e:	d048      	beq.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006650:	f7fd f8d4 	bl	80037fc <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	d302      	bcc.n	8006666 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e04b      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2204      	movs	r2, #4
 8006672:	4013      	ands	r3, r2
 8006674:	d035      	beq.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2208      	movs	r2, #8
 800667e:	4013      	ands	r3, r2
 8006680:	2b08      	cmp	r3, #8
 8006682:	d111      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f906 	bl	80068a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2284      	movs	r2, #132	; 0x84
 8006698:	2108      	movs	r1, #8
 800669a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2278      	movs	r2, #120	; 0x78
 80066a0:	2100      	movs	r1, #0
 80066a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e02c      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	401a      	ands	r2, r3
 80066b4:	2380      	movs	r3, #128	; 0x80
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d112      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2280      	movs	r2, #128	; 0x80
 80066c2:	0112      	lsls	r2, r2, #4
 80066c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 f8e9 	bl	80068a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2284      	movs	r2, #132	; 0x84
 80066d2:	2120      	movs	r1, #32
 80066d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2278      	movs	r2, #120	; 0x78
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e00f      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	425a      	negs	r2, r3
 80066f2:	4153      	adcs	r3, r2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	001a      	movs	r2, r3
 80066f8:	1dfb      	adds	r3, r7, #7
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d0a4      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b004      	add	sp, #16
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b090      	sub	sp, #64	; 0x40
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	1dbb      	adds	r3, r7, #6
 8006718:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1dba      	adds	r2, r7, #6
 8006724:	2158      	movs	r1, #88	; 0x58
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1dba      	adds	r2, r7, #6
 800672e:	215a      	movs	r1, #90	; 0x5a
 8006730:	8812      	ldrh	r2, [r2, #0]
 8006732:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	015b      	lsls	r3, r3, #5
 8006742:	429a      	cmp	r2, r3
 8006744:	d10d      	bne.n	8006762 <UART_Start_Receive_IT+0x56>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <UART_Start_Receive_IT+0x4c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	225c      	movs	r2, #92	; 0x5c
 8006752:	4950      	ldr	r1, [pc, #320]	; (8006894 <UART_Start_Receive_IT+0x188>)
 8006754:	5299      	strh	r1, [r3, r2]
 8006756:	e02e      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	225c      	movs	r2, #92	; 0x5c
 800675c:	21ff      	movs	r1, #255	; 0xff
 800675e:	5299      	strh	r1, [r3, r2]
 8006760:	e029      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <UART_Start_Receive_IT+0x7a>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <UART_Start_Receive_IT+0x70>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	225c      	movs	r2, #92	; 0x5c
 8006776:	21ff      	movs	r1, #255	; 0xff
 8006778:	5299      	strh	r1, [r3, r2]
 800677a:	e01c      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	225c      	movs	r2, #92	; 0x5c
 8006780:	217f      	movs	r1, #127	; 0x7f
 8006782:	5299      	strh	r1, [r3, r2]
 8006784:	e017      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	055b      	lsls	r3, r3, #21
 800678e:	429a      	cmp	r2, r3
 8006790:	d10d      	bne.n	80067ae <UART_Start_Receive_IT+0xa2>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <UART_Start_Receive_IT+0x98>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	225c      	movs	r2, #92	; 0x5c
 800679e:	217f      	movs	r1, #127	; 0x7f
 80067a0:	5299      	strh	r1, [r3, r2]
 80067a2:	e008      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	225c      	movs	r2, #92	; 0x5c
 80067a8:	213f      	movs	r1, #63	; 0x3f
 80067aa:	5299      	strh	r1, [r3, r2]
 80067ac:	e003      	b.n	80067b6 <UART_Start_Receive_IT+0xaa>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	225c      	movs	r2, #92	; 0x5c
 80067b2:	2100      	movs	r1, #0
 80067b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2284      	movs	r2, #132	; 0x84
 80067ba:	2100      	movs	r1, #0
 80067bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2280      	movs	r2, #128	; 0x80
 80067c2:	2122      	movs	r1, #34	; 0x22
 80067c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c6:	f3ef 8310 	mrs	r3, PRIMASK
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d0:	2301      	movs	r3, #1
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	f383 8810 	msr	PRIMASK, r3
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	f383 8810 	msr	PRIMASK, r3
}
 80067f6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	015b      	lsls	r3, r3, #5
 8006800:	429a      	cmp	r2, r3
 8006802:	d107      	bne.n	8006814 <UART_Start_Receive_IT+0x108>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <UART_Start_Receive_IT+0x18c>)
 8006810:	669a      	str	r2, [r3, #104]	; 0x68
 8006812:	e002      	b.n	800681a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a21      	ldr	r2, [pc, #132]	; (800689c <UART_Start_Receive_IT+0x190>)
 8006818:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d019      	beq.n	8006856 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006822:	f3ef 8310 	mrs	r3, PRIMASK
 8006826:	61fb      	str	r3, [r7, #28]
  return(result);
 8006828:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
 800682c:	2301      	movs	r3, #1
 800682e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	f383 8810 	msr	PRIMASK, r3
}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2190      	movs	r1, #144	; 0x90
 8006844:	0049      	lsls	r1, r1, #1
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	e018      	b.n	8006888 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006856:	f3ef 8310 	mrs	r3, PRIMASK
 800685a:	613b      	str	r3, [r7, #16]
  return(result);
 800685c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f383 8810 	msr	PRIMASK, r3
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2120      	movs	r1, #32
 8006878:	430a      	orrs	r2, r1
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f383 8810 	msr	PRIMASK, r3
}
 8006886:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b010      	add	sp, #64	; 0x40
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	000001ff 	.word	0x000001ff
 8006898:	08006ba5 	.word	0x08006ba5
 800689c:	080069ed 	.word	0x080069ed

080068a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ac:	617b      	str	r3, [r7, #20]
  return(result);
 80068ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
 80068b2:	2301      	movs	r3, #1
 80068b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	f383 8810 	msr	PRIMASK, r3
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4926      	ldr	r1, [pc, #152]	; (8006964 <UART_EndRxTransfer+0xc4>)
 80068ca:	400a      	ands	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f383 8810 	msr	PRIMASK, r3
}
 80068d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068da:	f3ef 8310 	mrs	r3, PRIMASK
 80068de:	623b      	str	r3, [r7, #32]
  return(result);
 80068e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
 80068e4:	2301      	movs	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	f383 8810 	msr	PRIMASK, r3
}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	438a      	bics	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	f383 8810 	msr	PRIMASK, r3
}
 800690a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006910:	2b01      	cmp	r3, #1
 8006912:	d118      	bne.n	8006946 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006914:	f3ef 8310 	mrs	r3, PRIMASK
 8006918:	60bb      	str	r3, [r7, #8]
  return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	2301      	movs	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f383 8810 	msr	PRIMASK, r3
}
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2110      	movs	r1, #16
 8006936:	438a      	bics	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f383 8810 	msr	PRIMASK, r3
}
 8006944:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2280      	movs	r2, #128	; 0x80
 800694a:	2120      	movs	r1, #32
 800694c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	669a      	str	r2, [r3, #104]	; 0x68
}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	46bd      	mov	sp, r7
 800695e:	b00e      	add	sp, #56	; 0x38
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	fffffedf 	.word	0xfffffedf

08006968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	225a      	movs	r2, #90	; 0x5a
 800697a:	2100      	movs	r1, #0
 800697c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2252      	movs	r2, #82	; 0x52
 8006982:	2100      	movs	r1, #0
 8006984:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	0018      	movs	r0, r3
 800698a:	f7ff fafd 	bl	8005f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	46bd      	mov	sp, r7
 8006992:	b004      	add	sp, #16
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	2301      	movs	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2140      	movs	r1, #64	; 0x40
 80069c0:	438a      	bics	r2, r1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f383 8810 	msr	PRIMASK, r3
}
 80069ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	0018      	movs	r0, r3
 80069e0:	f7ff faca 	bl	8005f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b006      	add	sp, #24
 80069ea:	bd80      	pop	{r7, pc}

080069ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b094      	sub	sp, #80	; 0x50
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f4:	204e      	movs	r0, #78	; 0x4e
 80069f6:	183b      	adds	r3, r7, r0
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	215c      	movs	r1, #92	; 0x5c
 80069fc:	5a52      	ldrh	r2, [r2, r1]
 80069fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2280      	movs	r2, #128	; 0x80
 8006a04:	589b      	ldr	r3, [r3, r2]
 8006a06:	2b22      	cmp	r3, #34	; 0x22
 8006a08:	d000      	beq.n	8006a0c <UART_RxISR_8BIT+0x20>
 8006a0a:	e0ba      	b.n	8006b82 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	214c      	movs	r1, #76	; 0x4c
 8006a12:	187b      	adds	r3, r7, r1
 8006a14:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006a16:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	183b      	adds	r3, r7, r0
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	400a      	ands	r2, r1
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	225a      	movs	r2, #90	; 0x5a
 8006a3c:	5a9b      	ldrh	r3, [r3, r2]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b299      	uxth	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	225a      	movs	r2, #90	; 0x5a
 8006a48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	225a      	movs	r2, #90	; 0x5a
 8006a4e:	5a9b      	ldrh	r3, [r3, r2]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <UART_RxISR_8BIT+0x6c>
 8006a56:	e09c      	b.n	8006b92 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a62:	2301      	movs	r3, #1
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	f383 8810 	msr	PRIMASK, r3
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4948      	ldr	r1, [pc, #288]	; (8006b9c <UART_RxISR_8BIT+0x1b0>)
 8006a7a:	400a      	ands	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	f383 8810 	msr	PRIMASK, r3
}
 8006a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	647b      	str	r3, [r7, #68]	; 0x44
 8006a94:	2301      	movs	r3, #1
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2101      	movs	r1, #1
 8006aac:	438a      	bics	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	2120      	movs	r1, #32
 8006ac2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	4013      	ands	r3, r2
 8006adc:	d018      	beq.n	8006b10 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ade:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f383 8810 	msr	PRIMASK, r3
}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4928      	ldr	r1, [pc, #160]	; (8006ba0 <UART_RxISR_8BIT+0x1b4>)
 8006b00:	400a      	ands	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	f383 8810 	msr	PRIMASK, r3
}
 8006b0e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d12f      	bne.n	8006b78 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b28:	2301      	movs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f383 8810 	msr	PRIMASK, r3
}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2110      	movs	r1, #16
 8006b40:	438a      	bics	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f383 8810 	msr	PRIMASK, r3
}
 8006b4e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	2210      	movs	r2, #16
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d103      	bne.n	8006b66 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2210      	movs	r2, #16
 8006b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2258      	movs	r2, #88	; 0x58
 8006b6a:	5a9a      	ldrh	r2, [r3, r2]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	0011      	movs	r1, r2
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7ff fa11 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b76:	e00c      	b.n	8006b92 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7fc fc8c 	bl	8003498 <HAL_UART_RxCpltCallback>
}
 8006b80:	e007      	b.n	8006b92 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2108      	movs	r1, #8
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	619a      	str	r2, [r3, #24]
}
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	46bd      	mov	sp, r7
 8006b96:	b014      	add	sp, #80	; 0x50
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	fffffedf 	.word	0xfffffedf
 8006ba0:	fbffffff 	.word	0xfbffffff

08006ba4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b094      	sub	sp, #80	; 0x50
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bac:	204e      	movs	r0, #78	; 0x4e
 8006bae:	183b      	adds	r3, r7, r0
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	215c      	movs	r1, #92	; 0x5c
 8006bb4:	5a52      	ldrh	r2, [r2, r1]
 8006bb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	589b      	ldr	r3, [r3, r2]
 8006bbe:	2b22      	cmp	r3, #34	; 0x22
 8006bc0:	d000      	beq.n	8006bc4 <UART_RxISR_16BIT+0x20>
 8006bc2:	e0ba      	b.n	8006d3a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	214c      	movs	r1, #76	; 0x4c
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006bce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	183a      	adds	r2, r7, r0
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	8812      	ldrh	r2, [r2, #0]
 8006bde:	4013      	ands	r3, r2
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	225a      	movs	r2, #90	; 0x5a
 8006bf4:	5a9b      	ldrh	r3, [r3, r2]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b299      	uxth	r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	225a      	movs	r2, #90	; 0x5a
 8006c00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	225a      	movs	r2, #90	; 0x5a
 8006c06:	5a9b      	ldrh	r3, [r3, r2]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d000      	beq.n	8006c10 <UART_RxISR_16BIT+0x6c>
 8006c0e:	e09c      	b.n	8006d4a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c10:	f3ef 8310 	mrs	r3, PRIMASK
 8006c14:	623b      	str	r3, [r7, #32]
  return(result);
 8006c16:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	f383 8810 	msr	PRIMASK, r3
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4948      	ldr	r1, [pc, #288]	; (8006d54 <UART_RxISR_16BIT+0x1b0>)
 8006c32:	400a      	ands	r2, r1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	f383 8810 	msr	PRIMASK, r3
}
 8006c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2101      	movs	r1, #1
 8006c64:	438a      	bics	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2280      	movs	r2, #128	; 0x80
 8006c78:	2120      	movs	r1, #32
 8006c7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	4013      	ands	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c96:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c9c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4928      	ldr	r1, [pc, #160]	; (8006d58 <UART_RxISR_16BIT+0x1b4>)
 8006cb8:	400a      	ands	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f383 8810 	msr	PRIMASK, r3
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d12f      	bne.n	8006d30 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cda:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cdc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	438a      	bics	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f383 8810 	msr	PRIMASK, r3
}
 8006d06:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d103      	bne.n	8006d1e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2258      	movs	r2, #88	; 0x58
 8006d22:	5a9a      	ldrh	r2, [r3, r2]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0011      	movs	r1, r2
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7ff f935 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d2e:	e00c      	b.n	8006d4a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7fc fbb0 	bl	8003498 <HAL_UART_RxCpltCallback>
}
 8006d38:	e007      	b.n	8006d4a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2108      	movs	r1, #8
 8006d46:	430a      	orrs	r2, r1
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b014      	add	sp, #80	; 0x50
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	fffffedf 	.word	0xfffffedf
 8006d58:	fbffffff 	.word	0xfbffffff

08006d5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <memset>:
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	1882      	adds	r2, r0, r2
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <__libc_init_array>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	2600      	movs	r6, #0
 8006d80:	4c0c      	ldr	r4, [pc, #48]	; (8006db4 <__libc_init_array+0x38>)
 8006d82:	4d0d      	ldr	r5, [pc, #52]	; (8006db8 <__libc_init_array+0x3c>)
 8006d84:	1b64      	subs	r4, r4, r5
 8006d86:	10a4      	asrs	r4, r4, #2
 8006d88:	42a6      	cmp	r6, r4
 8006d8a:	d109      	bne.n	8006da0 <__libc_init_array+0x24>
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	f000 f819 	bl	8006dc4 <_init>
 8006d92:	4c0a      	ldr	r4, [pc, #40]	; (8006dbc <__libc_init_array+0x40>)
 8006d94:	4d0a      	ldr	r5, [pc, #40]	; (8006dc0 <__libc_init_array+0x44>)
 8006d96:	1b64      	subs	r4, r4, r5
 8006d98:	10a4      	asrs	r4, r4, #2
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	d105      	bne.n	8006daa <__libc_init_array+0x2e>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	00b3      	lsls	r3, r6, #2
 8006da2:	58eb      	ldr	r3, [r5, r3]
 8006da4:	4798      	blx	r3
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7ee      	b.n	8006d88 <__libc_init_array+0xc>
 8006daa:	00b3      	lsls	r3, r6, #2
 8006dac:	58eb      	ldr	r3, [r5, r3]
 8006dae:	4798      	blx	r3
 8006db0:	3601      	adds	r6, #1
 8006db2:	e7f2      	b.n	8006d9a <__libc_init_array+0x1e>
 8006db4:	08006e5c 	.word	0x08006e5c
 8006db8:	08006e5c 	.word	0x08006e5c
 8006dbc:	08006e60 	.word	0x08006e60
 8006dc0:	08006e5c 	.word	0x08006e5c

08006dc4 <_init>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr

08006dd0 <_fini>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr
